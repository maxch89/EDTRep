#Область ПрограммныйИнтерфейс
// Установка монопольного режима для целей отключения базы от главного узла.
// Параметры:
//   Отказ - Булево - признак отказа.
Процедура УстановитьМонопольныйРежимДляОтключенияДемоБазыОтГлавногоУзла(Отказ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена.Полный.ЭтотУзел(), "ДляПубликации")
		И ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел()) Тогда
		
		Если НЕ МонопольныйРежим() Тогда
			Попытка
				УстановитьМонопольныйРежим(Истина);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Отключение базы от главного узла в случае необходимости.
Процедура ОтключитьДемонстрационнуюБазуОтГлавногоУзлаПриНеобходимости() Экспорт
	
	Если ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел())
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена.Полный.ЭтотУзел(), "ДляПубликации") Тогда
		
		ПланыОбмена.УстановитьГлавныйУзел(Неопределено);
		Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
		
		Если МонопольныйРежим() Тогда
			Попытка
				УстановитьМонопольныйРежим(Ложь);
			Исключение
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода.
// при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы.
// - ПриНачалеРаботыСистемы.
//
// Важно: при запуске недопустимо использовать команды сброса кэша.
// повторно используемых модулей, иначе запуск может привести.
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	ПоказатьПомощникБыстрогоОсвоения = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПомощникБыстрогоОсвоения", "Показывать", Истина);
	Параметры.Вставить("ПоказатьПомощникБыстрогоОсвоения", ПоказатьПомощникБыстрогоОсвоения);

КонецПроцедуры

// Раскладывает строковое представление простого типа на составляющие для отображения в формах
// Параметры:
//   ПредставлениеТипа - Строка - полное представление типа
//   Тип - Строка - Тип строкой.
//   Длина - Строка - Длина в типе.
//   Точность - Строка - Точность в типе.
//   МинимальнаяДлинаСтроки - Строка - мин. длина строки.
//   НеограниченнаяДлина - Булево - признак неограниченной длины.
Процедура РазложитьПредставлениеПростогоТипа(ПредставлениеТипа, Тип, Длина, Точность, МинимальнаяДлинаСтроки, НеограниченнаяДлина) Экспорт
	Если Найти(ПредставлениеТипа, "date") Тогда
		Тип = "Дата";
	ИначеЕсли Найти(ПредставлениеТипа, "boolean") Тогда
		Тип = "Булево";
	ИначеЕсли Найти(ПредставлениеТипа, "string") Тогда
		Тип = "Строка";
	ИначеЕсли Найти(ПредставлениеТипа, "int") Тогда
		Тип = "Число";
		ДлинаБезДесятых(ПредставлениеТипа, Длина);
		Точность = 0;
	ИначеЕсли Найти(ПредставлениеТипа, "decimal") Тогда
		Тип = "Число";
	Иначе
		Тип = "Прочее";
	КонецЕсли;
	Если Найти(ПредставлениеТипа, "string") ИЛИ Найти(ПредставлениеТипа, "decimal") Тогда
		ПозицияСкобки1 = Найти(ПредставлениеТипа, "(");
		ПозицияСкобки2 = Найти(ПредставлениеТипа, ")");
		ПозицияЗапятой = Найти(ПредставлениеТипа, ",");
		Длина = 0;
		Если ПозицияСкобки1 > 0 И ПозицияСкобки2 > 0 Тогда
			Если ПозицияЗапятой = 0 Тогда
				Точность = 0;
				ДлинаБезДесятых(ПредставлениеТипа, Длина);
			Иначе
				ДлинаСтрокой = Сред(ПредставлениеТипа, ПозицияСкобки1 + 1, ПозицияЗапятой - ПозицияСкобки1 - 1);
				Длина1 = Число(ДлинаСтрокой);
				
				ДлинаСтрокой = Сред(ПредставлениеТипа, ПозицияЗапятой + 1, ПозицияСкобки2 - ПозицияЗапятой - 1);
				Длина2 = Число(ДлинаСтрокой);
				Если Найти(ПредставлениеТипа, "string") Тогда
					МинимальнаяДлинаСтроки = Длина1;
					Длина = Длина2;
				Иначе
					Длина = Длина1;
					Точность = Длина2;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Длина = 0 И Найти(ПредставлениеТипа, "string") Тогда
			НеограниченнаяДлина = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Параметры:
//  Конвертация - СправочникСсылка.Конвертации - ссылка на конвертацию.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена(Конвертация) Экспорт
	Если ЗначениеЗаполнено(Конвертация) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конвертация, "ВерсияФорматаМенеджера");
	КонецЕсли;
	// Если конвертация пустая, возвращается максимально возможная версия.
	Возврат "2";
КонецФункции
#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Процедура ДлинаБезДесятых(ПредставлениеТипа, Длина)
	Длина = 0;
	ПозицияСкобки1 = Найти(ПредставлениеТипа, "(");
	ПозицияСкобки2 = Найти(ПредставлениеТипа, ")");
	Если ПозицияСкобки1 > 0 И ПозицияСкобки2 > 0 Тогда
		ДлинаСтрокой = Сред(ПредставлениеТипа, ПозицияСкобки1 + 1, ПозицияСкобки2 - ПозицияСкобки1 - 1);
		Длина = Число(ДлинаСтрокой);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

