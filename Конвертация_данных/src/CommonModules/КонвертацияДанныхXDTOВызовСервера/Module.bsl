#Область ПрограммныйИнтерфейс

#Область ФОРМИРОВАНИЕ_СПИСКОВ_ДЛЯ_ВЫБОРА_ОБЪЕКТОВ_В_ДИАЛОГАХ
// Заполнение списка объектов конфигурации для указанных конвертаций.
// Параметры:
//   ПолучательОбъектовКонфигурации - СписокЗначений - заполняемый список. 
//                                   Может передаваться также и таблица значений.
//   МассивКонвертаций - массив - Массив, содержащий конвертации.
//   ДляПКО - булево - признак того что заполнение происходит для правила конвертации объектов.
//   ДляПКПД - булево - признак того что заполнение происходит для правила конвертации предопределенных данных.
Процедура ЗаполнитьСписокОбъектовКонфигурации(ПолучательОбъектовКонфигурации, МассивКонвертаций, ДляПКО = Ложь, ДляПКПД = Ложь) Экспорт
	ПолучательОбъектовКонфигурации.Очистить();
	Если НЕ ЗначениеЗаполнено(МассивКонвертаций) Тогда
		Возврат;
	КонецЕсли;
	МассивКонфигураций = ПолучитьМассивКонфигурацийИзМассиваКонвертаций(МассивКонвертаций);
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.Наименование КАК Наименование,
	|	Объекты.Тип КАК Тип,
	|	Объекты.Владелец КАК Конфигурация
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ Справочник.Объекты КАК Объекты
	|ГДЕ Объекты.ПометкаУдаления = ЛОЖЬ И Объекты.ЭтоГруппа = ЛОЖЬ 
	|	И Объекты.Владелец В (&МассивКонфигураций)
	|#УСЛОВИЕ_ПК#
	|;
	|ВЫБРАТЬ
	|	Наименование,
	|	Количество(Конфигурация)
	|ИЗ ТаблицаОбъектов
	|СГРУППИРОВАТЬ ПО Наименование
	|УПОРЯДОЧИТЬ ПО Наименование";
	
	Если ДляПКПД Тогда
		ТекстУсловиеПК = "
		|	И (Объекты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Справочник) 
		|		ИЛИ Объекты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Перечисление)
		|		ИЛИ Объекты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ПланВидовХарактеристик))";
	Иначе	
		ТекстУсловиеПК = "И (Объекты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Справочник) 
						|	ИЛИ Объекты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Документ)
						|	ИЛИ Объекты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.РегистрСведений)
						|	ИЛИ Объекты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ПланВидовХарактеристик))";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#УСЛОВИЕ_ПК#", ТекстУсловиеПК);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивКонфигураций",МассивКонфигураций);
	Выборка = Запрос.Выполнить().Выбрать();
	ДобавлятьВТаблицу = Истина;
	Если ТипЗнч(ПолучательОбъектовКонфигурации) = Тип("СписокЗначений") Тогда
		ДобавлятьВТаблицу = Ложь;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		Если ДобавлятьВТаблицу Тогда
			СтрокаОбъект = ПолучательОбъектовКонфигурации.Добавить();
			СтрокаОбъект.Наименование = СокрЛП(Выборка.Наименование);
		Иначе
			ПолучательОбъектовКонфигурации.Добавить(СокрЛП(Выборка.Наименование));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Заполнение списка объектов формата для указанных конвертаций.
// Параметры:
//  ПолучательОбъектовФормата - СписокЗначений - заполняемый список. 
//                                   Может передаваться также и таблица значений.
//  МассивКонвертаций - Массив - массив, содержащий конвертации.
//  ДляПКО - булево - признак того что заполнение происходит для правила конвертации объектов.
//  ДляПКПД - булево - признак того что заполнение происходит для правила конвертации предопределенных данных.
//  ВерсияФормата - СправочникСсылка.ВерсияФормата - Версия формата, для которой заполняется список объектов.
Процедура ЗаполнитьСписокОбъектовФормата(ПолучательОбъектовФормата, МассивКонвертаций, ДляПКО = Ложь, ДляПКПД = Ложь, ВерсияФормата = Неопределено) Экспорт
	ПолучательОбъектовФормата.Очистить();
	Если НЕ ЗначениеЗаполнено(МассивКонвертаций)
		И ВерсияФормата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;

	СтруктураПараметров = Новый Структура("ДляПКО, ДляПКПД", ДляПКО, ДляПКПД);
	СтруктураПараметров.Вставить("ДляПроектирования", Ложь);
	СтруктураПараметров.Вставить("ОтборПоВерсиям", Ложь);
	СтруктураПараметров.Вставить("ОтборПоКонвертациям", Ложь);
	Если ВерсияФормата <> Неопределено Тогда
		СтруктураПараметров.Вставить("ДляПроектирования", Истина);
		Если ЗначениеЗаполнено(ВерсияФормата) Тогда
			СтруктураПараметров.ОтборПоВерсиям = Истина;
			Запрос.УстановитьПараметр("ВерсияФормата",ВерсияФормата);
		КонецЕсли;
	Иначе
		СтруктураПараметров.ОтборПоКонвертациям = Истина;
		Запрос.УстановитьПараметр("МассивКонвертаций",МассивКонвертаций);
	КонецЕсли;
	ТекстЗапроса = ПолучитьТекстЗапросаСписокОбъектовФормата(СтруктураПараметров);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	ДобавлятьВТаблицу = Истина;
	Если ТипЗнч(ПолучательОбъектовФормата) = Тип("СписокЗначений") Тогда
		ДобавлятьВТаблицу = Ложь;
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		Если ДобавлятьВТаблицу Тогда
			СтрокаОбъект = ПолучательОбъектовФормата.Добавить();
			СтрокаОбъект.Наименование = СокрЛП(Выборка.Наименование);
		Иначе
			ПолучательОбъектовФормата.Добавить(СокрЛП(Выборка.Наименование));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Формирование текста запроса для получения списка объектов формата.
// Параметры:
//  СтруктураПараметров - Структура - сведения о контексте выбора объекта формата.
//   * ДляПКО - Булево, признак того что список вызывается в контексте ПКО.
//   * ДляПКПД - Булево, признак того что список вызывается в контексте ПКПД.
//   * ОтборПоВерсиям - Булево, признак того что отбор следует проводить по версии формата.
//   * ОтборПоКонвертациям - Булево, признак того что отбор следует проводить по конвертациям.
//   * СУпорядочиванием - Булево, признак необходимости упорядочить список.
//   * ДляПроектирования - Булево, признак работы в контексте проектирования формата.
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ПолучитьТекстЗапросаСписокОбъектовФормата(СтруктураПараметров) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|ОбъектыФормата.Наименование
	|ИЗ Справочник.ОбъектыФормата КАК ОбъектыФормата
	|#СОЕДИНЕНИЕ_ПК#
	|ГДЕ ОбъектыФормата.ПометкаУдаления = ЛОЖЬ И ОбъектыФормата.ЭтоГруппа = ЛОЖЬ
	|				#УсловиеВерсияФормата#
	|#УСЛОВИЕ_ПК#
	|УПОРЯДОЧИТЬ ПО ОбъектыФормата.Наименование";
	ТекстСоединениеПК = "";
	ТекстУсловиеПК = "";
	Если СтруктураПараметров.ДляПКО = Истина Тогда
		ТекстСоединениеПК = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ Владелец ИЗ Справочник.СвойстваФормата) КАК Свойства
		|ПО Свойства.Владелец = ОбъектыФормата.Ссылка";
		ТекстУсловиеПК = "
		|	И (ОбъектыФормата.Наименование ПОДОБНО ""Справочник.%"" ИЛИ ОбъектыФормата.Наименование ПОДОБНО ""Документ.%"")";
	ИначеЕсли СтруктураПараметров.ДляПКПД Тогда
		ТекстСоединениеПК = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ Владелец ИЗ Справочник.ЗначенияФормата) КАК Значения
		|ПО Значения.Владелец = ОбъектыФормата.Ссылка";
	Иначе
		Если СтруктураПараметров.ДляПроектирования = Истина Тогда
			ТекстУсловиеПК = "И НЕ (ОбъектыФормата.Наименование ПОДОБНО ""КлючевыеСвойства%"" ИЛИ ОбъектыФормата.Наименование ПОДОБНО ""Info%"")";
		Иначе
			ТекстУсловиеПК = "И (ОбъектыФормата.Наименование ПОДОБНО ""Справочник.%"" ИЛИ ОбъектыФормата.Наименование ПОДОБНО ""Документ.%"")";
		КонецЕсли;
	КонецЕсли;
	ТекстУсловиеВерсияФормата = "";
	Если СтруктураПараметров.ОтборПоВерсиям = Истина Тогда
		ТекстУсловиеВерсияФормата = " И ОбъектыФормата.Владелец = &ВерсияФормата";
	ИначеЕсли СтруктураПараметров.ОтборПоКонвертациям = Истина Тогда
		ТекстУсловиеВерсияФормата = " И ОбъектыФормата.Владелец В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВерсияФормата ИЗ Справочник.Конвертации.ВерсииФормата
		|				ГДЕ Ссылка В (&МассивКонвертаций))";
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#СОЕДИНЕНИЕ_ПК#", ТекстСоединениеПК);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#УСЛОВИЕ_ПК#", ТекстУсловиеПК);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#УсловиеВерсияФормата#", ТекстУсловиеВерсияФормата);
	Возврат ТекстЗапроса;
КонецФункции

// Заполнение списка значений конфигурации для правил конвертации предопределенных данных.
// Параметры:
//  СписокЗначенийКонфигурации - СписокЗначений - заполняемый список.
//  МассивКонвертаций - Массив - Массив, содержащий конвертации.
//  ОбъектКонфигурации - Строка - объект конфигурации для которого настраивается ПКПД.
Процедура ЗаполнитьСписокЗначенийКонфигурации(СписокЗначенийКонфигурации, МассивКонвертаций, ОбъектКонфигурации) Экспорт
	СписокЗначенийКонфигурации.Очистить();
	Если НЕ ЗначениеЗаполнено(ОбъектКонфигурации) 
		ИЛИ НЕ ЗначениеЗаполнено(МассивКонвертаций) Тогда
		Возврат;
	КонецЕсли;
	МассивКонфигураций = ПолучитьМассивКонфигурацийИзМассиваКонвертаций(МассивКонвертаций);

	ТекстЗапроса = "ВЫБРАТЬ
	|	Наименование КАК Имя,
	|	Владелец.Владелец КАК Конфигурация
	|ПОМЕСТИТЬ ТаблицаЗначенийКонфигураций
	|ИЗ Справочник.Значения
	|ГДЕ Владелец.Наименование = &ОбъектКонфигурацииИмя
	|	И ПометкаУдаления = ЛОЖЬ
	|	И Владелец.Владелец В (&МассивКонфигураций)
	|;
	|ВЫБРАТЬ
	|	Имя,
	|	Количество(Конфигурация)
	|ИЗ ТаблицаЗначенийКонфигураций
	|СГРУППИРОВАТЬ ПО Имя
	|УПОРЯДОЧИТЬ ПО Имя";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектКонфигурацииИмя", СокрЛП(ОбъектКонфигурации));
	Запрос.УстановитьПараметр("МассивКонфигураций",МассивКонфигураций);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЗначенийКонфигурации.Добавить(СокрЛП(Выборка.Имя));
	КонецЦикла;
КонецПроцедуры

// Заполнение списка значений формата для правил конвертации предопределенных данных.
// Параметры:
//  СписокЗначенийФормата - СписокЗначений - заполняемый список.
//  МассивКонвертаций - Массив - массив, содержащий конвертации.
//  ОбъектФормата - Строка - объект формата для которого настраивается ПКПД.
Процедура ЗаполнитьСписокЗначенийФормата(СписокЗначенийФормата, МассивКонвертаций, ОбъектФормата) Экспорт
	СписокЗначенийФормата.Очистить();
	Если НЕ ЗначениеЗаполнено(ОбъектФормата)
		ИЛИ НЕ ЗначениеЗаполнено(МассивКонвертаций) Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|Наименование КАК Имя
	|ИЗ Справочник.ЗначенияФормата
	|ГДЕ Владелец.Наименование = &ОбъектФорматаИмя
	|	И ПометкаУдаления = ЛОЖЬ
	|				И Владелец.Владелец В 
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ ВерсияФормата ИЗ Справочник.Конвертации.ВерсииФормата
	|				ГДЕ Ссылка В (&МассивКонвертаций))
	|УПОРЯДОЧИТЬ ПО Наименование";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектФорматаИмя", СокрЛП(ОбъектФормата));
	Запрос.УстановитьПараметр("МассивКонвертаций",МассивКонвертаций);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЗначенийФормата.Добавить(СокрЛП(Выборка.Имя));
	КонецЦикла;
КонецПроцедуры

// Заполнение таблицы свойств конфигурации для правила конвертации объекта.
// Процедура является оберткой, внутри которой вызывается собственно функция заполнения таблицы свойств.
// Параметры:
//  ТаблицаСвойствКонфигурации - ТаблицаЗначений - таблица, содержащая свойства объекта конфигурации.
//  ПКО - СправочникСсылка.ПравилаКонвертацииОбъектов - правило конвертации объекта, для которого настраиваются ПКС.
//  ОбъектКонфигурации - строка - объект конфигурации для которого настраиваются ПКС.
Процедура ЗаполнитьСписокСвойствКонфигурации(ТаблицаСвойствКонфигурации, ПКО, ОбъектКонфигурации) Экспорт
	
	ТаблицаСвойствКонфигурации.Очистить();
	Если НЕ ЗначениеЗаполнено(ПКО) 
		ИЛИ НЕ ЗначениеЗаполнено(ОбъектКонфигурации) Тогда
		Возврат;
	КонецЕсли;
	МассивКонвертаций = Новый Массив;
	ПолучитьСписокКонвертацийДляЭлементаКонвертации(ПКО, МассивКонвертаций);
	ТаблицаСвойствКонфигурации.Загрузить(ТаблицаСвойствОбъектаКонфигурации(МассивКонвертаций, ОбъектКонфигурации));

КонецПроцедуры

// Заполнение таблицы свойств конфигурации для правила конвертации объекта.
// Параметры:
//  МассивКонвертаций - Массив - массив, содержащий конвертации.
//  ОбъектКонфигурации - строка - объект конфигурации для которого настраиваются ПКС.
//  ДляПолейПоиска - Булево - Признак того, что таблица свойств будет использоваться для настройки полей поиска
// Возвращаемое значение:
//  ТаблицаЗначений - содержит свойства объекта конфигурации.
Функция ТаблицаСвойствОбъектаКонфигурации(МассивКонвертаций, ОбъектКонфигурации, ДляПолейПоиска = Ложь) Экспорт
	МассивКонфигураций = ПолучитьМассивКонфигурацийИзМассиваКонвертаций(МассивКонвертаций);
	Запрос = Новый Запрос;
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Свойства.Родитель,
		|	Свойства.Наименование,
		|	ВЫРАЗИТЬ(Свойства.ТипыСтрокой КАК СТРОКА(1000)) КАК Тип,
		|	Свойства.Владелец.Владелец КАК Конвертация
		|ПОМЕСТИТЬ ТаблицаСвойствРасширенная
		|ИЗ
		|	Справочник.Свойства КАК Свойства
		|ГДЕ
		|	Свойства.Владелец.Наименование = &ОбъектКонфигурацииИмя
		|	И Свойства.ПометкаУдаления = ЛОЖЬ
		|	И Свойства.Владелец.Владелец В (&МассивКонфигураций)
		|	%УсловияДляПолейПоиска%
		|;
		|ВЫБРАТЬ 
		|	ВЫБОР
		|		КОГДА Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)
		|			ТОГДА Наименование
		|		ИНАЧЕ Родитель.Наименование + ""."" + Наименование
		|	КОНЕЦ КАК Имя,
		|	Максимум(Тип) КАК Тип
		|ИЗ ТаблицаСвойствРасширенная
		|СГРУППИРОВАТЬ ПО 
		|	ВЫБОР
		|		КОГДА Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)
		|			ТОГДА Наименование
		|		ИНАЧЕ Родитель.Наименование + ""."" + Наименование
		|	КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	Имя";
	УсловияДляПолейПоиска = "";
	Если ДляПолейПоиска Тогда
		УсловияДляПолейПоиска = " И Свойства.ЭтоГруппа = Ложь 
								|	И Свойства.Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловияДляПолейПоиска%", УсловияДляПолейПоиска);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектКонфигурацииИмя", СокрЛП(ОбъектКонфигурации));
	Запрос.УстановитьПараметр("МассивКонфигураций", МассивКонфигураций);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	// Вручную добавляем свойство Ссылка.
	НоваяСтрокаСвойств = ТаблицаСвойств.Добавить();
	НоваяСтрокаСвойств.Имя = "Ссылка";
	НоваяСтрокаСвойств.Тип = СокрЛП(ОбъектКонфигурации);

	Возврат ТаблицаСвойств;
КонецФункции

// Заполнение таблицы свойств формата для правила конвертации объекта.
// Параметры:
//  ПолучательСвойствФормата - ТаблицаЗначений - таблица, содержащая свойства объекта формата.
//                            Может передаваться также список значений.
//  ПКО - СправочникСсылка.ПравилаКонвертацииОбъектов - правило конвертации объекта, для которого настраиваются ПКС.
//  ОбъектФормата - строка - объект конфигурации для которого настраиваются ПКС.
//  ВерсияФормата - СправочникСсылка.ВерсииФормата - Версия формата, для которого заполняются свойства (при отсутствии ПКО).
Процедура ЗаполнитьСписокСвойствФормата(ПолучательСвойствФормата, ПКО, ОбъектФормата, ВерсияФормата = Неопределено) Экспорт
	ПолучательСвойствФормата.Очистить();
	Если (НЕ ЗначениеЗаполнено(ПКО) И ВерсияФормата = Неопределено) 
		ИЛИ НЕ ЗначениеЗаполнено(ОбъектФормата) Тогда
		Возврат;
	КонецЕсли;
	ОтборПоКонвертациям = Ложь;
	ОтборПоВерсиямФормата = Ложь;
	Запрос = Новый Запрос;
	МассивВерсийФормата = Новый Массив;
	Если ЗначениеЗаполнено(ПКО) Тогда
		МассивКонвертаций = Новый Массив;
		ПолучитьСписокКонвертацийДляЭлементаКонвертации(ПКО, МассивКонвертаций);
		МаксимальнаяВерсияФормата = Неопределено;
		МаксимальнаяВерсияФорматаЧисло = 0;
		ЗапросВерсии = Новый Запрос;
		ЗапросВерсии.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЧВерсииФормата.ВерсияФормата КАК ВерсияФормата
		|ИЗ
		|	Справочник.Конвертации.ВерсииФормата КАК ТЧВерсииФормата
		|ГДЕ
		|	ТЧВерсииФормата.Ссылка В (&МассивКонвертаций)";
		ЗапросВерсии.УстановитьПараметр("МассивКонвертаций", МассивКонвертаций);
		Выборка = ЗапросВерсии.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивВерсийФормата.Добавить(Выборка.ВерсияФормата);
			ТекВерсияЧисло = ВерсиюВЧисло(Выборка.ВерсияФормата);
			Если МаксимальнаяВерсияФормата = Неопределено
				Или ТекВерсияЧисло > МаксимальнаяВерсияФорматаЧисло Тогда
				МаксимальнаяВерсияФормата = Выборка.ВерсияФормата;
				МаксимальнаяВерсияФорматаЧисло = ТекВерсияЧисло;
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("ВерсияФормата", МассивВерсийФормата);
	Иначе
		Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФормата);
	КонецЕсли;
	ДобавлениеСтрокТаблицы = Истина;
	Если ТипЗнч(ПолучательСвойствФормата) = Тип("СписокЗначений") Тогда
		ДобавлениеСтрокТаблицы = Ложь;
	КонецЕсли;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаСписокСвойствФормата(МассивВерсийФормата.Количество()>0);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОбъектФорматаИмя", СокрЛП(ОбъектФормата));

	ТабРезультат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТабРезультат Цикл
		Если Строка.ЭтоРеквизитТЧ Тогда
			Строка.ОтображаемоеИмя = Строка.ИмяТЧ + "." + Строка.Имя;
		КонецЕсли;
	КонецЦикла;
	ТабРезультат.Свернуть("Имя, Тип, ЭтоРеквизитТЧ, ИмяТЧ, ВыводитьПолноеИмяСвойства, ОтображаемоеИмя","Количество");
	// Возможно, для некоторых свойств необходимо выводить полное имя свойства.
	МассивДублей = Новый Массив;
	Для Каждого Строка Из ТабРезультат Цикл
		Если Строка.Количество > 1 Тогда
			Строка.ВыводитьПолноеИмяСвойства = Истина;
			МассивДублей.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Если МассивДублей.Количество() > 0 Тогда
		Для Каждого Дубль Из МассивДублей Цикл
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = ПолучитьТекстЗапросаРазузлованиеИменСвойствФормата(МассивВерсийФормата.Количество()>0);
			Если МассивВерсийФормата.Количество() = 0 Тогда
				Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФормата);
			Иначе
				Запрос.УстановитьПараметр("ВерсияФормата", МассивВерсийФормата);
			КонецЕсли;
			Запрос.УстановитьПараметр("ИмяСвойства", Дубль.Имя);
			Запрос.УстановитьПараметр("ОбъектФорматаИмя", СокрЛП(ОбъектФормата));
			Запрос.УстановитьПараметр("ЭтоРеквизитТЧ", Дубль.ЭтоРеквизитТЧ);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ИмяТЧ <> Дубль.ИмяТЧ Тогда
					Продолжить;
				КонецЕсли;
				НаименованиеСвойства = СокрЛП(Выборка.Имя);
				ИмяТЧ = Дубль.ИмяТЧ;
				ОбработатьСвойствоРодитель(Выборка.Родитель, ИмяТЧ, НаименованиеСвойства);
				СтрокаРезультат = ТабРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, Выборка,"Имя, ИмяТЧ, Тип");
				СтрокаРезультат.ОтображаемоеИмя = НаименованиеСвойства;
				СтрокаРезультат.ЭтоРеквизитТЧ = Дубль.ЭтоРеквизитТЧ;
				СтрокаРезультат.ВыводитьПолноеИмяСвойства = Ложь;
				СтрокаРезультат.Количество = 1;
			КонецЦикла;
		КонецЦикла;
		ТабРезультат.Свернуть("Имя, Тип, ЭтоРеквизитТЧ, ИмяТЧ, ВыводитьПолноеИмяСвойства, ОтображаемоеИмя","Количество");
	КонецЕсли;
	
	Для Каждого Строка Из ТабРезультат Цикл
		Если Строка.ВыводитьПолноеИмяСвойства Тогда
			Продолжить;
		КонецЕсли;
		ИмяТЧ = "";
		Если ДобавлениеСтрокТаблицы Тогда
			НоваяСтрока = ПолучательСвойствФормата.Добавить();
			НоваяСтрока.Имя = Строка.ОтображаемоеИмя;
			НоваяСтрока.Тип = Строка.Тип;
			НоваяСтрока.ИмяТЧ = Строка.ИмяТЧ;
		Иначе
			// Работа со списком значений.
			ПолучательСвойствФормата.Добавить(Строка.ОтображаемоеИмя);
		КонецЕсли;
	КонецЦикла;
	Если ДобавлениеСтрокТаблицы Тогда
		ПолучательСвойствФормата.Сортировать("Имя");
	Иначе
		ПолучательСвойствФормата.СортироватьПоЗначению();
	КонецЕсли;
КонецПроцедуры

// Заполнение списка правил конвертаций объекта для выбора в правиле обработки данных.
// Параметры:
//  СписокПКО - СписокЗначений - заполняемый список.
//  МассивКонвертаций - Массив - массив, содержащий конвертации
//  ИспользоватьДляОтправки - Булево - признак использования для отправки.
//  ИспользоватьДляПолучения - Булево - признак использования для получения.
//  ИмяОбъектаКонфигурации - строка - имя объекта конфигурации для которого настраивается правило обработки данных.
//  ИмяОбъектаФормата - строка - имя объекта формата для которого настраивается правило обработки данных.
Процедура ЗаполнитьСписокПКО(СписокПКО, МассивКонвертаций, ИспользоватьДляОтправки, ИспользоватьДляПолучения, ИмяОбъектаКонфигурации, ИмяОбъектаФормата) Экспорт
	СписокПКО.Очистить();
	Если НЕ ЗначениеЗаполнено(МассивКонвертаций) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПКО.Код КАК Имя,
	|	СоставКонвертаций.Владелец КАК Конвертация
	|ПОМЕСТИТЬ ТаблицаПКО
	|ИЗ Справочник.ПравилаКонвертацииОбъектов КАК ПКО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК СоставКонвертаций
	|ПО СоставКонвертаций.ЭлементКонвертации = ПКО.Ссылка
	|	И СоставКонвертаций.Владелец В (&МассивКонвертаций)
	|	И СоставКонвертаций.Отключить = ЛОЖЬ
	|ГДЕ
	|	%УсловиеИспользоватьДляОтправки%
	|	И %УсловиеИспользоватьДляПолучения%
	|	И %УсловиеОбъектКонфигурации%
	|	И %УсловиеОбъектФормата%
	|;
	|ВЫБРАТЬ
	|	Имя,
	|	Количество(Конвертация)
	|ИЗ ТаблицаПКО
	|СГРУППИРОВАТЬ ПО Имя
	|ИМЕЮЩИЕ Количество(Конвертация) = &КоличествоЭлементов
	|УПОРЯДОЧИТЬ ПО Имя
	|";
	Запрос.УстановитьПараметр("МассивКонвертаций", МассивКонвертаций);
	Запрос.УстановитьПараметр("КоличествоЭлементов", МассивКонвертаций.Количество());
	Если ИспользоватьДляОтправки <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеИспользоватьДляОтправки%", "ПКО.ИспользоватьДляОтправки = &ИспользоватьДляОтправки");
		Запрос.УстановитьПараметр("ИспользоватьДляОтправки", ИспользоватьДляОтправки);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеИспользоватьДляОтправки%", "Истина");
	КонецЕсли;
	Если ИспользоватьДляПолучения <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеИспользоватьДляПолучения%", "ПКО.ИспользоватьДляПолучения = &ИспользоватьДляПолучения");
		Запрос.УстановитьПараметр("ИспользоватьДляПолучения", ИспользоватьДляПолучения);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеИспользоватьДляПолучения%", "Истина");
	КонецЕсли;
	Если ИмяОбъектаКонфигурации <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОбъектКонфигурации%", "ПКО.ОбъектКонфигурации = &ОбъектКонфигурации");
		Запрос.УстановитьПараметр("ОбъектКонфигурации", ИмяОбъектаКонфигурации);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОбъектКонфигурации%", "Истина");
	КонецЕсли;
	Если ИмяОбъектаФормата <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОбъектФормата%", "ПКО.ОбъектФормата = &ОбъектФормата");
		Запрос.УстановитьПараметр("ОбъектФормата", ИмяОбъектаФормата);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОбъектФормата%", "Истина");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПКО.Добавить(СокрЛП(Выборка.Имя));
	КонецЦикла;
КонецПроцедуры

// Заполнение списка алгоритмов для выбора алгоритма после загрузки всех данных в правиле конвертации объектов.
// Параметры:
//   СписокАлгоритмов - СписокЗначений - заполняемый список.
//   МассивКонвертаций - Массив - Конвертации для которых получается список.
Процедура ЗаполнитьСписокАлгоритмов(СписокАлгоритмов, МассивКонвертаций) Экспорт
	СписокАлгоритмов.Очистить();
	Если НЕ ЗначениеЗаполнено(МассивКонвертаций) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Алгоритмы.Код
	|ИЗ Справочник.Алгоритмы КАК Алгоритмы
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	Справочник.СоставыКонвертаций КАК СоставКонвертаций
	|ПО СоставКонвертаций.ЭлементКонвертации = Алгоритмы.Ссылка
	|	И СоставКонвертаций.Владелец В (&МассивКонвертаций)
	|	И СоставКонвертаций.Отключить = ЛОЖЬ И СоставКонвертаций.ПометкаУдаления = ЛОЖЬ
	|ГДЕ Алгоритмы.ПометкаУдаления = ЛОЖЬ И Алгоритмы.ЭтоФункция = ЛОЖЬ
	|";
	Запрос.УстановитьПараметр("МассивКонвертаций", МассивКонвертаций);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокАлгоритмов.Добавить(СокрЛП(Выборка.Код));
	КонецЦикла;
	
КонецПроцедуры

// Запись настроек пользователя в соответствующий регистр сведений.
// Параметры: 
//   СтруктураНастроек - структура - записываемые настройки.
Процедура ЗаписатьНастройкиПользователя(СтруктураНастроек) Экспорт
	
	НаборЗаписей = регистрыСведений.НастройкиПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, СтруктураНастроек);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получение настроек пользователя из регистра сведений.
// Возвращаемое значение:
//  ЗаписьВыборкиРезультатаЗапроса - запись, содержащая настройки.
Функция НастройкиПользователя() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НастройкиПользователя.ТекущаяКонфигурацияИсточник,
		|	НастройкиПользователя.ТекущаяКонфигурацияПриемник,
		|	НастройкиПользователя.ВРаботе
		|ИЗ
		|	РегистрСведений.НастройкиПользователя КАК НастройкиПользователя");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции
#КонецОбласти
#Область ПроверкаПередЗаписьюПравилИАлгоритмов
// Процедура предотвращает запись правила с измененным идентификатором, если на правило имеются ссылки.
// Параметры:
//  Отказ - Булево - Признак отказа от записи
//  ТекущийОбъект - СправочникОбъект.ПравилаКонвертацииОбъектов - проверяемый объект
//                 Может быть также передано Правило конвертации предопределенных данных
//  ПроверятьПОД - Булево - признак необходимости искать ссылки в правилах обработки данных.
Процедура ПроверитьВозможностьЗаписиПравила(Отказ, ТекущийОбъект, ПроверятьПОД = Истина) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		// Записан новый объект
		Возврат;
	КонецЕсли;
	Если СокрЛП(ТекущийОбъект.Ссылка.Код) = "" Тогда
		// Меняется пустое наименование на заполненное
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ТекущийОбъект.Код) = СокрЛП(ТекущийОбъект.Ссылка.Код) Тогда
		// Идентификатор правила не изменился
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Владелец КАК Конвертация
	|ПОМЕСТИТЬ ТабКонвертации
	|ИЗ Справочник.СоставыКонвертаций
	|ГДЕ ЭлементКонвертации = &Ссылка И ПометкаУдаления = ЛОЖЬ И Отключить = ЛОЖЬ
	|;
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПКС.Ссылка
	|ИЗ Справочник.ПравилаКонвертацииОбъектов.ПравилаКонвертацииСвойств КАК ПКС
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	Справочник.СоставыКонвертаций КАК СоставКонвертации
	|ПО СоставКонвертации.ЭлементКонвертации = ПКС.Ссылка
	|	И СоставКонвертации.Владелец В (ВЫБРАТЬ Конвертация ИЗ ТабКонвертации)
	|	И СоставКонвертации.ПометкаУдаления = ЛОЖЬ И СоставКонвертации.Отключить = ЛОЖЬ
	|ГДЕ ПКС.ПравилоКонвертацииСвойства = &ИдентификаторПравила
	|	И НЕ ПКС.Ссылка.Отключить И НЕ ПКС.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИдентификаторПравила",ТекущийОбъект.Ссылка.Код);
	Запрос.УстановитьПараметр("Ссылка",ТекущийОбъект.Ссылка);
	ЕстьСсылкиИзПКС = Ложь;
	ЕстьСсылкиИзПОД = Ложь;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		ЕстьСсылкиИзПКС = Истина;
	КонецЕсли;
	

	// Поиск ссылок на правило из ПОД
	Если ПроверятьПОД Тогда
		ЗапросПОД = Новый Запрос;
		ЗапросПОД.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросПОД.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПОД.Ссылка
		|ИЗ Справочник.ПравилаОбработкиДанных КАК ПОД
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	Справочник.СоставыКонвертаций КАК СоставКонвертации
		|ПО СоставКонвертации.ЭлементКонвертации = ПОД.Ссылка
		|	И СоставКонвертации.Владелец В (ВЫБРАТЬ Конвертация ИЗ ТабКонвертации)
		|	И СоставКонвертации.ПометкаУдаления = ЛОЖЬ И СоставКонвертации.Отключить = ЛОЖЬ
		|ГДЕ ПОД.ПравилоКонвертацииОбъекта = &ИдентификаторПравила
		|	И НЕ ПОД.Отключить И НЕ ПОД.ПометкаУдаления
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПОДТЧ.Ссылка
		|ИЗ Справочник.ПравилаОбработкиДанных.ПравилаКонвертацииОбъектов КАК ПОДТЧ
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	Справочник.СоставыКонвертаций КАК СоставКонвертации
		|ПО СоставКонвертации.ЭлементКонвертации = ПОДТЧ.Ссылка
		|	И СоставКонвертации.Владелец В (ВЫБРАТЬ Конвертация ИЗ ТабКонвертации)
		|	И СоставКонвертации.ПометкаУдаления = ЛОЖЬ И СоставКонвертации.Отключить = ЛОЖЬ
		|ГДЕ ПОДТЧ.ПравилоКонвертацииОбъекта = &ИдентификаторПравила
		|	И НЕ ПОДТЧ.Ссылка.Отключить И НЕ ПОДТЧ.Ссылка.ПометкаУдаления";
		ЗапросПОД.УстановитьПараметр("ИдентификаторПравила",ТекущийОбъект.Ссылка.Код);
		РезультатыЗапросов = ЗапросПОД.ВыполнитьПакет();
		Если НЕ (РезультатыЗапросов[0].Пустой() И РезультатыЗапросов[1].Пустой()) Тогда
			Отказ = Истина;
			ЕстьСсылкиИзПОД = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Внимание! Был изменен идентификатор правила.'") + Символы.ПС;
		Если ЕстьСсылкиИзПОД И ЕстьСсылкиИзПКС Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'На это правило есть ссылки из правил обработки данных и правил конвертации свойств.'");
		ИначеЕсли ЕстьСсылкиИзПОД Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'На это правило есть ссылки из правил обработки данных.'");
		Иначе
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'На это правило есть ссылки из правил конвертации свойств.'");
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Запись правила невозможна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТекущийОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры

// Процедура предотвращает запись алгоритма с измененным идентификатором, если на алгоритм имеются ссылки.
// Параметры:
//  Отказ - Булево - Признак отказа от записи.
//  ТекущийОбъект - СправочникОбъект.Алгоритмы - проверяемый объект.
Процедура ПроверитьВозможностьЗаписиАлгоритма(Отказ, ТекущийОбъект) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		// Записан новый объект
		Возврат;
	КонецЕсли;
	Если СокрЛП(ТекущийОбъект.Код) = СокрЛП(ТекущийОбъект.Ссылка.Код) Тогда
		// Идентификатор алгоритма не изменился
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Владелец КАК Конвертация
	|ПОМЕСТИТЬ ТабКонвертации
	|ИЗ Справочник.СоставыКонвертаций
	|ГДЕ ЭлементКонвертации = &Ссылка И ПометкаУдаления = ЛОЖЬ И Отключить = ЛОЖЬ
	|;
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПКО.Ссылка
	|ИЗ Справочник.ПравилаКонвертацииОбъектов КАК ПКО
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	Справочник.СоставыКонвертаций КАК СоставКонвертации
	|ПО СоставКонвертации.ЭлементКонвертации = ПКО.Ссылка
	|	И СоставКонвертации.Владелец В (ВЫБРАТЬ Конвертация ИЗ ТабКонвертации)
	|	И СоставКонвертации.ПометкаУдаления = ЛОЖЬ И СоставКонвертации.Отключить = ЛОЖЬ
	|ГДЕ ПКО.АлгоритмПослеЗагрузкиВсехДанных = &ИдентификаторАлгоритма
	|	И НЕ ПКО.Ссылка.Отключить И НЕ ПКО.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИдентификаторАлгоритма",ТекущийОбъект.Ссылка.Код);
	Запрос.УстановитьПараметр("Ссылка",ТекущийОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Внимание! Было изменено имя алгоритма.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'На этот алгоритм есть ссылки из правил конвертации объектов, свойство Алгоритм после загрузки всех данных.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Запись алгоритма невозможна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТекущийОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область РАБОТА_С_СОСТАВОМ_КОНВЕРТАЦИЙ
// Процедура записывает принадлежность элемента (правила, алгоритма) конвертациям, входящим в переданный список.
// Параметры:
//  ЭлементКонвертации - СправочникСсылка.СоставыКонвертаций - обрабатываемый элемент.
//  СписокКонвертаций - СписокЗначений - Список конвертаций, в которые следует включить элемент.
Процедура ЗаписатьЭлементКонвертацииВСоставКонвертации(ЭлементКонвертации, СписокКонвертаций) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
		|ИЗ Справочник.СоставыКонвертаций
		|ГДЕ ЭлементКонвертации = &Ссылка
		|	И Владелец = &Конвертация";
	Для Каждого ЭлементСписка Из СписокКонвертаций Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Конвертация = ЭлементСписка.Значение;
		Запрос.УстановитьПараметр("Ссылка", ЭлементКонвертации);
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		СправочникОбъект = Справочники.СоставыКонвертаций.СоздатьЭлемент();
		СправочникОбъект.Владелец = Конвертация;
		СправочникОбъект.ЭлементКонвертации = ЭлементКонвертации;
		СправочникОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет список конвертаций значениями: в какие конвертации входит переданный элемент конвертации.
// Параметры:
//   ЭлементКонвертации- СправочникСсылка.СоставыКонвертаций - обрабатываемый элемент.
//  СписокКонвертаций - СписокЗначений - Список конвертаций, в которые включен элемент.
Процедура ПолучитьСписокКонвертацийДляЭлементаКонвертации(ЭлементКонвертации, СписокКонвертаций) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|Владелец КАК Конвертация
	|ИЗ Справочник.СоставыКонвертаций
	|ГДЕ ЭлементКонвертации = &Ссылка
	|	И Отключить = ЛОЖЬ";
	Запрос.УстановитьПараметр("Ссылка", ЭлементКонвертации);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокКонвертаций.Очистить();
	Пока Выборка.Следующий() Цикл
		СписокКонвертаций.Добавить(Выборка.Конвертация);
	КонецЦикла;
КонецПроцедуры

// Функция преобразует список конвертаций в  массив конфигураций, для которых конвертации предназначены.
// Параметры:
//  СписокКонвертаций - Массив - список конвертаций. Может также передаваться список значений.
// Возвращаемое значение:
//   Массив - конфигурации для которых предназначены конвертации.
Функция ПолучитьМассивКонфигурацийИзМассиваКонвертаций(СписокКонвертаций) Экспорт
	МассивКонфигураций = Новый Массив;
	Если ТипЗнч(СписокКонвертаций) = Тип("СписокЗначений") Тогда
		МассивКонвертаций = СписокКонвертаций.ВыгрузитьЗначения();
	Иначе
		МассивКонвертаций = СписокКонвертаций;
	КонецЕсли;
	
	Для каждого Конвертация Из МассивКонвертаций Цикл
		Если МассивКонфигураций.Найти(Конвертация.Конфигурация) = Неопределено Тогда
			МассивКонфигураций.Добавить(Конвертация.Конфигурация);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивКонфигураций;
КонецФункции

// Функция проверяет, входит ли элемент конвертации (правило, алгоритм) в указанную конвертацию.
// Параметры:
//   Конвертация - СправочникСсылка.Конвертации - ссылка на конвертацию
//   ЭлементКонвертации - СправочникСсылка.ПравилаКонвертацииОбъектов - проверяемый элемент.
//                         Может быть передана ссылка на алгоритм, правило обработки данных, ПКПД,
// Возвращаемое значение:
//   Булево - признак вхождения в конвертацию.
Функция ЭлементКонвертацииВходитВСоставКонвертации(Конвертация, ЭлементКонвертации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка 
	|ИЗ Справочник.СоставыКонвертаций КАК СоставКонвертации
	|ГДЕ СоставКонвертации.ЭлементКонвертации = &ЭлементКонвертации
	|		И СоставКонвертации.Владелец = &Конвертация
	|";
	Запрос.УстановитьПараметр("ЭлементКонвертации", ЭлементКонвертации);
	Запрос.УстановитьПараметр("Конвертация", Конвертация);

	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

// Процедура выполняет пометку на удаление элемента справочника СоставыКонвертаций синхронно с пометкой на удаление
// соответствующего элемента конвертации.
// Параметры:
//   ЭлементКонвертации - СправочникСсылка.ПравилаКонвертацииОбъектов - проверяемый элемент.
//                         Может быть передана ссылка на алгоритм, правило обработки данных, ПКПД,
//   ПометкаУдаления - Булево - признак пометки удаления.
Процедура ОбработатьПометкуНаУдалениеЭлементаКонвертации(ЭлементКонвертации, ПометкаУдаления) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|Ссылка
	|ИЗ Справочник.СоставыКонвертаций
	|ГДЕ ЭлементКонвертации = &Ссылка
	|	И ПометкаУдаления <> &ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", ЭлементКонвертации);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоставКонвертацииОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СоставКонвертацииОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
#КонецОбласти
#Область СлужебныеПроцедурыИФункции
// Функция готовит текст запроса для получения списка свойств формата для последующего вывода в формах.
// Параметры:
//  ОтборПоКонвертациям - Булево - признак отбора по массиву конвертаций.
//  ОтборПоВерсииФормата - Булево - Признак отбора по версии формата.
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ПолучитьТекстЗапросаСписокСвойствФормата(НесколькоВерсийФормата)
	ТекстОтбор = "";
	Если НесколькоВерсийФормата Тогда
		ТекстОтбор = "СвойстваФормата.Владелец.Владелец В (&ВерсияФормата)";
	Иначе
		ТекстОтбор = "СвойстваФормата.Владелец.Владелец = &ВерсияФормата";
	КонецЕсли;
	ТекстЗапроса = "ВЫБРАТЬ
		|	Ссылка
		|ПОМЕСТИТЬ ТабЧасти
		|ИЗ 
		|	Справочник.СвойстваФормата КАК СвойстваФормата
		|ГДЕ
		|	СвойстваФормата.Владелец.Наименование = &ОбъектФорматаИмя
		|	И СвойстваФормата.ПометкаУдаления = ЛОЖЬ
		|	И СвойстваФормата.ЭтоГруппа = ИСТИНА
		|	И (ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть)
		|		ИЛИ СвойстваФормата.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ПустаяСсылка))
		|	И #ТекстОтбор#
		|;
		|ВЫБРАТЬ
		|	Ссылка.Наименование					КАК Имя,
		|	ВЫРАЗИТЬ(Ссылка.Тип КАК Строка(1000))	КАК Тип,
		|	Ссылка.Родитель.Наименование 		КАК ИмяРодитель,
		|	ВЫБОР КОГДА Ссылка В ИЕРАРХИИ (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ ЛОЖЬ КОНЕЦ 					КАК ЭтоРеквизитТЧ,
		|	ВЫБОР КОГДА Ссылка В ИЕРАРХИИ (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|		ВЫБОР КОГДА Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Наименование
		|		КОГДА Родитель.Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Родитель.Наименование
		|		КОГДА Родитель.Родитель.Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Родитель.Родитель.Наименование
		|		КОГДА Родитель.Родитель.Родитель.Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Родитель.Родитель.Родитель.Наименование
		|		КОГДА Родитель.Родитель.Родитель.Родитель.Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Родитель.Родитель.Родитель.Родитель.Наименование
		|		КОНЕЦ
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ 								КАК ИмяТЧ,
		|	Ссылка.Наименование					КАК ОтображаемоеИмя,
		|	1 									КАК Количество,
		|	ЛОЖЬ 								КАК ВыводитьПолноеИмяСвойства
		|ПОМЕСТИТЬ ТабСвойства
		|ИЗ
		|	Справочник.СвойстваФормата КАК СвойстваФормата
		|ГДЕ
		|	СвойстваФормата.Владелец.Наименование = &ОбъектФорматаИмя
		|	И СвойстваФормата.ПометкаУдаления = ЛОЖЬ
		|	И (СвойстваФормата.ЭтоГруппа = ЛОЖЬ ИЛИ Ссылка.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ГруппаОбщихСвойств))
		|	И #ТекстОтбор#
		|;
		|ВЫБРАТЬ
		|	Имя,
		|	ИмяРодитель,
		|	Максимум(Тип) КАК Тип,
		|	ЭтоРеквизитТЧ,
		|	ИмяТЧ,
		|	ОтображаемоеИмя,
		|	Количество,
		|	ВыводитьПолноеИмяСвойства
		|ИЗ ТабСвойства
		|СГРУППИРОВАТЬ ПО
		|	Имя,
		|	ИмяРодитель,
		|	ЭтоРеквизитТЧ,
		|	ИмяТЧ,
		|	ОтображаемоеИмя,
		|	Количество,
		|	ВыводитьПолноеИмяСвойства
		|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбор#", ТекстОтбор);
	Возврат ТекстЗапроса;
КонецФункции

Процедура ОбработатьСвойствоРодитель(РодительСсылка, ИмяТЧ, НаименованиеСвойства)
	Если НЕ ЗначениеЗаполнено(РодительСсылка) Тогда
		Возврат;
	КонецЕсли;
	РеквизитыРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РодительСсылка,"Наименование, ТипОбщегоСвойства, Родитель");
	Если НЕ ЗначениеЗаполнено(РеквизитыРодителя.ТипОбщегоСвойства)
		Или РеквизитыРодителя.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть Тогда
		ИмяТЧ = СокрЛП(РеквизитыРодителя.Наименование);
		НаименованиеСвойства = ИмяТЧ + "." + НаименованиеСвойства;
	ИначеЕсли РеквизитыРодителя.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ГруппаОбщихСвойств Тогда
		НаименованиеСвойства = СокрЛП(РеквизитыРодителя.Наименование) + "." + СокрЛП(НаименованиеСвойства);
	КонецЕсли;
	ОбработатьСвойствоРодитель(РеквизитыРодителя.Родитель, ИмяТЧ, НаименованиеСвойства)
КонецПроцедуры

Функция ПолучитьТекстЗапросаРазузлованиеИменСвойствФормата(НесколькоВерсийФормата)
	ТекстЗапроса = "ВЫБРАТЬ
		|	Ссылка.Наименование					КАК Имя,
		|	ВЫРАЗИТЬ(Ссылка.Тип КАК Строка(1000))	КАК Тип,
		|	ВЫБОР КОГДА Ссылка В ИЕРАРХИИ (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|		ВЫБОР КОГДА Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Наименование
		|		КОГДА Родитель.Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Родитель.Наименование
		|		КОГДА Родитель.Родитель.Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Родитель.Родитель.Наименование
		|		КОГДА Родитель.Родитель.Родитель.Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Родитель.Родитель.Родитель.Наименование
		|		КОГДА Родитель.Родитель.Родитель.Родитель.Родитель В (ВЫБРАТЬ Ссылка ИЗ ТабЧасти) ТОГДА
		|			Родитель.Родитель.Родитель.Родитель.Родитель.Наименование
		|		КОНЕЦ
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ 								КАК ИмяТЧ,
		|	Родитель.Ссылка 					КАК Родитель
		|ИЗ
		|	Справочник.СвойстваФормата КАК СвойстваФормата
		|ГДЕ
		|	СвойстваФормата.Владелец.Наименование = &ОбъектФорматаИмя
		|	И СвойстваФормата.ПометкаУдаления = ЛОЖЬ
		|	И (СвойстваФормата.ЭтоГруппа = ЛОЖЬ ИЛИ Ссылка.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ГруппаОбщихСвойств))
		|	И СвойстваФормата.Наименование = &ИмяСвойства
		|	И (СвойстваФормата.Ссылка В ИЕРАРХИИ (ВЫБРАТЬ Ссылка ИЗ ТабЧасти)
		|		ИЛИ НЕ &ЭтоРеквизитТЧ)
		|	И ";
	Если НесколькоВерсийФормата Тогда
		ТекстЗапроса = ТекстЗапроса + "СвойстваФормата.Владелец.Владелец В (&ВерсияФормата)";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "СвойстваФормата.Владелец.Владелец = &ВерсияФормата";
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция ВерсиюВЧисло(ВерсияСтрокой)
	Если ПустаяСтрока(ВерсияСтрокой) Или ВерсияСтрокой = "0.0.0.0" Тогда
		Возврат 0;
	КонецЕсли;
	Разряд = 0;
	ВерсияЧислом = 0;
	Остаток = ВерсияСтрокой;
	ПозицияТочки = Найти(Остаток, ".");
	Пока ПозицияТочки > 0 Цикл
		ЧислоСтрокой = Лев(Остаток, ПозицияТочки - 1);
		ВерсияЧислом = ВерсияЧислом * 1000 + Число(ЧислоСтрокой);
		Остаток = Сред(Остаток, ПозицияТочки + 1);
		ПозицияТочки = Найти(Остаток, ".");
		Разряд = Разряд + 1;
	КонецЦикла;
	ЧислоСтрокой = Остаток;
	// может быть beta
	Попытка
		ЧислоЧислом = Число(ЧислоСтрокой);
	Исключение
		ЧислоЧислом = 0;
	КонецПопытки;
	
	ВерсияЧислом = ВерсияЧислом * 1000 + ЧислоЧислом;
	Разряд = Разряд + 1;
	// Номера версии после 4 точки возвращает после запятой.
	// Например, для версии "1.2.3.4.5.6.7" вернет 1002003004,005006007.
	Если Разряд > 4 Тогда
		ВерсияЧислом = ВерсияЧислом / Pow(1000, Разряд - 4);
	КонецЕсли;
	Возврат ВерсияЧислом;
КонецФункции
#КонецОбласти