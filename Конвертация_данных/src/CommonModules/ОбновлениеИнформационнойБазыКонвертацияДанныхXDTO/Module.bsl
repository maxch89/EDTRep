////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы КонвертацияДанныхXDTOВызовСервера.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "КонвертацияДанных";
	Описание.Версия = "3.0.5.3";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Последовательно";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКонвертацияДанныхXDTO.ОбработатьИнформациюОТипах";
	Обработчик.Комментарий = НСтр("ru = 'Обработка информации о типах в справочниках СвойстваФормата и ТипыФормата.'");
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКонвертацияДанныхXDTO.ЗаполнитьНастройкуИспользоватьПроектированиеФормата";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новой константы ИспользоватьПроектированиеФормата.'");
	Обработчик.РежимВыполнения = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКонвертацияДанныхXDTO.ЗаполнитьВерсиюФорматаМенеджераВКонвертациях";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение нового реквизита ВерсияФорматаМенеджера в справочнике Конвертации'");
	Обработчик.РежимВыполнения = "Оперативно";

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры 

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьИнформациюОТипах() Экспорт
	// Справочник Свойства формата.
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 10000
	|	СвойстваФормата.Ссылка,
	|	ВЫРАЗИТЬ(СвойстваФормата.Тип КАК Строка(1000)) КАК СвойствоТип
	|ИЗ Справочник.СвойстваФормата КАК СвойстваФормата
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвойстваФормата.Состав КАК СоставФормата
	|ПО СвойстваФормата.Ссылка = СоставФормата.Ссылка
	|ГДЕ НЕ СвойстваФормата.ПометкаУдаления И СоставФормата.Ссылка IS NULL
	|	И НЕ СвойстваФормата.ЭтоГруппа";
	Пока Истина Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СвойствоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если Найти(Выборка.СвойствоТип, ";") > 0 Тогда
				МассивТипов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойствоОбъект.Тип,";");
				Для Каждого ТекТип Из МассивТипов Цикл
					НовСтр = СвойствоОбъект.Состав.Добавить();
					НовСтр.ТипФормата = СокрЛП(ТекТип);
				КонецЦикла;
				СвойствоОбъект.СоставнойТип = Истина;
			Иначе
				НовСтр = СвойствоОбъект.Состав.Добавить();
				НовСтр.ТипФормата = СокрЛП(Выборка.СвойствоТип);
			КонецЕсли;
			// Целенаправленно обрезаем тип до 1000 знаков.
			СвойствоОбъект.Тип = Выборка.СвойствоТип;
			СвойствоОбъект.Записать();
		КонецЦикла;
	КонецЦикла;
	// Справочник Типы формата.
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 10000
	|	ТипыФормата.Ссылка,
	|	ТипыФормата.БазовыйТип КАК БазовыйТип
	|ИЗ Справочник.ТипыФормата КАК ТипыФормата
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыФормата.Состав КАК СоставФормата
	|ПО ТипыФормата.Ссылка = СоставФормата.Ссылка
	|ГДЕ НЕ ТипыФормата.ПометкаУдаления 
	|	И СоставФормата.Ссылка IS NULL И ТипыФормата.БазовыйТип <>""""";
	Пока Истина Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.БазовыйТип) Тогда
				Продолжить;
			КонецЕсли;
			ТипОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НовСтр = ТипОбъект.Состав.Добавить();
			НовСтр.ТипФормата = СокрЛП(Выборка.БазовыйТип);
			ТипОбъект.Записать();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьНастройкуИспользоватьПроектированиеФормата() Экспорт
	Если Константы.ИспользоватьПроектированиеФормата.Получить() Тогда
		Возврат;
	КонецЕсли;
	СпрВыборка = Справочники.Описания.Выбрать();
	Пока СпрВыборка.Следующий() Цикл
		Если СпрВыборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Константы.ИспользоватьПроектированиеФормата.Установить(Истина);
		Прервать;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьВерсиюФорматаМенеджераВКонвертациях() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка
	|ИЗ Справочник.Конвертации
	|ГДЕ ВерсияФорматаМенеджера = """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КонвертацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонвертацияОбъект.ВерсияФорматаМенеджера = "1";
		КонвертацияОбъект.Записать();
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

