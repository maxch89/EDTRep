#Область ПрограммныйИнтерфейс
// Заполнение списка выбора элемента формы значениями из переданного списка значений.
// Параметры:
//   ЭлементФормы - ЭлементФормы - элемент формы для которой заполняется список.
//   СписокЗначенийДляВыбора - СписокЗначений - Список значений из которого заполняется список выбора.
//                             Может передаваться также таблица значений.
//   ЭтоТаблицаЗначений - Булево - Признак передачи таблицы значений во 2-м параметре.
Процедура ЗаполнитьСписокВыбораЭлементаФормы(ЭлементФормы, СписокЗначенийДляВыбора, ЭтоТаблицаЗначений = Ложь) Экспорт
	ЭлементФормы.СписокВыбора.Очистить();
	Если ЭтоТаблицаЗначений Тогда
		// Особый случай для ПКС в форме записи.
		Для Каждого СтрокаТаблицы Из СписокЗначенийДляВыбора Цикл
			ЭлементФормы.СписокВыбора.Добавить(СтрокаТаблицы.Имя);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСпискаЗначений Из СписокЗначенийДляВыбора Цикл
		ЭлементФормы.СписокВыбора.Добавить(СтрокаСпискаЗначений.Значение);
	КонецЦикла;
КонецПроцедуры

// Добавление в список выбора элемента формы переданным значением.
// Параметры:
//   ЭлементФормы - ЭлементФормы - элемент формы для которой заполняется список.
//   ТекущееЗначение - Строка - Значение добавляемое в список.
Процедура ДобавитьТекущееЗначениеВСписокВыбораЭлементаФормы(ЭлементФормы, ТекущееЗначение) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекущееЗначение) Тогда
		Возврат;
	КонецЕсли;
	ЭлементФормы.СписокВыбора.Добавить(ТекущееЗначение);

КонецПроцедуры

// Преобразует составляющие простого типа в строку с представлением.
// Параметры:
//   Тип - Строка - Строковое представление типа.
//   Длина - Строка - Длина типа.
//   Точность - Строка - Точность типа.
//   МинимальнаяДлинаСтроки - Строка - Минимальная длина строки.
// Возвращаемое значение:
//   Строка - расширенное представление типа.
Функция СоставляющиеПростогоТипаВСтроку(Тип, Длина, Точность, МинимальнаяДлинаСтроки) Экспорт
	Префикс = "";
	Размер = "";
	Если Тип = "Строка" Тогда
		Префикс = "string";
		Если Длина > 0 И МинимальнаяДлинаСтроки > 0 Тогда
			Размер = "("+СокрЛП(МинимальнаяДлинаСтроки)+","+СокрЛП(Длина)+")";
		ИначеЕсли Длина > 0 Тогда
			Размер = "("+СокрЛП(Длина)+")";
		КонецЕсли;
	ИначеЕсли Тип = "Дата" Тогда
		Префикс = "date";
	ИначеЕсли Тип = "Булево" Тогда
		Префикс = "boolean";
	ИначеЕсли  Тип = "Число" Тогда
		Если Точность = 0 Тогда
			Префикс = "int";
			Размер = ?(Длина > 0,"("+СокрЛП(Длина)+")","");
		Иначе
			Префикс = "decimal";
			Размер = ?(Длина > 0,"("+СокрЛП(Длина)+","+СокрЛП(Точность)+")","");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Префикс + ?(ЗначениеЗаполнено(Размер)," " + Размер,"");
КонецФункции

// Проверяет соответствие конвертации, указанной в тексте модуля, и конвертации в которую будет выполнена загрузка.
// Параметры:
//   ТХДок - ТекстовыйДокумент - текст модуля.
//   Конвертация - СправочникСсылка.Конвертации - Конвертация в которую загружается алгоритм.
//   НаименованиеКонвертации - Строка - Наименование конвертации в которую загружается алгоритм.
//   ИдентификаторФормы - Строка - Идентификатор формы, из которой вызвана процедура.
Процедура ПроверитьКонвертациюПриЗагрузкеАлгоритмов(ТХДок, Конвертация, НаименованиеКонвертации, ИдентификаторФормы) Экспорт
	СтруктураПараметров = Новый Структура("Отказ, ИдентификаторФормы", Истина, ИдентификаторФормы);
	Если НЕ ЗначениеЗаполнено(Конвертация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось определить конвертацию для загрузки обработчиков'"));
		Оповестить("ЗагрузкаАлгоритмов", СтруктураПараметров);
	КонецЕсли;
	Отказ = Ложь;
	// Проверка соответствия конвертации и первой строки модуля.
	СтрКоммент = СокрЛП(СтрПолучитьСтроку(ТХДок, 1));
	Если Лев(СтрКоммент,15) = "// Конвертация " Тогда
		ПозицияКонецИмени = Найти(СтрКоммент, " от ");
		Если ПозицияКонецИмени > 0 Тогда
			ИмяКонвертации = Сред(СтрКоммент,16, ПозицияКонецИмени - 16);
		Иначе
			ИмяКонвертации = Прав(СтрКоммент,СтрДлина(СтрКоммент) - 15);
		КонецЕсли;
		
		Если ИмяКонвертации <> НаименованиеКонвертации Тогда
			ТекстСообщения = НСтр("ru='Обработчики предназначены для другой конвертации'") + ": " + ИмяКонвертации + ". " + НСтр("ru='Продолжить загрузку?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОтветНаВопросЗагрузкаОбработчиков", ЭтотОбъект, ИдентификаторФормы),
				ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		СтруктураПараметров.Отказ = Ложь;
		Оповестить("ЗагрузкаАлгоритмов", СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

// Обработчик оповещения, используется при отображении пользователю вопроса о продолжении загрузки алгоритмов.
// Параметры:
//   РезультатВопроса - СистемноеПеречисление.КодВозвратаДиалога - Результат ответа.
//   ИдентификаторФормы - Строка - Идентификатор формы, из которой вызвана процедура.
Процедура ОтветНаВопросЗагрузкаОбработчиков(РезультатВопроса, ИдентификаторФормы) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Отказ, ИдентификаторФормы", Отказ, ИдентификаторФормы);
	Оповестить("ЗагрузкаАлгоритмов", СтруктураПараметров);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура реализует возможность копирования текстов, сформированных автоматически.
// Текст выводится либо в буфер, либо в текстовый документ.
// Параметры:
//   ТХ - ТекстовыйДокумент - выводимый текст.
Процедура ВывестиТекстДляИспользования(ТХ) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		КОбъект = Новый COMОбъект("htmlfile");
		КОбъект.ParentWindow.ClipboardData.Setdata("Text", ТХ.ПолучитьТекст());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Модуль скопирован в буфер обмена'"));
	Иначе
		ТХ.Показать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти