
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИспользоватьПроектированиеФормата = ПолучитьФункциональнуюОпцию("ИспользоватьПроектированиеФормата");
	Если НЕ ИспользоватьПроектированиеФормата Тогда
		Объект.ПоказыватьТребования = Ложь;
		Объект.ПоказыватьРасхожденияСПроектнымиРешениями = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.РезультатСравнения;
	ИзменитьДоступностьЭлементовФормы(Истина);
	УстановитьВидимость();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДерево(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияФормата1)
		Или НЕ ЗначениеЗаполнено(Объект.ВерсияФормата2) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для сравнения необходимо указать две сравниваемые версии формата.'"));
		Возврат;
	ИначеЕсли Объект.ВерсияФормата1 = Объект.ВерсияФормата2 
		Или (Объект.ВерсияФормата3 = Объект.ВерсияФормата1) 
		Или (Объект.ВерсияФормата3 = Объект.ВерсияФормата2)
		Или (Объект.ВерсияФормата4 = Объект.ВерсияФормата1) 
		Или (Объект.ВерсияФормата4 = Объект.ВерсияФормата2)
		Или (ЗначениеЗаполнено(Объект.ВерсияФормата3) И ЗначениеЗаполнено(Объект.ВерсияФормата4)
			И Объект.ВерсияФормата3 = Объект.ВерсияФормата4) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для сравнения необходимо указать разные версии формата.'"));
		Возврат;
	КонецЕсли;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Ожидание;
	ИзменитьДоступностьЭлементовФормы(Ложь);
	ПодключитьОбработчикОжидания("ЗапускОбработки", 5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТребованияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФорматаПриАктивизацииСтроки(Элемент)
	Если Объект.ПоказыватьТребования Тогда
		ДанныеТекСтроки = Элементы.ДеревоФормата.ТекущиеДанные;
		Если ДанныеТекСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СводнаяСтрокаТребований = "" + ДанныеТекСтроки.Требование1 + ДанныеТекСтроки.Требование2 
								+ ДанныеТекСтроки.Требование3 + ДанныеТекСтроки.Требование4;
		Если Не ЗначениеЗаполнено(СводнаяСтрокаТребований) Тогда
			ТекстТребование = "";
			ТекстТребованиеФормат = "";
			СводноеТребованиеТекущейСтроки = "";
			Возврат;
		ИначеЕсли СводноеТребованиеТекущейСтроки = СводнаяСтрокаТребований Тогда
			Возврат;
		КонецЕсли;
		СводноеТребованиеТекущейСтроки = СводнаяСтрокаТребований;
		ПодключитьОбработчикОжидания("ОбновитьИнформациюОТребованиях",1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоИзмененияПриИзменении(Элемент)
	Если АдресХранилищаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПерерисоватьДеревоНаФормеСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРасхожденияСПроектнымиРешениямиПриИзменении(Элемент)
	Если АдресХранилищаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПерерисоватьДеревоНаФормеСервер();
КонецПроцедуры

&НаКлиенте
Процедура ТекстТребованиеФорматОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "Еще" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеТекСтроки = Элементы.ДеревоФормата.ТекущиеДанные;
		Если ДанныеТекСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// Список выбора из требований
		СводнаяСтрокаТребований = "" + ДанныеТекСтроки.Требование1 + ДанныеТекСтроки.Требование2 
								+ ДанныеТекСтроки.Требование3 + ДанныеТекСтроки.Требование4;
		Если Не ЗначениеЗаполнено(СводнаяСтрокаТребований) Тогда
			Возврат;
		КонецЕсли;

		МассивТребований = ПреобразоватьСтрокуТребованийВМассивСсылок(СводнаяСтрокаТребований);
		Если МассивТребований.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ЗначениеОтбора = Новый Структура("Ссылка", МассивТребований);
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.Требования.ФормаСписка",ПараметрыВыбора,ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОСравнении(Команда)
	ОтчетОСравненииНаСервере();
	Если АдресХранилищаРезультатаОтчет = "" Тогда
		Возврат;
	КонецЕсли;
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.Фильтр = "(*.html)|*.html";
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		ПутьКФайлуВыгрузки = ДиалогСохраненияФайла.ПолноеИмяФайла;
		ПолучитьФайл(АдресХранилищаРезультатаОтчет, ПутьКФайлуВыгрузки, Ложь);
		ФайлДляОткрытия = Новый Файл(ДиалогСохраненияФайла.ПолноеИмяФайла);
		Если ФайлДляОткрытия.Существует() Тогда
			ЗапуститьПриложение(ДиалогСохраненияФайла.ПолноеИмяФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#Область ОбработчикиОжидания

&НаКлиенте
Процедура ЗапускОбработки()
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
	ОбработатьВерсииФормата();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСравненияВерсийФормата()
	ПерерисоватьДеревоНаФормеСервер();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.РезультатСравнения;
	ИзменитьДоступностьЭлементовФормы(Истина);
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	Если НЕ ДлительнаяОперация Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.РезультатСравнения;
		УстановитьВидимость();
		ИзменитьДоступностьЭлементовФормы(Истина);
		Возврат;
	КонецЕсли;
	Если ДлительнаяОперацияВыполнена() Тогда
		ДлительнаяОперация = Ложь;
		ПодключитьОбработчикОжидания("ОкончаниеСравненияВерсийФормата", 1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОТребованиях()
	ТекстТребование = "";
	ТекстТребованиеФормат = "";
	
	МаксимумТребованийВСтроке = 2;
	МассивТребований = ПреобразоватьСтрокуТребованийВМассивСсылок(СводноеТребованиеТекущейСтроки, МаксимумТребованийВСтроке);
	ДобавитьЕще = (МассивТребований.Количество() > МаксимумТребованийВСтроке);
	Для Инд = 1 По Мин(МаксимумТребованийВСтроке, МассивТребований.Количество()) Цикл
		ТекСсылка = МассивТребований[Инд-1];
		ТекстТребование = ТекстТребование + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<a href = %1 >%2</a>; ",
						ПолучитьНавигационнуюСсылку(ТекСсылка), СокрЛП(ТекСсылка));
	КонецЦикла;
	Если ДобавитьЕще Тогда
		ТекстТребование = ТекстТребование + "<a href = Еще >Еще ...</a>; ";
	КонецЕсли;
	ТекстТребованиеФормат = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстТребование);
КонецПроцедуры

#КонецОбласти
#Область ЗаполнениеДерева
&НаСервере
Процедура ОбработатьВерсииФормата()
	ИдентификаторЗадания = Неопределено;
	ДлительнаяОперация = Ложь;
	АдресХранилищаРезультата = Неопределено;
	СтруктураПараметров = Новый Структура("ВерсияФормата1, ВерсияФормата2, ВерсияФормата3",
						Объект.ВерсияФормата1, Объект.ВерсияФормата2, Объект.ВерсияФормата3);
	СтруктураПараметров.Вставить("ВерсияФормата4", Объект.ВерсияФормата4);
	Попытка
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.СравнениеВерсийФормата.ПолучитьРезультатСравненияВерсийФормата",
			СтруктураПараметров,
			НСтр("ru = 'Сравнение версий формата'"));
		АдресХранилищаРезультата = Результат.АдресХранилища;
		Если Результат.ЗаданиеВыполнено Тогда
			ПерерисоватьДеревоНаФормеСервер();
		Иначе
			ДлительнаяОперация = Истина;
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При сравнении версий формата произошла ошибка'") + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияВыполнена()
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции
#КонецОбласти

#Область ВнешнийВидФормы
Процедура УстановитьВидимость()
	Элементы.ДеревоФормата.Видимость = Истина;
	Элементы.ДеревоФорматаВерсия2.Видимость = ЗначениеЗаполнено(Объект.ВерсияФормата2);
	Элементы.ДеревоФорматаВерсия3.Видимость = ЗначениеЗаполнено(Объект.ВерсияФормата3);
	Элементы.ДеревоФорматаВерсия4.Видимость = ЗначениеЗаполнено(Объект.ВерсияФормата4);
	Элементы.ПоказыватьТребования.Видимость = ИспользоватьПроектированиеФормата;
	Элементы.ПоказыватьРасхожденияСПроектнымиРешениями.Видимость = ИспользоватьПроектированиеФормата;
	Элементы.ДанныеТребования.Видимость = ИспользоватьПроектированиеФормата И Объект.ПоказыватьТребования;
	Элементы.ФормаОтчетОСравнении.Видимость = ИспользоватьПроектированиеФормата;
КонецПроцедуры

&НаСервере
Процедура СкопироватьДерево(Получатель, Источник)
	Для Каждого СтрокаИсточник Из Источник Цикл
		СтрокаПолучатель = Получатель.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПолучатель, СтрокаИсточник);
		УровеньНижеИсточник = СтрокаИсточник.Строки;
		УровеньНижеПолучатель = СтрокаПолучатель.ПолучитьЭлементы();
		СкопироватьДерево(УровеньНижеПолучатель, УровеньНижеИсточник);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПерерисоватьДеревоНаФормеСервер()
	Уровень0_Исх = ПолучитьИзВременногоХранилища(АдресХранилищаРезультата).Строки;
	Уровень0_Нов = ДеревоФормата.ПолучитьЭлементы();
	Уровень0_Нов.Очистить();
	СкопироватьДерево(Уровень0_Нов, Уровень0_Исх);
	Если Объект.ПоказыватьТолькоИзменения
		ИЛИ Объект.ПоказыватьРасхожденияСПроектнымиРешениями Тогда
		Если Объект.ПоказыватьТолькоИзменения Тогда
			// Первым накладывается фильтр по измененным объектам
			ПоказатьТолькоИзменения(ДеревоФормата.ПолучитьЭлементы());
		КонецЕсли;
		Если Объект.ПоказыватьРасхожденияСПроектнымиРешениями Тогда
			ПоказатьРасхождения(ДеревоФормата.ПолучитьЭлементы());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПреобразоватьСтрокуТребованийВМассивСсылок(СводнаяСтрокаТребований, ОграничениеКоличества = 0)
	МассивТребований = Новый Массив;
	МассивСсылок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СводнаяСтрокаТребований,";",Ложь);
	Для Каждого СсылкаСтрокой Из МассивСсылок Цикл
		Если НЕ ЗначениеЗаполнено(СсылкаСтрокой) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ТекСсылка = Справочники.Требования.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаСтрокой));
		Исключение
			Продолжить;
		КонецПопытки;
		Если МассивТребований.Найти(ТекСсылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивТребований.Добавить(ТекСсылка);
		Если ОграничениеКоличества > 0 И МассивТребований.Количество() > ОграничениеКоличества Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивТребований;
КонецФункции

&НаСервере
Процедура ПоказатьТолькоИзменения(Строки)
	СтрокиКУдалению = Новый Массив;
	Для Каждого ТекСтрока Из Строки Цикл
		// Для отбора "Только измененные".
		Если Объект.ПоказыватьТолькоИзменения Тогда
			// Заполняем массив строк к удалению, если сравнение не показало изменений.
			Если (ТекСтрока.РезультатСравнения1 = "0" Или Не ЗначениеЗаполнено(ТекСтрока.РезультатСравнения1))
				И (ТекСтрока.РезультатСравнения2 = "0" Или Не ЗначениеЗаполнено(ТекСтрока.РезультатСравнения2))
				И (ТекСтрока.РезультатСравнения3 = "0" Или Не ЗначениеЗаполнено(ТекСтрока.РезультатСравнения3))
				И (ТекСтрока.РезультатСравнения4 = "0" Или Не ЗначениеЗаполнено(ТекСтрока.РезультатСравнения4)) Тогда
				СтрокиКУдалению.Добавить(Строки.Индекс(ТекСтрока));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ПоказатьТолькоИзменения(ТекСтрока.ПолучитьЭлементы());
	КонецЦикла;
	УдалитьСтрокиДерева(Строки, СтрокиКУдалению);
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиДерева(Строки, СтрокиКУдалению)
	КоличествоУдаленных = 0;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Строки.Удалить(СтрокаКУдалению - КоличествоУдаленных);
		КоличествоУдаленных = КоличествоУдаленных + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПоказатьРасхождения(Строки)
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого ТекСтрока Из Строки Цикл
		КоличествоПодчиненных = ТекСтрока.ПолучитьЭлементы().Количество();
		БылиПодчиненные = Ложь;
		Если КоличествоПодчиненных > 0 Тогда
			БылиПодчиненные = Истина;
			// Сначала обрабатываем все подчиненные ветки
			ПоказатьРасхождения(ТекСтрока.ПолучитьЭлементы());
			КоличествоПодчиненных = ТекСтрока.ПолучитьЭлементы().Количество();
		КонецЕсли;
		ИзмененияНаУровнеОбъекта = ТекСтрока.РезультатСравнения1 = "+" Или ТекСтрока.РезультатСравнения1 = "-"
			Или ТекСтрока.РезультатСравнения2 = "+" Или ТекСтрока.РезультатСравнения2 = "-"
			Или ТекСтрока.РезультатСравнения3 = "+" Или ТекСтрока.РезультатСравнения3 = "-"
			Или ТекСтрока.РезультатСравнения4 = "+" Или ТекСтрока.РезультатСравнения4 = "-";
		ЗаполненоТребование = (ТекСтрока.ЗарегистрированоТребование1
				Или ТекСтрока.ЗарегистрированоТребование2
				Или ТекСтрока.ЗарегистрированоТребование3
				Или ТекСтрока.ЗарегистрированоТребование4);
		ЕстьИзменения = (ЗначениеЗаполнено(ТекСтрока.РезультатСравнения1)
				И ТекСтрока.РезультатСравнения1 <> "0")
			Или (ЗначениеЗаполнено(ТекСтрока.РезультатСравнения2)
				И ТекСтрока.РезультатСравнения2 <> "0")
			Или (ЗначениеЗаполнено(ТекСтрока.РезультатСравнения3)
				И ТекСтрока.РезультатСравнения3 <> "0")
			Или (ЗначениеЗаполнено(ТекСтрока.РезультатСравнения4)
				И ТекСтрока.РезультатСравнения4 <> "0");
		Если КоличествоПодчиненных = 0 Тогда
			УдалитьСтроку = (ЗаполненоТребование = ЕстьИзменения) ИЛИ БылиПодчиненные;
		Иначе
			// Если изменение на уровне объекта (добавлен-удален), 
			// для подчиненных объектов требования могут не указываться если они указаны для объекта в целом.
			// В противном случае строку удалять нельзя.
			УдалитьСтроку = ЗаполненоТребование И ИзмененияНаУровнеОбъекта;
		КонецЕсли;
			
		Если УдалитьСтроку Тогда
			СтрокиКУдалению.Добавить(Строки.Индекс(ТекСтрока));
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	УдалитьСтрокиДерева(Строки, СтрокиКУдалению);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьЭлементовФормы(ФлагДоступность)
	Элементы.ФормаОтчетОСравнении.Доступность = ФлагДоступность;
	Элементы.ФормаОбновитьДерево.Доступность = ФлагДоступность;
	Элементы.ФлажкиГоризонт.Доступность = ФлагДоступность;
	Элементы.ВерсииФорматаСравнить.Доступность = ФлагДоступность;
КонецПроцедуры

#КонецОбласти
#Область ОтчетОСравнении
&НаСервере
Процедура ОтчетОСравненииНаСервере()
	РезультатСравненияФормата = ПолучитьИзВременногоХранилища(АдресХранилищаРезультата);
	Если РезультатСравненияФормата.Строки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сначала необходимо запустить сравнение версий.'"));
		Возврат;
	КонецЕсли;
	АдресХранилищаРезультатаОтчет = "";

	Обработки.СравнениеВерсийФормата.СформироватьОтчетОСравнении(РезультатСравненияФормата, АдресХранилищаРезультатаОтчет, Объект.ВерсияФормата1, Объект.ВерсияФормата2);
КонецПроцедуры

#КонецОбласти
#КонецОбласти

