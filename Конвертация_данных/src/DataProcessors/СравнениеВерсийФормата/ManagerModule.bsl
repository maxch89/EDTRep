#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс
// Процедура формирует дерево значений как результат сравнения версий формата.
// Параметры:
//  СтруктураПараметров - Структура - Параметры, необходимые для построения дерева
//  АдресВременногоХранилища - Строка - Адрес, куда будет помещен результат выполнения процедуры.
// 
Процедура ПолучитьРезультатСравненияВерсийФормата(СтруктураПараметров, АдресВременногоХранилища) Экспорт
	ИнициализацияПеременных(СтруктураПараметров);
	
	Уровень0 = СтруктураПараметров.РезультатСравненияВерсийФормата.Строки;
	Уровень0.Очистить();
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ВерсияФормата1) Тогда
		Возврат;
	КонецЕсли;

	// Заполнение дерева.
	ОбновитьДеревоФормата(СтруктураПараметров.ВерсияФормата1, СтруктураПараметров);
	Если ЗначениеЗаполнено(СтруктураПараметров.ВерсияФормата2) Тогда
		СтруктураПараметров.ПостфиксКолонок = "2";
		ОбновитьДеревоФормата(СтруктураПараметров.ВерсияФормата2, СтруктураПараметров);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметров.ВерсияФормата3) Тогда
		СтруктураПараметров.ПостфиксКолонок = "3";
		ОбновитьДеревоФормата(СтруктураПараметров.ВерсияФормата3, СтруктураПараметров);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметров.ВерсияФормата4) Тогда
		СтруктураПараметров.ПостфиксКолонок = "4";
		ОбновитьДеревоФормата(СтруктураПараметров.ВерсияФормата4, СтруктураПараметров);
	КонецЕсли;
	// Сравнение деревьев.
	Строки = СтруктураПараметров.РезультатСравненияВерсийФормата.Строки;
	СравнитьДеревоФормата(Строки, СтруктураПараметров);
	ПоместитьВоВременноеХранилище(СтруктураПараметров.РезультатСравненияВерсийФормата, АдресВременногоХранилища);
КонецПроцедуры

// Процедура формирует двоичные данные HTML-документа: отчет о сравнении версий формата.
// Параметры:
//  ДеревоФормата - ДеревоЗначений - Дерево с результатом сравнения
//  АдресХранилищаРезультата - Строка - Адрес, куда будет помещен результат выполнения процедуры.
//  ВерсияФормата1 - СправочникСсылка.ВерсииФормата - исходная версия формата.
//  ВерсияФормата2 - СправочникСсылка.ВерсииФормата - результирующая версия формата.
Процедура СформироватьОтчетОСравнении(ДеревоФормата, АдресХранилищаРезультата, ВерсияФормата1, ВерсияФормата2) Экспорт
	ТекстХТМЛ = "";
	// Легенда.
	ДобавитьТекстИзМакета(ТекстХТМЛ, "ЗаголовокЛегенда");
	
	// Содержание.
	ДобавитьТекстИзМакета(ТекстХТМЛ, "ЗаголовокСодержание");
	ТекстХТМЛ = ТекстХТМЛ + Символы.ПС + "%Содержание%" + Символы.ПС;
	ТекстСодержание = "<br><A href=""#Краткий_Состав"">" + НСтр("ru='Краткий состав изменений'") + "</A>";
	
	МассивТребований = Новый Массив;
	ДобавитьТекстИзМакета(ТекстХТМЛ, "КраткийСоставИзменений");
	ДобавитьИзменение(ТекстХТМЛ, ДеревоФормата.Строки, 1, Ложь, МассивТребований, ТекстСодержание);
	
	ТекстСодержание = ТекстСодержание + "<br><A href=""#Подробный_Состав"">" + НСтр("ru='Подробный состав изменений'") + "</A>";
	ДобавитьТекстИзМакета(ТекстХТМЛ, "ПодробныйСоставИзменений");
	ДобавитьИзменение(ТекстХТМЛ, ДеревоФормата.Строки, 1, Истина, МассивТребований, ТекстСодержание);
	ТекстСодержание = ТекстСодержание + "<br><A href=""#Список_требований"">" + НСтр("ru='Список требований'") + "</A>";
	
	ДобавитьТекстИзМакета(ТекстХТМЛ, "СписокТребований");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Владелец КАК Требование,
	|	ОбъектФормата КАК Субъект,
	|	СвойствоФормата КАК СвойствоФормата,
	|	Операция КАК Операция
	|ИЗ Справочник.ПроектныеРешения
	|ГДЕ Владелец В (&МассивТребований) И НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Владелец.Наименование, ОбъектФормата, СвойствоФормата
	|ИТОГИ ПО Требование";
	Запрос.УстановитьПараметр("МассивТребований", МассивТребований);
	ВыборкаТребования = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивКолонок = Новый Массив();
	МассивКолонок.Добавить("Объект");
	Пока ВыборкаТребования.Следующий() Цикл
		ИдентификаторСсылки = ВыборкаТребования.Требование.УникальныйИдентификатор();
		ДобавитьСтрокуHTML(ТекстХТМЛ, СокрЛП(ВыборкаТребования.Требование), ИдентификаторСсылки, 3);
		НарисоватьШапкуТаблицы(ТекстХТМЛ, МассивКолонок);
		ВыборкаОбъекты = ВыборкаТребования.Выбрать();
		Пока ВыборкаОбъекты.Следующий() Цикл
			Символ = "";
			Если ВыборкаОбъекты.Операция = Перечисления.ОперацииСОбъектамиСвойствамиФормата.Добавлен Тогда
				Символ = "+";
			ИначеЕсли ВыборкаОбъекты.Операция = Перечисления.ОперацииСОбъектамиСвойствамиФормата.Удален Тогда
				Символ = "-";
			КонецЕсли;
			ЦветФона = ЦветФона(Неопределено,Символ);
			ПредставлениеОбъекта = СокрЛП(ВыборкаОбъекты.Субъект);
			Если ЗначениеЗаполнено(ВыборкаОбъекты.СвойствоФормата) Тогда
				ПредставлениеОбъекта = ПредставлениеОбъекта + ?(ЗначениеЗаполнено(ПредставлениеОбъекта),".","") 
										+ СокрЛП(ВыборкаОбъекты.СвойствоФормата);
			КонецЕсли;
			// ИД Гиперссылки: представление объекта до второй точки - для документов,
			// справочников и перечислений и до первой точки - для остальных объектов.
			ИДГиперссылки = "";
			ХвостОбъекта = "";
			ПозицияТочки = Найти(ПредставлениеОбъекта,".");
			Если ПозицияТочки > 0 Тогда
				ИДГиперссылки = Лев(ПредставлениеОбъекта, ПозицияТочки - 1);
				ХвостОбъекта = Сред(ПредставлениеОбъекта, ПозицияТочки + 1);
			КонецЕсли;
			
			Если ВРег(Лев(ПредставлениеОбъекта, 10)) = "СПРАВОЧНИК"
				Или ВРег(Лев(ПредставлениеОбъекта, 8)) = "ДОКУМЕНТ"
				Или ВРег(Лев(ПредставлениеОбъекта, 12)) = "ПЕРЕЧИСЛЕНИЕ" Тогда
				ПозицияТочки = Найти(ХвостОбъекта, ".");
				Если ПозицияТочки > 0 Тогда
					// Отсекаем названия реквизитов, если они есть.
					ИдГиперссылки = ИдГиперссылки + "." + Лев(ХвостОбъекта, ПозицияТочки - 1);
				ИначеЕсли ЗначениеЗаполнено(ХвостОбъекта) Тогда
					ИдГиперссылки = ИдГиперссылки + "." + ХвостОбъекта;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИдГиперссылки = ПредставлениеОбъекта И ЗначениеЗаполнено(Символ) Тогда
				// Если объект был добавлен или удален, ссылка не заполняется.
				ИДГиперссылки = "";
			КонецЕсли;
			
			Если ВРег(Лев(ПредставлениеОбъекта, 12)) = "ПЕРЕЧИСЛЕНИЕ" Тогда
				// Убираем "Перечисление." из гиперссылки
				ИдГиперссылки = СтрЗаменить(ИдГиперссылки, "Перечисление.", "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИДГиперссылки) Тогда
				ИДГиперссылки = СтрЗаменить(ИДГиперссылки,".","_");
				ПредставлениеОбъекта = "<A href=""#" + ИДГиперссылки + """>" + ПредставлениеОбъекта + "</A>";
			КонецЕсли;
			
			ТекстТаблицы = "<tr %ЦветФона%><td>" + ПредставлениеОбъекта + "</td></tr>";
			Если ЗначениеЗаполнено(ЦветФона) Тогда
				ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "%ЦветФона%", "BGCOLOR=#"+ЦветФона);
			Иначе
				ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "%ЦветФона%", "");
			КонецЕсли;
			ТекстХТМЛ = ТекстХТМЛ + Символы.ПС + ТекстТаблицы;
		КонецЦикла;
	КонецЦикла;
	ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%Содержание%", ТекстСодержание);
	
	// Вставляем получившийся текст в обрамление стиля.
	ТекстСтиля = Справочники.Описания.ПолучитьМакет("МакетСтильОписания").ПолучитьТекст();
	// Формируем заголовок.
	ТекстЗаголовокОписания = "";
	ДобавитьТекстИзМакета(ТекстЗаголовокОписания, "ЗаголовокДокумента");
	ТекстЗаголовокОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовокОписания,
				ВерсияФормата2, ВерсияФормата1);
	ТекстХТМЛ = ТекстЗаголовокОписания + Символы.ПС + ТекстХТМЛ;
	ТекстХТМЛ = СтрЗаменить(ТекстСтиля, "</BODY>", ТекстХТМЛ + "</BODY>");

	АдресНаСервере = ПолучитьИмяВременногоФайла("html");
	ТХ = Новый ТекстовыйДокумент;
	ТХ.УстановитьТекст(ТекстХТМЛ);
	ТХ.Записать(АдресНаСервере);
	АдресХранилищаРезультата = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(АдресНаСервере));
	УдалитьФайлы(АдресНаСервере);
КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции
#Область ЗаполнениеДерева
Процедура ИнициализацияПеременных(СтруктураПараметров)
	СтруктураПараметров.Вставить("ТаблицаТребованийЗаполнялась", Ложь);
	СтруктураПараметров.Вставить("ПостфиксКолонок", "1");
	
	ТаблицаТребований = Новый ТаблицаЗначений;
	ТаблицаТребований.Колонки.Добавить("ВерсияФормата");
	ТаблицаТребований.Колонки.Добавить("Требование");
	ТаблицаТребований.Колонки.Добавить("ОбъектФормата");
	ТаблицаТребований.Колонки.Добавить("СвойствоФормата");
	ТаблицаТребований.Колонки.Добавить("Операция");
	СтруктураПараметров.Вставить("ТаблицаТребований", ТаблицаТребований);
	
	ТаблицаДляПоискаПоДереву = Новый ТаблицаЗначений;
	ТаблицаДляПоискаПоДереву.Колонки.Добавить("Элемент");
	ТаблицаДляПоискаПоДереву.Колонки.Добавить("Идентификатор");
	ТаблицаДляПоискаПоДереву.Колонки.Добавить("ВышестоящийЭлемент1");
	ТаблицаДляПоискаПоДереву.Колонки.Добавить("ВышестоящийЭлемент2");
	ТаблицаДляПоискаПоДереву.Колонки.Добавить("ВышестоящийЭлемент3");
	ТаблицаДляПоискаПоДереву.Колонки.Добавить("ВышестоящийЭлемент4");
	
	ТаблицаДляПоискаПоДереву.Индексы.Добавить("Элемент, ВышестоящийЭлемент1, ВышестоящийЭлемент2, ВышестоящийЭлемент3, ВышестоящийЭлемент4");
	СтруктураПараметров.Вставить("ТаблицаДляПоискаПоДереву", ТаблицаДляПоискаПоДереву);
	
	РезультатСравненияВерсийФормата = Новый ДеревоЗначений;
	РезультатСравненияВерсийФормата.Колонки.Добавить("КодКартинки");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");

	Для НомерКолонки = 1 По 4 Цикл
		РезультатСравненияВерсийФормата.Колонки.Добавить("Элемент"+НомерКолонки, 				ТипСтрока);
		РезультатСравненияВерсийФормата.Колонки.Добавить("ТипСвойстваСтрокой"+НомерКолонки, 	ТипСтрока);
		РезультатСравненияВерсийФормата.Колонки.Добавить("Обязательное"+НомерКолонки, 			ТипБулево);
		РезультатСравненияВерсийФормата.Колонки.Добавить("РезультатСравнения"+НомерКолонки, 	ТипСтрока);
		РезультатСравненияВерсийФормата.Колонки.Добавить("Составной"+НомерКолонки, 				ТипБулево);
		РезультатСравненияВерсийФормата.Колонки.Добавить("ВладелецЭлемента"+НомерКолонки, 		ТипСтрока);
		РезультатСравненияВерсийФормата.Колонки.Добавить("Требование"+НомерКолонки, 			ТипСтрока);
		РезультатСравненияВерсийФормата.Колонки.Добавить("ЗарегистрированоТребование"+НомерКолонки, ТипБулево);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("РезультатСравненияВерсийФормата", РезультатСравненияВерсийФормата);
КонецПроцедуры

Процедура ОбновитьДеревоФормата(ТекВерсияФормата, СтруктураПараметров)
	Уровень0 = СтруктураПараметров.РезультатСравненияВерсийФормата.Строки;
	// Общие.
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	// Перечисления.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""Перечисления"" 			КАК Группа1,
	|	ЗначенияФормата.Владелец 	КАК Группа2,
	|	ЗначенияФормата.Владелец.Наименование КАК Группа2Сортировка,
	|	ЗначенияФормата.Владелец.Наименование КАК НаименованиеОбъекта,
	|	ЗначенияФормата.Ссылка 		КАК Группа3,
	|	ЛОЖЬ 						КАК Обязательное,
	|	ЛОЖЬ 						КАК ЭтоСоставнойТип,
	|	ЛОЖЬ						КАК ЭтоСвойствоФормата,
	|	ЗначенияФормата.Ссылка.Наименование	КАК Группа3Сортировка,
	|	""""						КАК ТипСвойстваСтрокой,
	|	NULL						КАК ТипОбщегоРеквизита,
	|	12							КАК КодКартинки_Группа,
	|	5 							КАК КодКартинки
	|ПОМЕСТИТЬ ТабПеречисления
	|ИЗ Справочник.ЗначенияФормата КАК ЗначенияФормата
	|ГДЕ ЗначенияФормата.Владелец.Владелец = &ВерсияФормата
	|	И НЕ ЗначенияФормата.ПометкаУдаления
	|	И НЕ ЗначенияФормата.Владелец.ПометкаУдаления
	|;
	|///////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ ТабПеречисления
	|УПОРЯДОЧИТЬ ПО Группа1 ВОЗР, Группа2Сортировка ВОЗР, Группа3Сортировка ВОЗР
	|ИТОГИ 
	|	МИНИМУМ(КодКартинки_Группа),
	|	МИНИМУМ(Группа2Сортировка),
	|	МИНИМУМ(Группа3Сортировка)
	|ПО Группа1, Группа2";
	Запрос.УстановитьПараметр("ВерсияФормата", ТекВерсияФормата);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если СтруктураПараметров.ПостфиксКолонок = "1" Тогда
		ЭлементУровня0 = Уровень0.Добавить();
		ЭлементУровня0.Элемент1 = "Общие";
		ЭлементУровня0.КодКартинки = 7;
		
		СтрТаб = СтруктураПараметров.ТаблицаДляПоискаПоДереву.Добавить();
		СтрТаб.Элемент = "Общие";
		СтрТаб.ВышестоящийЭлемент1 = "";
		СтрТаб.ВышестоящийЭлемент2 = "";
		СтрТаб.ВышестоящийЭлемент3 = "";
		СтрТаб.ВышестоящийЭлемент4 = "";
		СтрТаб.Идентификатор = ЭлементУровня0;
	Иначе
		СтрТаб = СтруктураПараметров.ТаблицаДляПоискаПоДереву.НайтиСтроки(Новый Структура("Элемент, ВышестоящийЭлемент1", "Общие", ""));
		ЭлементУровня0 = СтрТаб[0].Идентификатор;
		ЭлементУровня0["Элемент"+СтруктураПараметров.ПостфиксКолонок] = "Общие";
	КонецЕсли;

	ОбработатьПлоскийЗапрос(РезультатЗапроса, ЭлементУровня0, СтруктураПараметров);
	// Общие ТЧ и группы общих свойств.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР 
	|		КОГДА ТипОбщегоРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть) ТОГДА
	|			&ОбщиеТЧПредставление
	|	ИНАЧЕ	&ГруппыОбщихСвойствПредставление 
	|	КОНЕЦ 									КАК Группа1,
	|	ВЫБОР 
	|		КОГДА ТипОбщегоРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть) ТОГДА
	|			1
	|	ИНАЧЕ	6 
	|	КОНЕЦ 									КАК КодКартинки_Группа,
	|	ОбъектыФормата.Ссылка 					КАК Группа2,
	|	ОбъектыФормата.Ссылка.Наименование		КАК Группа2Сортировка,
	|	ОбъектыФормата.Ссылка.Наименование		КАК НаименованиеОбъекта,
	|	СвойстваФормата.Ссылка 					КАК Группа3,
	|	СвойстваФормата.Обязательное			КАК Обязательное,
	|	ВЫБОР КОГДА СвойстваФормата.ЭтоГруппа ТОГДА ЛОЖЬ 
	|	ИНАЧЕ СвойстваФормата.СоставнойТип КОНЕЦ КАК ЭтоСоставнойТип,
	|	ИСТИНА 									КАК ЭтоСвойствоФормата,
	|	СвойстваФормата.Порядок					КАК Группа3Сортировка,
	|	ВЫРАЗИТЬ(СвойстваФормата.Тип КАК Строка(1000))		КАК ТипСвойстваСтрокой,
	|	ОбъектыФормата.ТипОбщегоРеквизита		КАК ТипОбщегоРеквизита,
	|	5 										КАК КодКартинки
	|ИЗ Справочник.ОбъектыФормата КАК ОбъектыФормата
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвойстваФормата КАК СвойстваФормата
	|ПО СвойстваФормата.Владелец = ОбъектыФормата.Ссылка
	|ГДЕ (ОбъектыФормата.ТипОбщегоРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть)
	|	ИЛИ ОбъектыФормата.ТипОбщегоРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ГруппаОбщихСвойств))
	|	И ОбъектыФормата.Владелец = &ВерсияФормата
	|	И НЕ ОбъектыФормата.ПометкаУдаления
	|	И НЕ СвойстваФормата.ПометкаУдаления
	|	И ОбъектыФормата.Наименование НЕ В (&МассивИсключений)
	|УПОРЯДОЧИТЬ ПО Группа1 ВОЗР, Группа2Сортировка ВОЗР, Группа3Сортировка ВОЗР
	|ИТОГИ 
	|	МИНИМУМ(ТипОбщегоРеквизита),
	|	МИНИМУМ(КодКартинки_Группа),
	|	МИНИМУМ(Группа2Сортировка),
	|	МИНИМУМ(Группа3Сортировка)
	|ПО Группа1, Группа2, Группа3 ИЕРАРХИЯ";
	МассивИсключений = Новый Массив();
	МассивИсключений.Добавить("УдалениеОбъекта");
	МассивИсключений.Добавить("ЛюбаяСсылка");
	МассивИсключений.Добавить("Info");
	Запрос.УстановитьПараметр("МассивИсключений", МассивИсключений);
	Запрос.УстановитьПараметр("ВерсияФормата", ТекВерсияФормата);
	Запрос.УстановитьПараметр("ОбщиеТЧПредставление", НСтр("ru = 'Общие табличные части'"));
	Запрос.УстановитьПараметр("ГруппыОбщихСвойствПредставление", НСтр("ru = 'Группы общих свойств'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбработатьЗапросСИерархией(РезультатЗапроса, ЭлементУровня0, СтруктураПараметров);
	
	// Типы.
	// Ссылочные типы в дерево не включаются.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	""Типы"" 					КАК Группа1,
	|	""Составные"" 				КАК Группа2,
	|	""Составные"" 				КАК Группа2Сортировка,
	|	Ссылка.Наименование			КАК НаименованиеОбъекта,
	|	Ссылка 						КАК Группа3,
	|	ЛОЖЬ 						КАК Обязательное,
	|	ИСТИНА 						КАК ЭтоСоставнойТип,
	|	ЛОЖЬ 						КАК ЭтоСвойствоФормата,
	|	Ссылка.Наименование			КАК Группа3Сортировка,
	|	""""						КАК ТипСвойстваСтрокой,
	|	NULL						КАК ТипОбщегоРеквизита,
	|	13							КАК КодКартинки_Группа,
	|	5 							КАК КодКартинки
	|ИЗ Справочник.ТипыФормата
	|ГДЕ Владелец = &ВерсияФормата 
	|	И СоставнойТип = ИСТИНА
	|	И НЕ ПометкаУдаления
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	""Типы"" 					КАК Группа1,
	|	""Простые"" 				КАК Группа2,
	|	""Простые"" 				КАК Группа2Сортировка,
	|	Ссылка.Наименование			КАК НаименованиеОбъекта,
	|	Ссылка 						КАК Группа3,
	|	ЛОЖЬ 						КАК Обязательное,
	|	ЛОЖЬ 						КАК ЭтоСоставнойТип,
	|	ЛОЖЬ 						КАК ЭтоСвойствоФормата,
	|	Ссылка.Наименование			КАК Группа3Сортировка,
	|	Ссылка.БазовыйТип			КАК ТипСвойстваСтрокой,
	|	NULL						КАК ТипОбщегоРеквизита,
	|	13							КАК КодКартинки_Группа,
	|	5 							КАК КодКартинки
	|ИЗ Справочник.ТипыФормата
	|ГДЕ Владелец = &ВерсияФормата И БазовыйТип <> ""Ref""
	|	И Наименование НЕ В (ВЫБРАТЬ РАЗЛИЧНЫЕ НаименованиеОбъекта ИЗ ТабПеречисления)
	|	И Наименование НЕ В (&МассивИсключений)
	|	И СоставнойТип = ЛОЖЬ
	|	И НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Группа1 ВОЗР, Группа2Сортировка ВОЗР, Группа3Сортировка ВОЗР
	|ИТОГИ 
	|	МИНИМУМ(КодКартинки_Группа),
	|	МИНИМУМ(Группа2Сортировка),
	|	МИНИМУМ(Группа3Сортировка)
	|ПО Группа1, Группа2";
	Запрос.УстановитьПараметр("ВерсияФормата", ТекВерсияФормата);
	Запрос.УстановитьПараметр("МассивИсключений", МассивИсключений);
	РезультатЗапроса = Запрос.Выполнить();
	ОбработатьПлоскийЗапрос(РезультатЗапроса, ЭлементУровня0, СтруктураПараметров);

	// Объекты формата.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА ОбъектыФормата.Наименование ПОДОБНО ""Справочник%"" ТОГДА
	|		""Справочники""
	|	КОГДА ОбъектыФормата.Наименование ПОДОБНО ""Документ%"" ТОГДА
	|		""Документы""
	|	ИНАЧЕ ""Прочее"" КОНЕЦ  					КАК Группа1,
	|	ВЫБОР КОГДА ОбъектыФормата.Наименование ПОДОБНО ""Справочник%"" ТОГДА
	|		1
	|	КОГДА ОбъектыФормата.Наименование ПОДОБНО ""Документ%"" ТОГДА
	|		2
	|	ИНАЧЕ 3 КОНЕЦ  								КАК Группа1Сортировка,
	|	ВЫБОР КОГДА ОбъектыФормата.Наименование ПОДОБНО ""Справочник%"" ТОГДА
	|		8
	|	КОГДА ОбъектыФормата.Наименование ПОДОБНО ""Документ%"" ТОГДА
	|		11
	|	ИНАЧЕ 0 КОНЕЦ  								КАК КодКартинки_Группа,
	|	ОбъектыФормата.Ссылка 						КАК Группа2,
	|	ОбъектыФормата.Наименование					КАК Группа2Сортировка,
	|	СвойстваФормата.Ссылка 						КАК Группа3,
	|	СвойстваФормата.Порядок						КАК Группа3Порядок,
	|	СвойстваФормата.Наименование				КАК Группа3Сортировка,
	|	СвойстваФормата.Обязательное 				КАК Обязательное,
	|	ВЫБОР КОГДА СвойстваФормата.ЭтоГруппа ТОГДА ЛОЖЬ 
	|	ИНАЧЕ СвойстваФормата.СоставнойТип КОНЕЦ 	КАК ЭтоСоставнойТип,
	|	ИСТИНА 										КАК ЭтоСвойствоФормата,
	|	ВЫРАЗИТЬ(СвойстваФормата.Тип КАК Строка(1000))	КАК ТипСвойстваСтрокой,
	|	ВЫБОР КОГДА СвойстваФормата.ЭтоГруппа ТОГДА
	|		СвойстваФормата.ТипОбщегоСвойства 	
	|	ИНАЧЕ
	|		СвойстваФормата.Родитель.ТипОбщегоСвойства 	
	|	КОНЕЦ										КАК ТипОбщегоРеквизита,
	|	ВЫБОР КОГДА 
	|		СвойстваФормата.Родитель.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.КлючевыеСвойства)
	|		ТОГДА 3
	|		КОГДА СвойстваФормата.Родитель.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ГруппаОбщихСвойств)
	|			ИЛИ СвойстваФормата.Родитель.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть)
	|		ТОГДА 9
	|	ИНАЧЕ 5 КОНЕЦ 								КАК КодКартинки
	|ИЗ 
	|	Справочник.ОбъектыФормата 					КАК ОбъектыФормата
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	Справочник.СвойстваФормата 					КАК СвойстваФормата
	|ПО СвойстваФормата.Владелец = ОбъектыФормата.Ссылка
	|	И НЕ СвойстваФормата.ПометкаУдаления
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	Справочник.ЗначенияФормата 					КАК ЗначенияФормата
	|ПО ЗначенияФормата.Владелец = ОбъектыФормата.Ссылка
	|ГДЕ ОбъектыФормата.ТипОбщегоРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ПустаяСсылка)
	|	И ОбъектыФормата.Владелец = &ВерсияФормата
	|	И ЗначенияФормата.Ссылка IS NULL
	|	И НЕ ОбъектыФормата.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Группа1Сортировка ВОЗР, Группа2Сортировка ВОЗР, Группа3Порядок ВОЗР, Группа3Сортировка ВОЗР
	|ИТОГИ Минимум(КодКартинки_Группа), Минимум(ЭтоСоставнойТип), Минимум(ЭтоСвойствоФормата)
	|ПО Группа1, Группа2, Группа3 ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("ВерсияФормата", ТекВерсияФормата);
	РезультатЗапроса = Запрос.Выполнить();
	ОбработатьЗапросСИерархией(РезультатЗапроса, СтруктураПараметров.РезультатСравненияВерсийФормата, СтруктураПараметров);
КонецПроцедуры

Процедура ОбработатьВыборкуПоИерархии(ТекущаяВыборка, УровеньИерархии, ТекущаяВеткаДерева, СтруктураПараметров)
	ВыборкаПоИерархии = ТекущаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Группа3");
	Пока ВыборкаПоИерархии.Следующий() Цикл
		Если ВыборкаПоИерархии.Группа3 = ТекущаяВыборка.Группа3 Тогда
			Продолжить;
		КонецЕсли;
		ЭлементИерархии = ДобавитьВеткуДерева(ТекущаяВеткаДерева, ВыборкаПоИерархии.Группа3, СтруктураПараметров, ВыборкаПоИерархии);
		Если ВыборкаПоИерархии.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			// Корректируем часть свойств для группировки.
			Если ВыборкаПоИерархии.ТипОбщегоРеквизита = Перечисления.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть Тогда
				ЭлементИерархии.КодКартинки = 2;
			ИначеЕсли ВыборкаПоИерархии.ТипОбщегоРеквизита = Перечисления.ТипыОбщихРеквизитов.ГруппаОбщихСвойств Тогда
				ЭлементИерархии.КодКартинки = 10;
			ИначеЕсли ВыборкаПоИерархии.ТипОбщегоРеквизита = Перечисления.ТипыОбщихРеквизитов.КлючевыеСвойства Тогда
				ЭлементИерархии.КодКартинки = 4;
			Иначе
				ЭлементИерархии.КодКартинки = 1;
			КонецЕсли;
			УровеньИерархии = УровеньИерархии + 1;
			ОбработатьВыборкуПоИерархии(ВыборкаПоИерархии, УровеньИерархии, ЭлементИерархии, СтруктураПараметров);
		Иначе
			Если ЭлементИерархии.КодКартинки = 0 Тогда
				ЭлементИерархии.КодКартинки = 5;
			КонецЕсли;
			Выборка = ВыборкаПоИерархии.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.Группа3 = ВыборкаПоИерархии.Группа3 Тогда
					Продолжить;
				КонецЕсли;
				ЭлементКонечный = ДобавитьВеткуДерева(ТекущаяВеткаДерева, Выборка.Группа3, СтруктураПараметров, Выборка);
				Если ЭлементКонечный.КодКартинки = 0 Тогда
					ЭлементКонечный.КодКартинки = 5;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьПлоскийЗапрос(РезультатЗапроса, ВерхняяВетка, СтруктураПараметров)
	ВыборкаГруппа1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппа1.Следующий() Цикл
		ЭлементУровня1 = ДобавитьВеткуДерева(ВерхняяВетка, ВыборкаГруппа1.Группа1,СтруктураПараметров);
		ЭлементУровня1.КодКартинки = ВыборкаГруппа1.КодКартинки_Группа;
		ВыборкаГруппа2 = ВыборкаГруппа1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппа2.Следующий() Цикл
			ЭлементУровня2 = ДобавитьВеткуДерева(ЭлементУровня1, ВыборкаГруппа2.Группа2,СтруктураПараметров, ВыборкаГруппа2);
			ЭлементУровня2.КодКартинки = ВыборкаГруппа2.КодКартинки_Группа;
			ВыборкаГруппа3 = ВыборкаГруппа2.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ВыборкаГруппа3.Следующий() Цикл
				ЭлементУровня3 = ДобавитьВеткуДерева(ЭлементУровня2, ВыборкаГруппа3.Группа3, СтруктураПараметров, ВыборкаГруппа3);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьЗапросСИерархией(РезультатЗапроса, ВерхняяВетка, СтруктураПараметров)
	ВыборкаГруппа1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппа1.Следующий() Цикл
		ЭлементУровня1 = ДобавитьВеткуДерева(ВерхняяВетка, ВыборкаГруппа1.Группа1,СтруктураПараметров);
		ЭлементУровня1.КодКартинки = ВыборкаГруппа1.КодКартинки_Группа;
		ВыборкаГруппа2 = ВыборкаГруппа1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппа2.Следующий() Цикл
			ЭлементУровня2 = ДобавитьВеткуДерева(ЭлементУровня1, ВыборкаГруппа2.Группа2,СтруктураПараметров);
			ЭлементУровня2.КодКартинки = ВыборкаГруппа2.КодКартинки_Группа;
			ОбработатьВыборкуПоИерархии(ВыборкаГруппа2, 1, ЭлементУровня2, СтруктураПараметров);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьВеткуДерева(ВышестоящийУровень, ТекЭлемент, СтруктураПараметров, СтрокаВыборки = Неопределено)
	ВышестоящийЭлемент1 = "";
	ВышестоящийЭлемент2 = "";
	ВышестоящийЭлемент3 = "";
	ВышестоящийЭлемент4 = "";

	Если ТипЗнч(ВышестоящийУровень) <> Тип("ДеревоЗначений") Тогда
		Если ТипЗнч(ВышестоящийУровень) = Тип("СтрокаДереваЗначений") Тогда
			ВышестоящийЭлемент1 = СокрЛП(ВышестоящийУровень["Элемент"+СтруктураПараметров.ПостфиксКолонок]);
			Родитель2 = ВышестоящийУровень.Родитель;
			Если Родитель2 <> Неопределено Тогда
				ВышестоящийЭлемент2 = СокрЛП(Родитель2["Элемент"+СтруктураПараметров.ПостфиксКолонок]);
				Родитель3 = Родитель2.Родитель;
				Если Родитель3 <> Неопределено Тогда
					ВышестоящийЭлемент3 = СокрЛП(Родитель3["Элемент"+СтруктураПараметров.ПостфиксКолонок]);
					Родитель4 = Родитель3.Родитель;
					Если Родитель4 <> Неопределено Тогда
						ВышестоящийЭлемент4 = СокрЛП(Родитель4["Элемент"+СтруктураПараметров.ПостфиксКолонок]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВышестоящийЭлемент1 = СокрЛП(ВышестоящийУровень);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ПостфиксКолонок = "1" Тогда
		// Искать не имеет смысла на первом проходе.
		РезультатПоиска = Неопределено;
	Иначе
		СтруктураПоиска = Новый Структура("Элемент, ВышестоящийЭлемент1, ВышестоящийЭлемент2",
						СокрЛП(ТекЭлемент),ВышестоящийЭлемент1,ВышестоящийЭлемент2);
		СтруктураПоиска.Вставить("ВышестоящийЭлемент3", ВышестоящийЭлемент3);
		СтруктураПоиска.Вставить("ВышестоящийЭлемент4", ВышестоящийЭлемент4);

		РезультатПоиска = СтруктураПараметров.ТаблицаДляПоискаПоДереву.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	Если РезультатПоиска <> Неопределено И РезультатПоиска.Количество() > 0 Тогда
		ЭлементУровня = РезультатПоиска[0].Идентификатор;
	Иначе
		ТекущийУровень = ВышестоящийУровень.Строки;
		ЭлементУровня = ТекущийУровень.Добавить();
		ЭлементУровня.КодКартинки = 0;
		
		СтрокаПоиска = СтруктураПараметров.ТаблицаДляПоискаПоДереву.Добавить();
		СтрокаПоиска.Элемент = СокрЛП(ТекЭлемент);
		СтрокаПоиска.ВышестоящийЭлемент1 = ВышестоящийЭлемент1;
		СтрокаПоиска.ВышестоящийЭлемент2 = ВышестоящийЭлемент2;
		СтрокаПоиска.ВышестоящийЭлемент3 = ВышестоящийЭлемент3;
		СтрокаПоиска.ВышестоящийЭлемент4 = ВышестоящийЭлемент4;
		СтрокаПоиска.Идентификатор = ЭлементУровня;
	КонецЕсли;
	ЭлементУровня["Элемент"+СтруктураПараметров.ПостфиксКолонок] = СокрЛП(ТекЭлемент);
	Если СтрокаВыборки <> Неопределено Тогда
		СтруктураДанныхВыборки = Новый Структура("ТипСвойстваСтрокой, Обязательное, КодКартинки, ЭтоСоставнойТип, ЭтоСвойствоФормата");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхВыборки, СтрокаВыборки, "ТипСвойстваСтрокой, Обязательное, КодКартинки, ЭтоСоставнойТип, ЭтоСвойствоФормата");
		Если СтруктураДанныхВыборки.КодКартинки <> Неопределено Тогда
			ЭлементУровня.КодКартинки = СтруктураДанныхВыборки.КодКартинки;
		КонецЕсли;
		Если СтруктураДанныхВыборки.ТипСвойстваСтрокой <> Неопределено Тогда
			ЭлементУровня["ТипСвойстваСтрокой"+СтруктураПараметров.ПостфиксКолонок] = СтруктураДанныхВыборки.ТипСвойстваСтрокой;
		КонецЕсли;
		Если СтруктураДанныхВыборки.Обязательное <> Неопределено Тогда
			ЭлементУровня["Обязательное"+СтруктураПараметров.ПостфиксКолонок] = СтруктураДанныхВыборки.Обязательное;
		КонецЕсли;
		Если СтруктураДанныхВыборки.ЭтоСоставнойТип <> Неопределено Тогда
			ЭлементУровня["Составной"+СтруктураПараметров.ПостфиксКолонок] = СтруктураДанныхВыборки.ЭтоСоставнойТип;
			Если СтруктураДанныхВыборки.ЭтоСоставнойТип = Истина
				И СтруктураДанныхВыборки.ЭтоСвойствоФормата <> Неопределено Тогда
				Если СтруктураДанныхВыборки.ЭтоСвойствоФормата = Истина Тогда
					ЭлементУровня["ВладелецЭлемента"+СтруктураПараметров.ПостфиксКолонок] = СтрокаВыборки.Группа2Сортировка;
				Иначе
					ЭлементУровня["ВладелецЭлемента"+СтруктураПараметров.ПостфиксКолонок] = "#Тип#";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ЭлементУровня;
КонецФункции

Процедура СравнитьДеревоФормата(Строки, СтруктураПараметров)
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПроверятьВерсию2 = ЗначениеЗаполнено(СтруктураПараметров.ВерсияФормата2);
	ПроверятьВерсию3 = ЗначениеЗаполнено(СтруктураПараметров.ВерсияФормата3);
	ПроверятьВерсию4 = ЗначениеЗаполнено(СтруктураПараметров.ВерсияФормата4);
	Если НЕ СтруктураПараметров.ТаблицаТребованийЗаполнялась Тогда
		СтруктураПараметров.ТаблицаТребованийЗаполнялась = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПР.ОбъектФормата			КАК ОбъектФормата,
		|	ПР.СвойствоФормата 			КАК СвойствоФормата,
		|	ПР.Владелец 				КАК Требование,
		|	ПР.Владелец.ВерсияФормата 	КАК ВерсияФормата,
		|	ПР.Операция 				КАК Операция
		|ИЗ Справочник.ПроектныеРешения КАК ПР
		|ГДЕ ПР.Владелец.ВерсияФормата В (&МассивВерсийФормата)
		|	ИЛИ (ПР.Владелец.ВерсияФормата = &НачальнаяВерсияФормата 
		|			И ПР.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииСОбъектамиСвойствамиФормата.Удален))
		|	И НЕ ПР.ПометкаУдаления";
		МассивВерсийФормата = Новый Массив;
		Если ПроверятьВерсию2 Тогда
			МассивВерсийФормата.Добавить(СтруктураПараметров.ВерсияФормата2);
			ДобавитьПромежуточныеВерсии(МассивВерсийФормата, СтруктураПараметров.ВерсияФормата1, СтруктураПараметров.ВерсияФормата2);
		КонецЕсли;
		Если ПроверятьВерсию3 Тогда
			МассивВерсийФормата.Добавить(СтруктураПараметров.ВерсияФормата3);
			ДобавитьПромежуточныеВерсии(МассивВерсийФормата, СтруктураПараметров.ВерсияФормата1, СтруктураПараметров.ВерсияФормата3);
		КонецЕсли;
		Если ПроверятьВерсию4 Тогда
			МассивВерсийФормата.Добавить(СтруктураПараметров.ВерсияФормата4);
			ДобавитьПромежуточныеВерсии(МассивВерсийФормата, СтруктураПараметров.ВерсияФормата1, СтруктураПараметров.ВерсияФормата4);
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивВерсийФормата", МассивВерсийФормата);
		Запрос.УстановитьПараметр("НачальнаяВерсияФормата", СтруктураПараметров.ВерсияФормата1);
		СтруктураПараметров.ТаблицаТребований = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Для Инд = 0 По Строки.Количество() - 1 Цикл
		ТекСтрока = Строки[Инд];
		// Проверка 1: Все элементы заполнены
		Если ЗначениеЗаполнено(ТекСтрока.Элемент1) Тогда
			Если ПроверятьВерсию2 И ЗначениеЗаполнено(ТекСтрока.Элемент2) Тогда
				Если ТекСтрока.Элемент1 = ТекСтрока.Элемент2
					И ТекСтрока.Обязательное1 = ТекСтрока.Обязательное2
					И ТекСтрока.ТипСвойстваСтрокой1 = ТекСтрока.ТипСвойстваСтрокой2
					И ТекСтрока.Составной1 = ТекСтрока.Составной2 Тогда
					ТекСтрока.РезультатСравнения1 = "0";
					ТекСтрока.РезультатСравнения2 = "0";
					Если ТекСтрока.Составной1 = Истина Тогда
						Если ОтличаютсяСоставыТипов(ТекСтрока.Элемент1, ТекСтрока.ВладелецЭлемента1, 
								СтруктураПараметров.ВерсияФормата1, СтруктураПараметров.ВерсияФормата2,
								ТекСтрока.Родитель.Элемент1, ТекСтрока.Родитель.Родитель.Элемент1) Тогда
							ТекСтрока.РезультатСравнения1 = "*";
							ТекСтрока.РезультатСравнения2 = "*";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекСтрока.РезультатСравнения1 = "*";
					ТекСтрока.РезультатСравнения2 = "*";
				КонецЕсли;
			КонецЕсли;
			Если ПроверятьВерсию3 И ЗначениеЗаполнено(ТекСтрока.Элемент3) Тогда
				Если ТекСтрока.Элемент1 = ТекСтрока.Элемент3
					И ТекСтрока.Обязательное1 = ТекСтрока.Обязательное3
					И ТекСтрока.Составной1 = ТекСтрока.Составной3
					И ТекСтрока.ТипСвойстваСтрокой1 = ТекСтрока.ТипСвойстваСтрокой3 Тогда
					Если ТекСтрока.РезультатСравнения1 <> "*" Тогда
						ТекСтрока.РезультатСравнения1 = "0";
					КонецЕсли;
					ТекСтрока.РезультатСравнения3 = "0";
					Если ТекСтрока.Составной1 = Истина Тогда
						Если ОтличаютсяСоставыТипов(ТекСтрока.Элемент1, ТекСтрока.ВладелецЭлемента1, 
									СтруктураПараметров.ВерсияФормата1, СтруктураПараметров.ВерсияФормата3,
									ТекСтрока.Родитель.Элемент1, ТекСтрока.Родитель.Родитель.Элемент1) Тогда
							ТекСтрока.РезультатСравнения1 = "*";
							ТекСтрока.РезультатСравнения3 = "*";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекСтрока.РезультатСравнения1 = "*";
					ТекСтрока.РезультатСравнения3 = "*";
				КонецЕсли;
				Если ПроверятьВерсию2 И ЗначениеЗаполнено(ТекСтрока.Элемент2) Тогда
					Если ТекСтрока.Элемент2 = ТекСтрока.Элемент3
					И ТекСтрока.Обязательное2 = ТекСтрока.Обязательное3
					И ТекСтрока.Составной2 = ТекСтрока.Составной3
					И ТекСтрока.ТипСвойстваСтрокой2 = ТекСтрока.ТипСвойстваСтрокой3 Тогда
						Если ТекСтрока.РезультатСравнения2 <> "*" Тогда
							ТекСтрока.РезультатСравнения2 = "0";
						КонецЕсли;
						Если ТекСтрока.РезультатСравнения3 <> "*" Тогда
							ТекСтрока.РезультатСравнения3 = "0";
						КонецЕсли;
						Если ТекСтрока.Составной2 = Истина Тогда
							Если ОтличаютсяСоставыТипов(ТекСтрока.Элемент2, ТекСтрока.ВладелецЭлемента2, 
										СтруктураПараметров.ВерсияФормата2, СтруктураПараметров.ВерсияФормата3,
										ТекСтрока.Родитель.Элемент2, ТекСтрока.Родитель.Родитель.Элемент2) Тогда
								ТекСтрока.РезультатСравнения2 = "*";
								ТекСтрока.РезультатСравнения3 = "*";
							КонецЕсли;
						КонецЕсли;
					Иначе
						ТекСтрока.РезультатСравнения2 = "*";
						ТекСтрока.РезультатСравнения3 = "*";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ПроверятьВерсию4 И ЗначениеЗаполнено(ТекСтрока.Элемент4) Тогда
				Если ТекСтрока.Элемент1 = ТекСтрока.Элемент4
					И ТекСтрока.Обязательное1 = ТекСтрока.Обязательное4
					И ТекСтрока.Составной1 = ТекСтрока.Составной4
					И ТекСтрока.ТипСвойстваСтрокой1 = ТекСтрока.ТипСвойстваСтрокой4 Тогда
					Если ТекСтрока.РезультатСравнения1 <> "*" Тогда
						ТекСтрока.РезультатСравнения1 = "0";
					КонецЕсли;
					ТекСтрока.РезультатСравнения4 = "0";
					Если ТекСтрока.Составной1 = Истина Тогда
						Если ОтличаютсяСоставыТипов(ТекСтрока.Элемент1, ТекСтрока.ВладелецЭлемента1, 
									СтруктураПараметров.ВерсияФормата1, СтруктураПараметров.ВерсияФормата4,
									ТекСтрока.Родитель.Элемент1, ТекСтрока.Родитель.Родитель.Элемент1) Тогда
							ТекСтрока.РезультатСравнения1 = "*";
							ТекСтрока.РезультатСравнения4 = "*";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекСтрока.РезультатСравнения1 = "*";
					ТекСтрока.РезультатСравнения4 = "*";
				КонецЕсли;
				Если ПроверятьВерсию2 И ЗначениеЗаполнено(ТекСтрока.Элемент2) Тогда
					Если ТекСтрока.Элемент2 = ТекСтрока.Элемент4
					И ТекСтрока.Обязательное2 = ТекСтрока.Обязательное4
					И ТекСтрока.Составной2 = ТекСтрока.Составной4
					И ТекСтрока.ТипСвойстваСтрокой2 = ТекСтрока.ТипСвойстваСтрокой4 Тогда
						Если ТекСтрока.РезультатСравнения2 <> "*" Тогда
							ТекСтрока.РезультатСравнения2 = "0";
						КонецЕсли;
						Если ТекСтрока.РезультатСравнения4 <> "*" Тогда
							ТекСтрока.РезультатСравнения4 = "0";
						КонецЕсли;
						Если ТекСтрока.Составной2 = Истина Тогда
							Если ОтличаютсяСоставыТипов(ТекСтрока.Элемент2, ТекСтрока.ВладелецЭлемента2, 
										СтруктураПараметров.ВерсияФормата2, СтруктураПараметров.ВерсияФормата4,
										ТекСтрока.Родитель.Элемент2, ТекСтрока.Родитель.Родитель.Элемент2) Тогда
								ТекСтрока.РезультатСравнения2 = "*";
								ТекСтрока.РезультатСравнения4 = "*";
							КонецЕсли;
						КонецЕсли;
					Иначе
						ТекСтрока.РезультатСравнения2 = "*";
						ТекСтрока.РезультатСравнения4 = "*";
					КонецЕсли;
				КонецЕсли;
				Если ПроверятьВерсию3 И ЗначениеЗаполнено(ТекСтрока.Элемент3) Тогда
					Если ТекСтрока.Элемент3 = ТекСтрока.Элемент4
					И ТекСтрока.Обязательное3 = ТекСтрока.Обязательное4
					И ТекСтрока.Составной3 = ТекСтрока.Составной4
					И ТекСтрока.ТипСвойстваСтрокой3 = ТекСтрока.ТипСвойстваСтрокой4 Тогда
						Если ТекСтрока.РезультатСравнения3 <> "*" Тогда
							ТекСтрока.РезультатСравнения3 = "0";
						КонецЕсли;
						Если ТекСтрока.РезультатСравнения4 <> "*" Тогда
							ТекСтрока.РезультатСравнения4 = "0";
						КонецЕсли;
						Если ТекСтрока.Составной3 = Истина Тогда
							Если ОтличаютсяСоставыТипов(ТекСтрока.Элемент3, ТекСтрока.ВладелецЭлемента3, 
										СтруктураПараметров.ВерсияФормата3, СтруктураПараметров.ВерсияФормата4,
										ТекСтрока.Родитель.Элемент3, ТекСтрока.Родитель.Родитель.Элемент3) Тогда
								ТекСтрока.РезультатСравнения4 = "*";
								ТекСтрока.РезультатСравнения3 = "*";
							КонецЕсли;
						КонецЕсли;

					Иначе
						ТекСтрока.РезультатСравнения3 = "*";
						ТекСтрока.РезультатСравнения4 = "*";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Проверка 2. Какой-то из элементов не заполнен.
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Элемент1) Тогда
			ТекСтрока.РезультатСравнения1 = "-";
		КонецЕсли;
		Если ПроверятьВерсию2 И НЕ ЗначениеЗаполнено(ТекСтрока.Элемент2) Тогда
			ТекСтрока.РезультатСравнения2 = "-";
		КонецЕсли;
		Если ПроверятьВерсию3 И НЕ ЗначениеЗаполнено(ТекСтрока.Элемент3) Тогда
			ТекСтрока.РезультатСравнения3 = "-";
		КонецЕсли;
		Если ПроверятьВерсию4 И НЕ ЗначениеЗаполнено(ТекСтрока.Элемент4) Тогда
			ТекСтрока.РезультатСравнения4 = "-";
		КонецЕсли;
		Если ТекСтрока.РезультатСравнения1 = "-" ИЛИ ТекСтрока.РезультатСравнения2 = "-"
			ИЛИ ТекСтрока.РезультатСравнения3 = "-" ИЛИ ТекСтрока.РезультатСравнения4 = "-" Тогда
			Если ПроверятьВерсию2 И ТекСтрока.РезультатСравнения2 <> "-" Тогда
				ТекСтрока.РезультатСравнения2 = "+";
			КонецЕсли;
			Если ПроверятьВерсию3 И ТекСтрока.РезультатСравнения2 = "-"
				И ТекСтрока.РезультатСравнения3 <> "-" Тогда
				ТекСтрока.РезультатСравнения3 = "+";
			КонецЕсли;
			Если ПроверятьВерсию4 И ТекСтрока.РезультатСравнения3 = "-"
				И ТекСтрока.РезультатСравнения4 <> "-" Тогда
				ТекСтрока.РезультатСравнения4 = "+";
			КонецЕсли;
			Если ТекСтрока.РезультатСравнения1 <> "-" Тогда
				Если ПроверятьВерсию4 И ТекСтрока.РезультатСравнения3 = "-"
					ИЛИ ПроверятьВерсию3 И ТекСтрока.РезультатСравнения3 = "-"
					ИЛИ ПроверятьВерсию2 И ТекСтрока.РезультатСравнения2 = "-" Тогда
					ТекСтрока.РезультатСравнения1 = "+";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ (ТекСтрока.РезультатСравнения1 = "0"
			И (НЕ ПроверятьВерсию2 ИЛИ ТекСтрока.РезультатСравнения2 = "0")
			И (НЕ ПроверятьВерсию3 ИЛИ ТекСтрока.РезультатСравнения3 = "0")
			И (НЕ ПроверятьВерсию4 ИЛИ ТекСтрока.РезультатСравнения4 = "0")) Тогда
			ПоднятьРезультатСравнения(ТекСтрока);
			ЗаполнитьТребованияНаИзменения(ТекСтрока, ПроверятьВерсию2, ПроверятьВерсию3, ПроверятьВерсию4, СтруктураПараметров);
		КонецЕсли;
		
		Строки1 = ТекСтрока.Строки;
		СравнитьДеревоФормата(Строки1, СтруктураПараметров);
	КонецЦикла;
КонецПроцедуры

Функция ОтличаютсяСоставыТипов(ИмяЭлемента, ИмяВладельца, ВерсияФормата1, ВерсияФормата2, Родитель1 = "", Родитель2 = "")
	Запрос = Новый Запрос;
	Если ИмяВладельца = "#Тип#" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ТипФормата,
		|	Количество(Ссылка.Владелец) КАК КоличествоТипов
		|ИЗ Справочник.ТипыФормата.Состав
		|ГДЕ Ссылка.СоставнойТип И Ссылка.Наименование = &ИмяЭлемента
		|	И (Ссылка.Владелец = &ВерсияФормата1
		|	ИЛИ Ссылка.Владелец = &ВерсияФормата2)
		|СГРУППИРОВАТЬ ПО ТипФормата
		|ИМЕЮЩИЕ Количество(Ссылка.Владелец) <> 2";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ТипФормата,
		|	Количество(Ссылка.Владелец.Владелец) КАК КоличествоТипов
		|ИЗ Справочник.СвойстваФормата.Состав
		|ГДЕ Ссылка.СоставнойТип И Ссылка.Наименование = &ИмяЭлемента
		|	И Ссылка.Владелец.Наименование = &ИмяВладельца
		|	И Ссылка.Родитель.Наименование = &Родитель1
		|	И Ссылка.Родитель.Родитель.Наименование = &Родитель2
		|	И (Ссылка.Владелец.Владелец = &ВерсияФормата1
		|	ИЛИ Ссылка.Владелец.Владелец = &ВерсияФормата2)
		|СГРУППИРОВАТЬ ПО ТипФормата
		|ИМЕЮЩИЕ Количество(Ссылка.Владелец) <> 2";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВерсияФормата1", ВерсияФормата1);
	Запрос.УстановитьПараметр("ВерсияФормата2", ВерсияФормата2);
	Запрос.УстановитьПараметр("ИмяЭлемента", ИмяЭлемента);
	Запрос.УстановитьПараметр("ИмяВладельца", ИмяВладельца);
	Запрос.УстановитьПараметр("Родитель1", Родитель1);
	Запрос.УстановитьПараметр("Родитель2", Родитель2);

	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Процедура ПоднятьРезультатСравнения(ТекСтрока)
	СтрокаРодитель = ТекСтрока.Родитель;
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрокаРодитель.РезультатСравнения1 = "0" Тогда
		СтрокаРодитель.РезультатСравнения1 = "**";
		ПоднятьРезультатСравнения(СтрокаРодитель);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТребованияНаИзменения(ТекСтрока, ПроверятьВерсию2, ПроверятьВерсию3, ПроверятьВерсию4, СтруктураПараметров)
	СтруктураПараметров.ПостфиксКолонок = "1";
	ЗаполнитьТребованияПоВерсии(ТекСтрока, СтруктураПараметров.ВерсияФормата1, СтруктураПараметров, Истина);
	Если ПроверятьВерсию2 Тогда
		СтруктураПараметров.ПостфиксКолонок = "2";
		ЗаполнитьТребованияПоВерсии(ТекСтрока, СтруктураПараметров.ВерсияФормата2, СтруктураПараметров);
	КонецЕсли;
	Если ПроверятьВерсию3 Тогда
		СтруктураПараметров.ПостфиксКолонок = "3";
		ЗаполнитьТребованияПоВерсии(ТекСтрока, СтруктураПараметров.ВерсияФормата3, СтруктураПараметров);
	КонецЕсли;
	Если ПроверятьВерсию4 Тогда
		СтруктураПараметров.ПостфиксКолонок = "4";
		ЗаполнитьТребованияПоВерсии(ТекСтрока, СтруктураПараметров.ВерсияФормата4, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТребованияПоВерсии(ТекСтрока, ТекВерсияФормата, СтруктураПараметров, АнализироватьТолькоУдаление = Ложь)
	Если СтруктураПараметров.ТаблицаТребований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	РезультатСравнения = СокрЛП(ТекСтрока["РезультатСравнения"+СтруктураПараметров.ПостфиксКолонок]);
	Если РезультатСравнения <> "+" И АнализироватьТолькоУдаление Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиДерева = СтруктураПараметров.ТаблицаДляПоискаПоДереву.НайтиСтроки(Новый Структура("Идентификатор", ТекСтрока));
	
	ВладелецЭлемента = ДанныеСтрокиДерева[0].ВышестоящийЭлемент1;
	Если РезультатСравнения = "-" Тогда
		Элемент = ДанныеСтрокиДерева[0].Элемент;
	Иначе
		Элемент = СокрЛП(ТекСтрока["Элемент"+СтруктураПараметров.ПостфиксКолонок]);
	КонецЕсли;
	СтруктураПоискаБазовая = Новый Структура;
	Если РезультатСравнения = "-" Тогда
		// поиск производится без учета версии формата
		СтруктураПоискаБазовая.Вставить("Операция", Перечисления.ОперацииСОбъектамиСвойствамиФормата.Удален);
	Иначе
		СтруктураПоискаБазовая.Вставить("ВерсияФормата", ТекВерсияФормата);
		СтруктураПоискаБазовая.Вставить("Операция", ?(РезультатСравнения = "*", 
											Перечисления.ОперацииСОбъектамиСвойствамиФормата.Изменен,
											Перечисления.ОперацииСОбъектамиСвойствамиФормата.Добавлен));
	КонецЕсли;

	
	// Вариант1. Объект + свойство объекта
	СтруктураПоиска = Новый Структура;
	Для Каждого ПараметрБазовый Из СтруктураПоискаБазовая Цикл
		СтруктураПоиска.Вставить(ПараметрБазовый.Ключ, ПараметрБазовый.Значение);
	КонецЦикла;
	Если ВладелецЭлемента = "КлючевыеСвойства" Тогда
		СтруктураПоиска.Вставить("СвойствоФормата", "КлючевыеСвойства." + Элемент);
		СтруктураПоиска.Вставить("ОбъектФормата", СокрЛП(ДанныеСтрокиДерева[0].ВышестоящийЭлемент2));
	Иначе
		СтруктураПоиска.Вставить("СвойствоФормата", Элемент);
		СтруктураПоиска.Вставить("ОбъектФормата", ВладелецЭлемента);
	КонецЕсли;
	РезультатПоиска = СтруктураПараметров.ТаблицаТребований.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		ДобавитьТребованияВСтрокуДерева(ТекСтрока, РезультатПоиска, СтруктураПараметров);
		Возврат;
	ИначеЕсли ВладелецЭлемента = "КлючевыеСвойства" Тогда
		// Искать по объекту не имеет смысла.
		Возврат;
	КонецЕсли;
	// Вариант 2. Текущая строка = объект.
	СтруктураПоиска = Новый Структура;
	Для Каждого ПараметрБазовый Из СтруктураПоискаБазовая Цикл
		СтруктураПоиска.Вставить(ПараметрБазовый.Ключ, ПараметрБазовый.Значение);
	КонецЦикла;

	ПрефиксОбъекта = "";
	Если ВладелецЭлемента = "Перечисления" Тогда
		ПрефиксОбъекта = "Перечисление.";
	КонецЕсли;
	СтруктураПоиска.Вставить("ОбъектФормата", ПрефиксОбъекта+Элемент);
	РезультатПоиска = СтруктураПараметров.ТаблицаТребований.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		ДобавитьТребованияВСтрокуДерева(ТекСтрока, РезультатПоиска, СтруктураПараметров);
		Возврат;
	КонецЕсли;
	// Вариант 3. Текущая строка - реквизит ТЧ, поиск по свойству "ИмяТЧ.РеквизитТЧ" с учетом объекта.
	СтруктураПоиска = Новый Структура;
	Для Каждого ПараметрБазовый Из СтруктураПоискаБазовая Цикл
		СтруктураПоиска.Вставить(ПараметрБазовый.Ключ, ПараметрБазовый.Значение);
	КонецЦикла;
	СтруктураПоиска.Вставить("СвойствоФормата", ВладелецЭлемента + "." + Элемент);
	СтруктураПоиска.Вставить("ОбъектФормата", ДанныеСтрокиДерева[0].ВышестоящийЭлемент2);
	РезультатПоиска = СтруктураПараметров.ТаблицаТребований.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		ДобавитьТребованияВСтрокуДерева(ТекСтрока, РезультатПоиска, СтруктураПараметров);
		Возврат;
	КонецЕсли;
	// Вариант 4. Текущая строка - часть группы общих свойств (шапка, ТЧ или реквизит ТЧ).
	ИмяОбъекта = ДанныеСтрокиДерева[0].ВышестоящийЭлемент3;
	ИмяСвойства = ДанныеСтрокиДерева[0].ВышестоящийЭлемент2 + "." + ВладелецЭлемента + "." + Элемент;
	ВыполнятьПоиск = Ложь;
	Если Найти(ДанныеСтрокиДерева[0].ВышестоящийЭлемент3, ".") = 0 Тогда
		ИмяОбъекта = ДанныеСтрокиДерева[0].ВышестоящийЭлемент4;
		ИмяСвойства = ДанныеСтрокиДерева[0].ВышестоящийЭлемент3 + "." + ИмяСвойства;
		Если Найти(ДанныеСтрокиДерева[0].ВышестоящийЭлемент4, ".") > 0 Тогда
			ВыполнятьПоиск = Истина;
		КонецЕсли;
	Иначе
		ВыполнятьПоиск = Истина;
	КонецЕсли;
	Если ВыполнятьПоиск Тогда
		СтруктураПоиска = Новый Структура;
		Для Каждого ПараметрБазовый Из СтруктураПоискаБазовая Цикл
			СтруктураПоиска.Вставить(ПараметрБазовый.Ключ, ПараметрБазовый.Значение);
		КонецЦикла;
		СтруктураПоиска.Вставить("СвойствоФормата", ИмяСвойства);
		СтруктураПоиска.Вставить("ОбъектФормата", ИмяОбъекта);
		РезультатПоиска = СтруктураПараметров.ТаблицаТребований.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			ДобавитьТребованияВСтрокуДерева(ТекСтрока, РезультатПоиска, СтруктураПараметров);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Вариант 5. Текущая строка = свойство, поиск по объекту текущей строки без учета свойства.
	СтруктураПоиска = Новый Структура;
	Для Каждого ПараметрБазовый Из СтруктураПоискаБазовая Цикл
		Если ПараметрБазовый.Ключ = "Операция" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска.Вставить(ПараметрБазовый.Ключ, ПараметрБазовый.Значение);
	КонецЦикла;
	ПрефиксОбъекта = "";
	Если ДанныеСтрокиДерева[0].ВышестоящийЭлемент2 = "Перечисления" Тогда
		ПрефиксОбъекта = "Перечисление.";
	КонецЕсли;
	СтруктураПоиска.Вставить("ОбъектФормата", ПрефиксОбъекта + ВладелецЭлемента);
	РезультатПоиска = СтруктураПараметров.ТаблицаТребований.НайтиСтроки(СтруктураПоиска);
	// 5.1 Возможно это ТЧ, и требования заведены на реквизиты ТЧ.
	РезультатПоискаУточненный = Новый Массив;
	Для Каждого СтрокаРезультат Из РезультатПоиска Цикл
		Если Найти(СтрокаРезультат.СвойствоФормата, Элемент) > 0 Тогда
			РезультатПоискаУточненный.Добавить(СтрокаРезультат);
		КонецЕсли;
	КонецЦикла;
	Если РезультатПоискаУточненный.Количество() > 0 Тогда
		ДобавитьТребованияВСтрокуДерева(ТекСтрока, РезультатПоискаУточненный, СтруктураПараметров);
		Возврат;
	ИначеЕсли РезультатПоиска.Количество() > 0 Тогда
	// 5.2 Привязываем требования на объект целиком.
		ДобавитьТребованияВСтрокуДерева(ТекСтрока, РезультатПоиска, СтруктураПараметров);
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьТребованияВСтрокуДерева(СтрокаДерева, МассивСтрокТребований, СтруктураПараметров)
	ТекстТребование = СтрокаДерева["Требование"+ СтруктураПараметров.ПостфиксКолонок];
	Для Каждого эРезультат Из МассивСтрокТребований Цикл
		ТекстТребование = ТекстТребование + эРезультат.Требование.УникальныйИдентификатор() + ";";
	КонецЦикла;
	СтрокаДерева["Требование" + СтруктураПараметров.ПостфиксКолонок] = ТекстТребование;
	СтрокаДерева["ЗарегистрированоТребование" + СтруктураПараметров.ПостфиксКолонок] = Истина;

	ПоднятьТребованиеПоДереву(СтрокаДерева, СтруктураПараметров, МассивСтрокТребований);
КонецПроцедуры

Процедура ПоднятьТребованиеПоДереву(СтрокаДерева, СтруктураПараметров, МассивСтрокТребований)
	СтрокаРодитель = СтрокаДерева.Родитель;
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекЭлемент = СтрокаРодитель["Элемент" + СтруктураПараметров.ПостфиксКолонок];
	рТребование = СтрокаРодитель["Требование" + СтруктураПараметров.ПостфиксКолонок];
	Для Каждого эРезультат Из МассивСтрокТребований Цикл
		ТекстТребование = "" + СокрЛП(эРезультат.Требование.УникальныйИдентификатор()) + ";";
		Если Найти(рТребование, ТекстТребование) = 0 Тогда
				рТребование = рТребование + ТекстТребование;
		КонецЕсли;
	КонецЦикла;

	СтрокаРодитель["Требование" + СтруктураПараметров.ПостфиксКолонок] = рТребование;
	ПоднятьТребованиеПоДереву(СтрокаРодитель, СтруктураПараметров, МассивСтрокТребований)
КонецПроцедуры

// Добавляет в массив версии формата, которые находятся между версией 1 и 2
Процедура ДобавитьПромежуточныеВерсии(МассивВерсийФормата, Версия1, Версия2)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Наименование,
	|	Ссылка
	|ИЗ Справочник.ВерсииФормата
	|ГДЕ НЕ ПометкаУдаления И НЕ Ссылка В (&МассивВерсийФормата)
	|УПОРЯДОЧИТЬ ПО Наименование";
	Запрос.УстановитьПараметр("МассивВерсийФормата", МассивВерсийФормата);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВерсияЧислом1 = ВерсиюВЧисло(СокрЛП(Версия1.Наименование));
	ВерсияЧислом2 = ВерсиюВЧисло(СокрЛП(Версия2.Наименование));
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВерсияЧислом = ВерсиюВЧисло(СокрЛП(Выборка.Наименование));
		Если (ВерсияЧислом > ВерсияЧислом1 И ВерсияЧислом < ВерсияЧислом2)
			ИЛИ (ВерсияЧислом > ВерсияЧислом2 И ВерсияЧислом < ВерсияЧислом1) Тогда
			МассивВерсийФормата.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВерсиюВЧисло(ВерсияСтрокой)
	Если ПустаяСтрока(ВерсияСтрокой) Или ВерсияСтрокой = "0.0.0.0" Тогда
		Возврат 0;
	КонецЕсли;
	Разряд = 0;
	ВерсияЧислом = 0;
	Остаток = ВерсияСтрокой;
	ПозицияТочки = Найти(Остаток, ".");
	Пока ПозицияТочки > 0 Цикл
		ЧислоСтрокой = Лев(Остаток, ПозицияТочки - 1);
		ВерсияЧислом = ВерсияЧислом * 1000 + Число(ЧислоСтрокой);
		Остаток = Сред(Остаток, ПозицияТочки + 1);
		ПозицияТочки = Найти(Остаток, ".");
		Разряд = Разряд + 1;
	КонецЦикла;
	ЧислоСтрокой = Остаток;
	// может быть beta
	Попытка
		ЧислоЧислом = Число(ЧислоСтрокой);
	Исключение
		ЧислоЧислом = 0;
	КонецПопытки;
	
	ВерсияЧислом = ВерсияЧислом * 1000 + ЧислоЧислом;
	Разряд = Разряд + 1;
	// Номера версии после 4 точки возвращает после запятой.
	// Например, для версии "1.2.3.4.5.6.7" вернет 1002003004,005006007.
	Если Разряд > 4 Тогда
		ВерсияЧислом = ВерсияЧислом / Pow(1000, Разряд - 4);
	КонецЕсли;
	Возврат ВерсияЧислом;
КонецФункции
#КонецОбласти
#Область ОтчетОСравнении
Процедура ДобавитьИзменение(ТекстХТМЛ, СтрокиДерева, ТекущийУровень, Детально, МассивТребований, ТекстСодержание)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.РезультатСравнения1 = "0"
			И СтрокаДерева.РезультатСравнения2 = "0" Тогда
			Продолжить;
		КонецЕсли;
		ЭтоОбъект = (ТекущийУровень = 3);
		ВыводитьСвойства = Детально;
		Если СтрокаДерева.РезультатСравнения1 = "+"
			Или СтрокаДерева.РезультатСравнения2 = "-" 
			Или СтрокаДерева.РезультатСравнения1 = "-"
			Или СтрокаДерева.РезультатСравнения2 = "+" Тогда
			ВыводитьСвойства = Ложь;
		КонецЕсли;
		Если Найти(СтрокаДерева.Элемент1, ".") > 0
			Или Найти(СтрокаДерева.Элемент2, ".") > 0 Тогда
			ЭтоОбъект = Истина;
		КонецЕсли;
		ЭтоСвойство = НЕ ЭтоОбъект И (ТекущийУровень >= 3);
		Если НЕ ЭтоСвойство И НЕ ЭтоОбъект Тогда
			// Очередной заголовок.
			УровеньЗаголовка = ТекущийУровень + 1;
			Если ЗначениеЗаполнено(СтрокаДерева.Элемент1) Тогда
				СтрокаДокумента = СтрокаДерева.Элемент1;
			Иначе
				СтрокаДокумента = СтрокаДерева.Элемент2;
			КонецЕсли;
			ИдГиперссылки = ?(Детально, "Д_", "К_") + СтрЗаменить(СтрокаДокумента, " ", "_");
			ДобавитьСтрокуHTML(ТекстХТМЛ, СтрокаДокумента,ИдГиперссылки, УровеньЗаголовка);
			Префикс = "";
			Для Счетчик = 1 По ТекущийУровень Цикл
				Префикс = Префикс + "&nbsp&nbsp&nbsp&nbsp";
			КонецЦикла;
			ТекстСодержание = ТекстСодержание + "<br>" + Префикс + "<A href=""#" + ИдГиперссылки + """>" + СтрокаДокумента + "</A>";
			ДобавитьИзменение(ТекстХТМЛ, СтрокаДерева.Строки, ТекущийУровень+1, Детально, МассивТребований, ТекстСодержание);
		// Уровень объекта, детально.
		ИначеЕсли Детально И ЭтоОбъект Тогда
			Если НЕ ВыводитьСвойства Тогда
				// Во 2-м разделе не выводятся добавленные и удаленные объекты.
				Продолжить;
			Иначе
				// Объект - заголовок.
				УровеньЗаголовка = ТекущийУровень + 1;
				Если ЗначениеЗаполнено(СтрокаДерева.Элемент1) Тогда
					СтрокаДокумента = СтрокаДерева.Элемент1;
				Иначе
					СтрокаДокумента = СтрокаДерева.Элемент2;
				КонецЕсли;
				ИдГиперссылки = СтрЗаменить(СтрокаДокумента,".","_");

				ДобавитьСтрокуHTML(ТекстХТМЛ, СтрокаДокумента,ИдГиперссылки, УровеньЗаголовка);
				
				// Свойства пишут в таблицу.
				ДобавитьИзменениеВТаблицу(ТекстХТМЛ, СтрокаДерева.Строки, 1, МассивТребований, Истина);
				// Закрыть таблицу.
				ТекстХТМЛ = ТекстХТМЛ + "</table><BR>" + Символы.ПС;
			КонецЕсли;
		// Уровень объекта, общий раздел.
		ИначеЕсли ЭтоОбъект И НЕ Детально Тогда
			// При необходимости добавить шапку в таблицу.
			Если Прав(ТекстХТМЛ,5) <> "</tr>" Тогда
				МассивКолонок = Новый Массив();
				МассивКолонок.Добавить("Объект");
				МассивКолонок.Добавить("Требование");
				НарисоватьШапкуТаблицы(ТекстХТМЛ, МассивКолонок);
			КонецЕсли;
			// Добавить строку таблицы.
			ЦветФона = ЦветФона(СтрокаДерева);
			Если ЗначениеЗаполнено(СтрокаДерева.Элемент1) Тогда
				СтрокаДокумента = СтрокаДерева.Элемент1;
			Иначе
				СтрокаДокумента = СтрокаДерева.Элемент2;
			КонецЕсли;
			ТребованиеТекст = ПредставлениеТребования(СтрокаДерева, МассивТребований);
			ТекстТаблицы = "<tr %ЦветФона%><td>%ГиперссылкаОбъект%" + СтрокаДокумента + "</td><td>" + ТребованиеТекст + "</td></tr>";
			Если ЗначениеЗаполнено(ЦветФона) Тогда
				ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "%ЦветФона%", "BGCOLOR=#"+ЦветФона);
				ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "%ГиперссылкаОбъект%", "");
			Иначе
				ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "%ЦветФона%", "");
				ИдентификаторГиперссылки = СтрЗаменить(СтрокаДокумента,".","_");
				ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "%ГиперссылкаОбъект%", "<A href=""#" + ИдентификаторГиперссылки + """>");
			КонецЕсли;
			ТекстХТМЛ = ТекстХТМЛ + Символы.ПС + ТекстТаблицы;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПредставлениеТребования(СтрокаДерева, МассивТребований)
	СводнаяСтрокаТребований = "";
	Если ЗначениеЗаполнено(СтрокаДерева.Требование1) Тогда
		СводнаяСтрокаТребований = СводнаяСтрокаТребований + СокрЛП(СтрокаДерева.Требование1);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаДерева.Требование2) Тогда
		СводнаяСтрокаТребований = СводнаяСтрокаТребований 
			+ ?(ЗначениеЗаполнено(СводнаяСтрокаТребований),";","") + СокрЛП(СтрокаДерева.Требование2);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СводнаяСтрокаТребований) Тогда
		Возврат "";
	КонецЕсли;
	ТребованияСтрокой = "";
	МассивСсылок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СводнаяСтрокаТребований,";",Ложь);
	Для Каждого СсылкаСтрокой Из МассивСсылок Цикл
		Если НЕ ЗначениеЗаполнено(СсылкаСтрокой) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ТекСсылка = Справочники.Требования.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаСтрокой));
			Если МассивТребований.Найти(ТекСсылка) = Неопределено Тогда
				МассивТребований.Добавить(ТекСсылка);
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		Если ЗначениеЗаполнено(СокрЛП(ТекСсылка)) Тогда
			ТребованияСтрокой = ТребованияСтрокой + ?(ЗначениеЗаполнено(ТребованияСтрокой),"; ","") + 
								"<A href=""#" + СсылкаСтрокой + """>" + СокрЛП(ТекСсылка) + "</A>";
		КонецЕсли;
	КонецЦикла;
	Возврат ТребованияСтрокой;
КонецФункции

Функция ЦветФона(СтрокаДерева, Знач Символ = "")
	ЦветФона = "";
	Если СтрокаДерева <> Неопределено Тогда
		Если СтрокаДерева.РезультатСравнения1 = "+"
			Или СтрокаДерева.РезультатСравнения2 = "-" Тогда
			Символ = "-";
		ИначеЕсли СтрокаДерева.РезультатСравнения1 = "-"
			Или СтрокаДерева.РезультатСравнения2 = "+" Тогда
			Символ = "+";
		КонецЕсли;
	КонецЕсли;
	Если Символ = "+" Тогда
		// Добавленное зеленым.
		ЦветФона = "f0fff0";
	ИначеЕсли Символ = "-" Тогда
		// Удаленное красным.
		ЦветФона = "ffe4e1";
	КонецЕсли;

	Возврат ЦветФона;
КонецФункции

Процедура ДобавитьИзменениеВТаблицу(ТекстХТМЛ, СтрокиДерева, ТекущийУровень, МассивТребований, ДобавлятьШапку = Ложь)
	Если ДобавлятьШапку Тогда
		МассивКолонок = Новый Массив();
		МассивКолонок.Добавить("Свойство");
		МассивКолонок.Добавить("Требование");
		НарисоватьШапкуТаблицы(ТекстХТМЛ, МассивКолонок);
	КонецЕсли;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.РезультатСравнения1 = "0"
			И СтрокаДерева.РезультатСравнения2 = "0" Тогда
			Продолжить;
		КонецЕсли;
		ЦветФона = ЦветФона(СтрокаДерева);
		Префикс = "";
		Для Счетчик = 1 По ТекущийУровень-1 Цикл
			Префикс = Префикс + "&nbsp;&nbsp;&nbsp;&nbsp;";
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаДерева.Элемент1) Тогда
			СтрокаДокумента = Префикс + СтрокаДерева.Элемент1;
		Иначе
			СтрокаДокумента = Префикс + СтрокаДерева.Элемент2;
		КонецЕсли;
		ТребованиеТекст = ПредставлениеТребования(СтрокаДерева, МассивТребований);
		ТекстТаблицы = "<tr %ЦветФона%><td>" + СтрокаДокумента + "</td><td>" + ТребованиеТекст + "</td></tr>";
		Если ЗначениеЗаполнено(ЦветФона) Тогда
			ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "%ЦветФона%", "BGCOLOR=#"+ЦветФона);
		Иначе
			ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "%ЦветФона%", "");
		КонецЕсли;
		ТекстХТМЛ = ТекстХТМЛ + Символы.ПС + ТекстТаблицы;
		ДобавитьИзменениеВТаблицу(ТекстХТМЛ, СтрокаДерева.Строки, ТекущийУровень+1, МассивТребований);
	КонецЦикла
КонецПроцедуры

Процедура ДобавитьСтрокуHTML(ТекстОписания, Знач ДобавляемыйТекст, ИдентификаторГиперссылки = "", УровеньЗаголовка = 0, ТипГиперссылки = 1)
	// Возможно, надо закрыть таблицу объектов (предыдущий уровень).
	Если Прав(ТекстОписания,5) = "</tr>" Тогда
		ТекстОписания = ТекстОписания + "</table><BR>" + Символы.ПС;
	КонецЕсли;

	Если ИдентификаторГиперссылки <> "" Тогда
		// Надо дополнить текст идентификатором для гиперссылки.
		НачалоГиперссылки = "<A name=" + ИдентификаторГиперссылки + ">";
		ДобавляемыйТекст = НачалоГиперссылки + ДобавляемыйТекст + "</A>";
	КонецЕсли;
	Если УровеньЗаголовка > 0 Тогда
		ДобавляемыйТекст = "<H"+УровеньЗаголовка+">" + ДобавляемыйТекст + "</H"+УровеньЗаголовка+">";
	Иначе
		ДобавляемыйТекст = "<P>" + ДобавляемыйТекст + "</P>";
	КонецЕсли;
	
	Если ТекстОписания = "" Тогда
		ТекстОписания = ДобавляемыйТекст;
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + ДобавляемыйТекст;
	КонецЕсли;
КонецПроцедуры

Процедура НарисоватьШапкуТаблицы(ТекстХТМЛ, МассивКолонок)
	ТекстТаблицы = "<TABLE id=table3 class=withBorder cellSpacing=0 cellPadding=3 width=800 border=0>" + Символы.ПС;
	ТекстТаблицы = ТекстТаблицы + "<tr BGCOLOR=lightgrey>";
	Для Каждого Колонка Из МассивКолонок Цикл
		ТекстТаблицы = ТекстТаблицы + "<td>" + Колонка + "</td>";
	КонецЦикла;
	ТекстТаблицы = ТекстТаблицы + "</tr>";
	ТекстХТМЛ = ТекстХТМЛ + ТекстТаблицы;
КонецПроцедуры

Процедура ДобавитьТекстИзМакета(ТекстХТМЛ, ИдентификаторОбласти)
	// Возможно, надо закрыть таблицу объектов (предыдущий уровень).
	Если Прав(ТекстХТМЛ,5) = "</tr>" Тогда
		ТекстХТМЛ = ТекстХТМЛ + "</table><BR>" + Символы.ПС;
	КонецЕсли;

	МакетХТМЛ = Обработки.СравнениеВерсийФормата.ПолучитьМакет("Макет");
	СодержимоеМакета = МакетХТМЛ.ПолучитьТекст();
	ПозицияНачало = СтрНайти(СодержимоеМакета, ""+ ИдентификаторОбласти + "Начало");
	ПозицияКонец = СтрНайти(СодержимоеМакета, "" + ИдентификаторОбласти + "Конец");
	Если ПозицияНачало = 0 Или ПозицияКонец = 0 Тогда
		Возврат;
	КонецЕсли;
	НачалоИскомойСтроки = ПозицияНачало + СтрДлина(""+ ИдентификаторОбласти + "Начало");
	ДлинаИскомойСтроки = ПозицияКонец - НачалоИскомойСтроки;
	
	ТекстХТМЛ = ТекстХТМЛ + Сред(СодержимоеМакета, НачалоИскомойСтроки, ДлинаИскомойСтроки);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#КонецЕсли
