#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

// Выполняет загрузку формата из файлов в объекты информационной базы
// Параметры:
//   ОбщиеПеременные - Структура - общие переменные которые используются при загрузке.
//   АдресВременногоХранилища - Произвольный - Адрес, в который будет  помещен результат загрузки.
Процедура ВыполнитьЗагрузкуФормата(ОбщиеПеременные, АдресВременногоХранилища) Экспорт
	ДопПакет = Новый Массив;
	ДопПакет.Добавить(ФабрикаXDTO.Пакеты.Получить("http://www.1c.ru/SSL/Exchange/Message"));
	мФабрикаXDTO = СоздатьФабрикуXDTO(ОбщиеПеременные.ФайлНаСервере, ДопПакет);
	ОсновнойПакет = Неопределено;
	ВспомогательныйПакет = Неопределено;
	Если мФабрикаXDTO.Пакеты.Количество() = 1 Тогда
		ОсновнойПакет = мФабрикаXDTO.Пакеты[0];
	Иначе
		Для Каждого ТекПакет Из мФабрикаXDTO.Пакеты Цикл
			Если ВРЕГ(СокрЛП(ТекПакет.URIПространстваИмен)) = ВРЕГ(СокрЛП(ОбщиеПеременные.ИмяОсновногоПакетаXDTO)) Тогда
				ОсновнойПакет = ТекПакет;
			Иначе
				ВспомогательныйПакет = ТекПакет;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ОсновнойПакет = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Неверно указано имя основного пакета XDTO'"));
		ПоместитьВоВременноеХранилище(Ложь, АдресВременногоХранилища);
		Возврат;
	КонецЕсли;
	ОбщиеПеременные.Вставить("ЗагрузитьНовыйФормат", Ложь);
	Если ОбщиеПеременные.СпособЗагрузки = 0 Тогда
		ОбщиеПеременные.ЗагрузитьНовыйФормат = Истина;
		НовыйФормат = Справочники.ВерсииФормата.СоздатьЭлемент();
		НовыйФормат.Наименование = ВыделитьНомерВерсииФормата(ОбщиеПеременные);
		НовыйФормат.ПространствоИмен = СокрЛП(ОбщиеПеременные.ИмяОсновногоПакетаXDTO);
		НовыйФормат.Записать();
		ОбщиеПеременные.ВерсияФормата = НовыйФормат.Ссылка;
	Иначе
		ИзменятьФормат = ОбщиеПеременные.ВерсияФормата.ПометкаУдаления
					Или (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбщиеПеременные.ВерсияФормата, "ПространствоИмен")
							<> ОбщиеПеременные.ИмяОсновногоПакетаXDTO);
		Если ИзменятьФормат Тогда
			ВерсияФорматаОбъект = ОбщиеПеременные.ВерсияФормата.ПолучитьОбъект();
			ВерсияФорматаОбъект.УстановитьПометкуУдаления(Ложь);
			ВерсияФорматаОбъект.ПространствоИмен = СокрЛП(ОбщиеПеременные.ИмяОсновногоПакетаXDTO);
			ВерсияФорматаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	ПолучитьОбъектыФормата(ОбщиеПеременные);
	// 0. Обработаем вспомогательный пакет - оттуда нужны только типы.
	Если ВспомогательныйПакет <> Неопределено Тогда
		Для Каждого ЭлементПакета Из ВспомогательныйПакет Цикл
			Если ТипЗнч(ЭлементПакета) = Тип("ТипЗначенияXDTO") Тогда
				ОбработатьЗначениеXDTO(ЭлементПакета,ОбщиеПеременные, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Проход №1. Создаем список объектов XDTO которые являются табличными частями.
	// А также список объектов XDTO которые являются "хранилищем" общих реквизитов шапки нескольких видов объектов.
	мТабличныеЧасти = Новый ТаблицаЗначений;
	мТабличныеЧасти.Колонки.Добавить("ИмяТЧ");
	мТабличныеЧасти.Колонки.Добавить("ТипТЧ");
	мТабличныеЧасти.Колонки.Добавить("ОбъектТЧ");
	мТабличныеЧасти.Колонки.Добавить("КоличествоСсылок");
	
	мОбщиеРеквизиты = Новый Структура;
	мКлючевыеСвойства = Новый Структура;
	
	мИсключаемыеОбъекты = Новый Массив;
	ОбщиеПеременные.Вставить("СоставныеТипы", Новый Структура);

	Для Каждого ЭлементПакета Из ОсновнойПакет Цикл
		Если ТипЗнч(ЭлементПакета) = Тип("ТипОбъектаXDTO") Тогда
			Если ЭлементПакета.Свойства.Количество() = 1
				И ЭлементПакета.Свойства[0].ВерхняяГраница = -1 Тогда
				
				ТипТЧ = ОбработатьТип(ЭлементПакета.Свойства[0].Тип, ОбщиеПеременные).ТипСтрокой;
				НоваяСтрокаТЧ = мТабличныеЧасти.Добавить();
				НоваяСтрокаТЧ.ИмяТЧ = ЭлементПакета.Имя;
				НоваяСтрокаТЧ.ТипТЧ = ТипТЧ;
				НоваяСтрокаТЧ.КоличествоСсылок = 0;
				мИсключаемыеОбъекты.Добавить(ЭлементПакета.Имя);
				мИсключаемыеОбъекты.Добавить(ТипТЧ);
			ИначеЕсли Найти(ЭлементПакета.Имя, "Строка") = 0 И Найти(ЭлементПакета.Имя, ".") = 0 Тогда
				Если Найти(ЭлементПакета.Имя, "КлючевыеСвойства") <> 0 Тогда
					// Цикл по ключевым свойствам
					ТабКлючевыеСвойства = Новый ТаблицаЗначений;
					ТабКлючевыеСвойства.Колонки.Добавить("Имя");
					ТабКлючевыеСвойства.Колонки.Добавить("Тип");
					ТабКлючевыеСвойства.Колонки.Добавить("НижняяГраница");
					ТабКлючевыеСвойства.Колонки.Добавить("ПредопределенныеЗначения");

					Для Каждого КлючевоеСвойство Из ЭлементПакета.Свойства Цикл
						НоваяСтрокаОР = ТабКлючевыеСвойства.Добавить();
						НоваяСтрокаОР.Имя = КлючевоеСвойство.Имя;
						НоваяСтрокаОР.Тип = ОбработатьТип(КлючевоеСвойство.Тип, ОбщиеПеременные).ТипСтрокой;
						НоваяСтрокаОР.НижняяГраница = КлючевоеСвойство.НижняяГраница;
						НоваяСтрокаОР.ПредопределенныеЗначения = МассивПредопределенныхЗначений(КлючевоеСвойство);
					КонецЦикла;
					
					мКлючевыеСвойства.Вставить(ЭлементПакета.Имя, ТабКлючевыеСвойства);
				ИначеЕсли Найти(ЭлементПакета.Имя, "Составной") <> 0 Тогда
					// Объект-составной тип
					МассивТипов = Новый Массив();
					Для Каждого СостТип Из ЭлементПакета.Свойства Цикл
						МассивТипов.Добавить(ОбработатьТип(СостТип.Тип, ОбщиеПеременные).ТипСтрокой);
					КонецЦикла;
					
					ОбщиеПеременные.СоставныеТипы.Вставить(ЭлементПакета.Имя, МассивТипов);
					ОбработатьЗначениеXDTO(ЭлементПакета,ОбщиеПеременные, Истина);
					мИсключаемыеОбъекты.Добавить(ЭлементПакета.Имя);
				Иначе
					// Если свойство одно - то это тип
					Если ЭлементПакета.Свойства.Количество() = 1 Тогда
						ОбработатьЗначениеXDTO(ЭлементПакета,ОбщиеПеременные, Истина);
					ИначеЕсли ЭлементПакета.Свойства.Количество() > 0 Тогда
						// Цикл по общим реквизитам
						ТабОбщиеРеквизиты = Новый ТаблицаЗначений;
						ТабОбщиеРеквизиты.Колонки.Добавить("Имя");
						ТабОбщиеРеквизиты.Колонки.Добавить("Тип");
						ТабОбщиеРеквизиты.Колонки.Добавить("СоставнойТип");
						ТабОбщиеРеквизиты.Колонки.Добавить("МассивТипов");
						ТабОбщиеРеквизиты.Колонки.Добавить("НижняяГраница");
						ТабОбщиеРеквизиты.Колонки.Добавить("ПредопределенныеЗначения");

						Для Каждого ОбщийРеквизит Из ЭлементПакета.Свойства Цикл
							НоваяСтрокаОР = ТабОбщиеРеквизиты.Добавить();
							НоваяСтрокаОР.Имя = ОбщийРеквизит.Имя;
							ПараметрыТипа = ОбработатьТип(ОбщийРеквизит.Тип, ОбщиеПеременные);
							НоваяСтрокаОР.Тип = ПараметрыТипа.ТипСтрокой;
							НоваяСтрокаОР.СоставнойТип = ПараметрыТипа.СоставнойТип;
							НоваяСтрокаОР.МассивТипов = ПараметрыТипа.МассивТипов;
							НоваяСтрокаОР.НижняяГраница = ОбщийРеквизит.НижняяГраница;
							НоваяСтрокаОР.ПредопределенныеЗначения = МассивПредопределенныхЗначений(ОбщийРеквизит);
						КонецЦикла;
						
						мОбщиеРеквизиты.Вставить(ЭлементПакета.Имя, ТабОбщиеРеквизиты);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбщиеПеременные.Вставить("ТабличныеЧасти", мТабличныеЧасти);
	ОбщиеПеременные.Вставить("ИсключаемыеОбъекты", мИсключаемыеОбъекты);
	ОбщиеПеременные.Вставить("ОбщиеРеквизиты", мОбщиеРеквизиты);
	ОбщиеПеременные.Вставить("КлючевыеСвойства", мКлючевыеСвойства);
	// Проход №2 Дополняем таблицу с табличными частями ссылками на объекты XDTO, содержащие реквизиты табличных частей.
	Для Каждого ЭлементПакета Из ОсновнойПакет Цикл
		Если ТипЗнч(ЭлементПакета) = Тип("ТипОбъектаXDTO") Тогда
			СтрокаТЧ = ОбщиеПеременные.ТабличныеЧасти.Найти(ЭлементПакета.Имя, "ТипТЧ");
			Если СтрокаТЧ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЧ.ОбъектТЧ = ЭлементПакета;
		КонецЕсли;
	КонецЦикла;
	
	// Проход №3. Создаем объекты формата, значения формата и свойства формата.
	Для Каждого ЭлементПакета Из ОсновнойПакет Цикл
		Если ТипЗнч(ЭлементПакета) = Тип("ТипОбъектаXDTO") Тогда
			ОбработатьОбъектXDTO(ЭлементПакета,, ОбщиеПеременные);
		ИначеЕсли ТипЗнч(ЭлементПакета) = Тип("ТипЗначенияXDTO") Тогда
			ОбработатьЗначениеXDTO(ЭлементПакета, ОбщиеПеременные);
		КонецЕсли;
	КонецЦикла;
	// Проход №4. Обрабатываем табличные части: если они общие для нескольких объектов, создаем для них общие объекты формата.
	Для Каждого ТЧ Из ОбщиеПеременные.ТабличныеЧасти Цикл
		Если ТЧ.КоличествоСсылок < 2 Тогда
			Продолжить;
		КонецЕсли;
		ТекОбъектФормата = НайтиСоздатьОбъектФормата(СокрЛП(ТЧ.ИмяТЧ), ОбщиеПеременные, Перечисления.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть);
		// Заполнение реквизитов ТЧ
		Нпп = 1;
		Для Каждого РеквизитТЧ Из ТЧ.ОбъектТЧ.Свойства Цикл
			НаименованиеРеквизита = РеквизитТЧ.Имя;
			// Вычисление типа
			ПараметрыТипа = ОбработатьТип(РеквизитТЧ.Тип, ОбщиеПеременные);
			Обязательное = (РеквизитТЧ.НижняяГраница = 1);
			СтруктураПараметров = ПодготовитьСтруктуруПараметровСвойствФормата(ТекОбъектФормата, НаименованиеРеквизита, ПараметрыТипа, Обязательное);
			СтруктураПараметров.Порядок = Нпп;
			СтруктураПараметров.ПредопределенныеЗначения = МассивПредопределенныхЗначений(РеквизитТЧ);
			ОбработатьСвойствоОбъекта(СтруктураПараметров, ОбщиеПеременные);
			Нпп = Нпп + 1;

		КонецЦикла;
		// Прописывание общей ТЧ в "частных" ТЧ
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка КАК Ссылка
		|ИЗ Справочник.СвойстваФормата
		|ГДЕ ВЫРАЗИТЬ(Тип КАК Строка(1000)) = &Тип И Владелец.Владелец = &ВерсияФормата
		|	И ЭтоГруппа = ИСТИНА И ОбъектХранительСвойств = """"
		|	";
		Запрос.УстановитьПараметр("Тип", СокрЛП(ТЧ.ИмяТЧ));
		Запрос.УстановитьПараметр("ВерсияФормата", ТекОбъектФормата.Владелец);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбъектТЧ = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектТЧ.ОбъектХранительСвойств = СокрЛП(ТЧ.ИмяТЧ);
			ОбъектТЧ.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть;
			ОбъектТЧ.Записать();
		КонецЦикла;
	КонецЦикла;
	
	
	Если НЕ (ОбщиеПеременные.ЗагрузитьНовыйФормат
		ИЛИ ОбщиеПеременные.ДобавлятьТолькоНовые) Тогда
		
		Для каждого Объект Из ОбщиеПеременные.ОбъектыФормата Цикл
			
			Если Объект.Ссылка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			УдаленныйОбъект = Объект.Ссылка.ПолучитьОбъект();
			УдаленныйОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	мФабрикаXDTO = Неопределено;
	Попытка
		УдалитьФайлы(ОбщиеПеременные.ФайлНаСервере);
	Исключение
	КонецПопытки;
	ПоместитьВоВременноеХранилище(Истина, АдресВременногоХранилища);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьОбъектXDTO(ЭлементПакета, СтруктураПараметров, ОбщиеПеременные)
	НаименованиеОбъекта = СокрЛП(ЭлементПакета.Имя);
	ТипОбщегоРеквизита = Неопределено;
	Если ОбщиеПеременные.ИсключаемыеОбъекты.Найти(НаименованиеОбъекта) <> Неопределено Тогда
		// Это тип - табличная часть или хранилище общих реквизитов (группа общих свойств).
		// Если это ТЧ - обработаем ее позже. Иначе - создадим группу общих свойств.
		Если ОбщиеПеременные.ТабличныеЧасти.Найти(НаименованиеОбъекта, "ИмяТЧ") <> Неопределено
			ИЛИ Найти(НаименованиеОбъекта, ".") > 0 Тогда
			Возврат;
		КонецЕсли;
		Если ОбщиеПеременные.СоставныеТипы.Свойство(НаименованиеОбъекта) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Найти(НаименованиеОбъекта, "КлючевыеСвойства") > 0 Тогда
		ТипОбщегоРеквизита = Перечисления.ТипыОбщихРеквизитов.КлючевыеСвойства;
	ИначеЕсли Найти(НаименованиеОбъекта, ".") = 0
		И ОбщиеПеременные.ОбщиеРеквизиты.Свойство(НаименованиеОбъекта) <> Неопределено Тогда
		ТипОбщегоРеквизита = Перечисления.ТипыОбщихРеквизитов.ГруппаОбщихСвойств;
	КонецЕсли;
	
	ТекОбъектФормата = НайтиСоздатьОбъектФормата(НаименованиеОбъекта, ОбщиеПеременные, ТипОбщегоРеквизита);
	Нпп = 1;
	Для Каждого СвойствоОбъекта Из ЭлементПакета.Свойства Цикл
		НаименованиеСвойства = СвойствоОбъекта.Имя;
		// Вычисление типа
		ПараметрыТипа = ОбработатьТип(СвойствоОбъекта.Тип, ОбщиеПеременные);
		Обязательное = (СвойствоОбъекта.НижняяГраница = 1);
		СтруктураПараметров = ПодготовитьСтруктуруПараметровСвойствФормата(ТекОбъектФормата, НаименованиеСвойства, ПараметрыТипа, Обязательное);
		СтруктураПараметров.Порядок = Нпп;
		СтруктураПараметров.ПредопределенныеЗначения = МассивПредопределенныхЗначений(СвойствоОбъекта);
		ОбработатьСвойствоОбъекта(СтруктураПараметров, ОбщиеПеременные);
		Нпп = Нпп + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьЗначениеXDTO(ЭлементПакета, ОбщиеПеременные, ТолькоТипыФормата = Ложь, ТипСтрокой = "")
	// Типы грузим в ТипыФормата
	НаименованиеОбъекта = ЭлементПакета.Имя;
	БазовыйТип = "";
	ПространствоИменБТ = "";
	СоставнойТип = Ложь;
	Если ТипЗнч(ЭлементПакета.БазовыйТип) = Тип("ТипЗначенияXDTO") Тогда

		БазовыйТип = ЭлементПакета.БазовыйТип.Имя;
		ДополнениеКТипу = ПолучитьДополнениеКТипу(ЭлементПакета, БазовыйТип);
		БазовыйТип = БазовыйТип + ДополнениеКТипу;
		ПространствоИменБТ = ЭлементПакета.БазовыйТип.URIПространстваИмен;
	КонецЕсли;
	ПространствоИмен = ЭлементПакета.URIПространстваИмен;
	Если НЕ ЗначениеЗаполнено(БазовыйТип) Тогда
		БазовыйТип = ТипСтрокой;
	КонецЕсли;
	Если Найти(НаименованиеОбъекта, "Составной") <> 0 Тогда
		СоставнойТип = Истина;
	КонецЕсли;
	
	ЗапросСсылкиНаТип = Новый Запрос;
	ЗапросСсылкиНаТип.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ Справочник.СвойстваФормата
	|ГДЕ Владелец.Владелец = &ВерсияФормата И ПометкаУдаления = ЛОЖЬ 
	|	И ВЫРАЗИТЬ(Тип КАК Строка(1000)) ПОДОБНО &ИмяТипа_Поиск";
	ЗапросСсылкиНаТип.УстановитьПараметр("ВерсияФормата", ОбщиеПеременные.ВерсияФормата);
	ЗапросСсылкиНаТип.УстановитьПараметр("ИмяТипа_Поиск", "%" + НаименованиеОбъекта + "%");
	РезультатЗапроса = ЗапросСсылкиНаТип.Выполнить();
	ВключатьВОписание = НЕ РезультатЗапроса.Пустой();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыФормата.Ссылка КАК Ссылка,
		|	ТипыФормата.БазовыйТип КАК БазовыйТип,
		|	ТипыФормата.ПространствоИмен КАК ПространствоИмен,
		|	ТипыФормата.ПространствоИменБазовогоТипа КАК ПространствоИменБТ,
		|	ТипыФормата.ВключатьВОписание КАК ВключатьВОписание,
		|	ТипыФормата.ПометкаУдаления КАК ПометкаУдаления,
		|	ТипыФормата.СоставнойТип КАК СоставнойТип,
		|	Количество(ТипыФорматаСостав.ТипФормата) КАК КоличествоСтрок
		|ИЗ Справочник.ТипыФормата КАК ТипыФормата
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыФормата.Состав КАК ТипыФорматаСостав
		|	ПО ТипыФормата.Ссылка = ТипыФорматаСостав.Ссылка
		|ГДЕ ТипыФормата.Владелец = &ВерсияФормата И ТипыФормата.Наименование = &ИмяТипа
		|	СГРУППИРОВАТЬ ПО ТипыФормата.Ссылка";
	Запрос.УстановитьПараметр("ВерсияФормата", ОбщиеПеременные.ВерсияФормата);
	Запрос.УстановитьПараметр("ИмяТипа", НаименованиеОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ ОбщиеПеременные.ДобавлятьТолькоНовые
			И (Выборка.ПометкаУдаления 
			ИЛИ Выборка.БазовыйТип <> БазовыйТип
			ИЛИ Выборка.ПространствоИменБТ <> ПространствоИменБТ
			ИЛИ Выборка.ВключатьВОписание <> ВключатьВОписание
			ИЛИ Выборка.ПространствоИмен <> ПространствоИмен
			ИЛИ Выборка.СоставнойТип <> СоставнойТип
			ИЛИ (Выборка.СоставнойТип И Выборка.КоличествоСтрок <> ЭлементПакета.Свойства.Количество())
			ИЛИ (Выборка.КоличествоСтрок = 0 И ЗначениеЗаполнено(БазовыйТип))) Тогда
			ТипФорматаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТипФорматаОбъект.ПометкаУдаления = Ложь;
			ТипФорматаОбъект.БазовыйТип = БазовыйТип;
			ТипФорматаОбъект.ПространствоИмен = ПространствоИмен;
			ТипФорматаОбъект.ПространствоИменБазовогоТипа = ПространствоИменБТ;
			ТипФорматаОбъект.ВключатьВОписание = ВключатьВОписание;
			ТипФорматаОбъект.СоставнойТип = СоставнойТип;
			ЗаполнитьСоставТипа(ТипФорматаОбъект, ЭлементПакета, ОбщиеПеременные);
			ТипФорматаОбъект.Записать();
		КонецЕсли;
		УдалитьИзОбъектовФормата(Выборка.Ссылка, ОбщиеПеременные);
	Иначе
		ТипФорматаОбъект = Справочники.ТипыФормата.СоздатьЭлемент();
		ТипФорматаОбъект.Владелец = ОбщиеПеременные.ВерсияФормата;
		ТипФорматаОбъект.Наименование = НаименованиеОбъекта;
		ТипФорматаОбъект.БазовыйТип = БазовыйТип;
		ТипФорматаОбъект.ПространствоИмен = ПространствоИмен;
		ТипФорматаОбъект.ПространствоИменБазовогоТипа = ПространствоИменБТ;
		ТипФорматаОбъект.ВключатьВОписание = ВключатьВОписание;
		ТипФорматаОбъект.СоставнойТип = СоставнойТип;
		ЗаполнитьСоставТипа(ТипФорматаОбъект, ЭлементПакета, ОбщиеПеременные);
		ТипФорматаОбъект.Записать();
	КонецЕсли;
	Если ТолькоТипыФормата Тогда
		Возврат;
	КонецЕсли;

	// Обрабатываем перечисления - грузим в ЗначенияФормата
	Если ЭлементПакета.Фасеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЭлементПакета.Фасеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ЭлементПакета.Фасеты.Перечисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеОбъекта = ЭлементПакета.Имя;
	ТекОбъектФормата = НайтиСоздатьОбъектФормата(НаименованиеОбъекта, ОбщиеПеременные);

	Для Каждого ЭлементПеречисления Из ЭлементПакета.Фасеты Цикл
		НаименованиеЗначения = СокрЛП(ЭлементПеречисления.Значение);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаЗначенияФормата();
		Запрос.УстановитьПараметр("ОбъектФормата", ТекОбъектФормата);
		Запрос.УстановитьПараметр("ИмяЗначения", НаименованиеЗначения);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УдалитьИзОбъектовФормата(Выборка.Ссылка, ОбщиеПеременные);
			Продолжить;
		КонецЕсли;
		ЗначениеФормата = Справочники.ЗначенияФормата.СоздатьЭлемент();
		ЗначениеФормата.Владелец = ТекОбъектФормата;
		ЗначениеФормата.Наименование = НаименованиеЗначения;
		ЗначениеФормата.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСоставТипа(ТипФорматаОбъект, ЭлементПакета, ОбщиеПеременные)
	ТипФорматаОбъект.Состав.Очистить();
	Если ТипФорматаОбъект.СоставнойТип Тогда
		Для Каждого СостТип Из ЭлементПакета.Свойства Цикл
			СтрСостав = ТипФорматаОбъект.Состав.Добавить();
			СтрСостав.ТипФормата = ОбработатьТип(СостТип.Тип, ОбщиеПеременные).ТипСтрокой;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ТипФорматаОбъект.БазовыйТип) Тогда
		НовСтр = ТипФорматаОбъект.Состав.Добавить();
		НовСтр.ТипФормата = ТипФорматаОбъект.БазовыйТип;
	КонецЕсли;
КонецПроцедуры

Функция МассивПредопределенныхЗначений(ЭлементПакета)
	Результат = Новый Массив;
	Попытка
		ФасетыСвойства = ЭлементПакета.Тип.Фасеты;
	Исключение
		Возврат Результат;
	КонецПопытки;
	Если ФасетыСвойства = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Если ФасетыСвойства.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Если ФасетыСвойства.Перечисления = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Для Каждого ЭлементПеречисления Из ФасетыСвойства Цикл
		СтроковоеЗначение = СокрЛП(ЭлементПеречисления.Значение);
		Если ЗначениеЗаполнено(СтроковоеЗначение) Тогда
			Результат.Добавить(СтроковоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПодготовитьСтруктуруПараметровСвойствФормата(ТекОбъектФормата, ИмяРеквизита, ПараметрыТипа, Обязательное)
	СтруктураПараметров = Новый Структура("ТекОбъектФормата, ИмяРеквизита, Обязательное",
						ТекОбъектФормата, ИмяРеквизита, Обязательное);
	СтруктураПараметров.Вставить("СоставнойТип", ПараметрыТипа.СоставнойТип);
	СтруктураПараметров.Вставить("ТипРеквизита", ПараметрыТипа.ТипСтрокой);
	СтруктураПараметров.Вставить("МассивТипов", ПараметрыТипа.МассивТипов);
	СтруктураПараметров.Вставить("ОбъектХранительСвойств", "");
	СтруктураПараметров.Вставить("Порядок", 0);
	СтруктураПараметров.Вставить("ЭтоГруппа", Ложь);
	СтруктураПараметров.Вставить("ТипОбщегоСвойства");
	СтруктураПараметров.Вставить("РодительРеквизита", Справочники.СвойстваФормата.ПустаяСсылка());
	СтруктураПараметров.Вставить("ВложенныеСвойства");
	СтруктураПараметров.Вставить("ПредопределенныеЗначения", Новый Массив);
	Возврат СтруктураПараметров;
КонецФункции

Процедура ДобавитьСвойствоФормата(СтруктураПараметров, ОбщиеПеременные)
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСвойстваФормата();
	Запрос.УстановитьПараметр("ОбъектФормата", СтруктураПараметров.ТекОбъектФормата);
	Запрос.УстановитьПараметр("ИмяСвойства", СтруктураПараметров.ИмяРеквизита);
	Запрос.УстановитьПараметр("ЭтоГруппа", СтруктураПараметров.ЭтоГруппа);
	Запрос.УстановитьПараметр("Родитель", СтруктураПараметров.РодительРеквизита);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ ОбщиеПеременные.ДобавлятьТолькоНовые Тогда
			УдалитьИзОбъектовФормата(Выборка.Ссылка, ОбщиеПеременные);
			Если СокрЛП(Выборка.Тип) <> СтруктураПараметров.ТипРеквизита ИЛИ Выборка.ПометкаУдаления
				ИЛИ Выборка.Обязательное <> СтруктураПараметров.Обязательное
				ИЛИ Выборка.Порядок <> СтруктураПараметров.Порядок
				ИЛИ Выборка.ОбъектХранительСвойств <> СтруктураПараметров.ОбъектХранительСвойств
				ИЛИ Выборка.ТипОбщегоСвойства <> СтруктураПараметров.ТипОбщегоСвойства
				ИЛИ Выборка.СоставнойТип <> СтруктураПараметров.СоставнойТип
				ИЛИ (НЕ СтруктураПараметров.ЭтоГруппа И СтруктураПараметров.МассивТипов.Количество() <> Выборка.КоличествоСтрок) Тогда
				СвойствоФормата = Выборка.Ссылка.ПолучитьОбъект();
				СвойствоФормата.ПометкаУдаления = Ложь;
				СвойствоФормата.Тип = СтруктураПараметров.ТипРеквизита;
				СвойствоФормата.ОбъектХранительСвойств = СтруктураПараметров.ОбъектХранительСвойств;
				СвойствоФормата.Порядок = СтруктураПараметров.Порядок;
				СвойствоФормата.ТипОбщегоСвойства = СтруктураПараметров.ТипОбщегоСвойства;
				СвойствоФормата.Родитель = СтруктураПараметров.РодительРеквизита;
				СвойствоФормата.Обязательное = СтруктураПараметров.Обязательное;
				Если НЕ СтруктураПараметров.ЭтоГруппа Тогда
					СвойствоФормата.СоставнойТип = СтруктураПараметров.СоставнойТип;
					ЗаполнитьСоставТиповСвойства(СвойствоФормата, СтруктураПараметров.МассивТипов);
				КонецЕсли;
				СвойствоФормата.Записать();
			КонецЕсли;
		КонецЕсли;
		ОбработатьГруппуСвойствФормата(Выборка.Ссылка, СтруктураПараметров, ОбщиеПеременные);
	Иначе
		Если СтруктураПараметров.ЭтоГруппа Тогда
			СвойствоФормата = Справочники.СвойстваФормата.СоздатьГруппу();
		Иначе 
			СвойствоФормата = Справочники.СвойстваФормата.СоздатьЭлемент();
		КонецЕсли;
		СвойствоФормата.Владелец = СтруктураПараметров.ТекОбъектФормата;
		СвойствоФормата.Наименование = СтруктураПараметров.ИмяРеквизита;
		СвойствоФормата.Тип = Лев(СтруктураПараметров.ТипРеквизита, 1000);
		СвойствоФормата.ОбъектХранительСвойств = СтруктураПараметров.ОбъектХранительСвойств;
		СвойствоФормата.Порядок = СтруктураПараметров.Порядок;
		СвойствоФормата.ТипОбщегоСвойства = СтруктураПараметров.ТипОбщегоСвойства;
		СвойствоФормата.Родитель = СтруктураПараметров.РодительРеквизита;
		СвойствоФормата.Обязательное = СтруктураПараметров.Обязательное;
		Если НЕ СтруктураПараметров.ЭтоГруппа Тогда
			СвойствоФормата.СоставнойТип = СтруктураПараметров.СоставнойТип;
			ЗаполнитьСоставТиповСвойства(СвойствоФормата, СтруктураПараметров.МассивТипов);
		КонецЕсли;
		СвойствоФормата.Записать();
		ОбработатьГруппуСвойствФормата(СвойствоФормата.Ссылка, СтруктураПараметров, ОбщиеПеременные);
	КонецЕсли;
	// Возможно, для свойства заданы возможные значения.
	Для Каждого НаименованиеЗначения Из СтруктураПараметров.ПредопределенныеЗначения Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаЗначенияФормата();
		Запрос.УстановитьПараметр("ОбъектФормата", СвойствоФормата.Ссылка);
		Запрос.УстановитьПараметр("ИмяЗначения", НаименованиеЗначения);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УдалитьИзОбъектовФормата(Выборка.Ссылка, ОбщиеПеременные);
			Продолжить;
		КонецЕсли;
		ЗначениеФормата = Справочники.ЗначенияФормата.СоздатьЭлемент();
		ЗначениеФормата.Владелец = СвойствоФормата.Ссылка;
		ЗначениеФормата.Наименование = НаименованиеЗначения;
		ЗначениеФормата.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСоставТиповСвойства(СвойствоФормата, МассивТипов)
	СвойствоФормата.Состав.Очистить();
	Для Каждого ТекТип Из МассивТипов Цикл
		НовСтр = СвойствоФормата.Состав.Добавить();
		НовСтр.ТипФормата = ТекТип;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьГруппуСвойствФормата(СвойствоФорматаГруппа, СтруктураПараметров, ОбщиеПеременные)
	Если НЕ СтруктураПараметров.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметров.ВложенныеСвойства) Тогда
		Нпп = 1;
		Для Каждого ОбщийРеквизит Из СтруктураПараметров.ВложенныеСвойства Цикл
			мОбязательное = (ОбщийРеквизит.НижняяГраница = 1);
			СтруктураПараметровТипа = Новый Структура("СоставнойТип,ТипСтрокой", Ложь, ОбщийРеквизит.Тип);
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ОбщийРеквизит.Тип);
			СтруктураПараметровТипа.Вставить("МассивТипов", МассивТипов);
			СтруктураПараметровСвойствоТЧ = ПодготовитьСтруктуруПараметровСвойствФормата(СтруктураПараметров.ТекОбъектФормата, 
											ОбщийРеквизит.Имя, СтруктураПараметровТипа, мОбязательное);
			СтруктураПараметровСвойствоТЧ.РодительРеквизита = СвойствоФорматаГруппа;
			СтруктураПараметровСвойствоТЧ.Порядок = Нпп;
			СтруктураПараметровСвойствоТЧ.ПредопределенныеЗначения = ОбщийРеквизит.ПредопределенныеЗначения;
			ОбработатьСвойствоОбъекта(СтруктураПараметровСвойствоТЧ, ОбщиеПеременные);
			Нпп = Нпп + 1;
		КонецЦикла;
	Иначе
		СтрокаТЧ = ОбщиеПеременные.ТабличныеЧасти.Найти(СтруктураПараметров.ТипРеквизита, "ИмяТЧ");
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаТЧ.КоличествоСсылок = СтрокаТЧ.КоличествоСсылок + 1;
		Нпп = 1;
		Для Каждого РеквизитТЧ Из СтрокаТЧ.ОбъектТЧ.Свойства Цикл
			НаименованиеРеквизита = РеквизитТЧ.Имя;
			// Вычисление типа
			ПараметрыТипа = ОбработатьТип(РеквизитТЧ.Тип, ОбщиеПеременные);
			мОбязательное = (РеквизитТЧ.НижняяГраница = 1);
			СтруктураПараметровСвойствоТЧ = ПодготовитьСтруктуруПараметровСвойствФормата(СтруктураПараметров.ТекОбъектФормата, 
											НаименованиеРеквизита, ПараметрыТипа, мОбязательное);
			СтруктураПараметровСвойствоТЧ.РодительРеквизита = СвойствоФорматаГруппа;
			СтруктураПараметровСвойствоТЧ.Порядок = Нпп;
			СтруктураПараметровСвойствоТЧ.ПредопределенныеЗначения = МассивПредопределенныхЗначений(РеквизитТЧ);
			ОбработатьСвойствоОбъекта(СтруктураПараметровСвойствоТЧ, ОбщиеПеременные);
			Нпп = Нпп + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСвойствоОбъекта(СтруктураПараметров, ОбщиеПеременные)
	// Возможно, это свойство является табличной частью - поищем его тип среди табличных частей.
	СтрокаТЧ = ОбщиеПеременные.ТабличныеЧасти.Найти(СтруктураПараметров.ТипРеквизита, "ИмяТЧ");
	Если СтрокаТЧ <> Неопределено Тогда
		СтруктураПараметров.ЭтоГруппа = Истина;
		Если СтрокаТЧ.КоличествоСсылок > 1 Тогда
			СтруктураПараметров.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть;
			СтруктураПараметров.ОбъектХранительСвойств = СтруктураПараметров.ТипРеквизита;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ТипОбщегоСвойства) Тогда
		// Возможно, это ключевое свойство.
		мТаблицаРеквизитов = Неопределено;
		Если СтруктураПараметров.ИмяРеквизита = "КлючевыеСвойства" Тогда
			ОбщиеПеременные.КлючевыеСвойства.Свойство(СтруктураПараметров.ТипРеквизита, мТаблицаРеквизитов);
		КонецЕсли;
		Если мТаблицаРеквизитов <> Неопределено Тогда
			СтруктураПараметров.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.КлючевыеСвойства;
			СтруктураПараметров.ОбъектХранительСвойств = СтруктураПараметров.ТипРеквизита;
			СтруктураПараметров.ВложенныеСвойства = мТаблицаРеквизитов;
			СтруктураПараметров.ЭтоГруппа = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ТипОбщегоСвойства) Тогда
		// Возможно, это группа общих свойств.
		мТаблицаРеквизитов = Неопределено;
		Если СокрЛП(СтруктураПараметров.ТипРеквизита) <> "" И Найти(СтруктураПараметров.ТипРеквизита, ".") = 0 
			И Найти(СтруктураПараметров.ТипРеквизита, "(") = 0 
			И Найти(СтруктураПараметров.ТипРеквизита, " ") = 0 
			И Найти(СтруктураПараметров.ТипРеквизита, ",") = 0 
			И СтруктураПараметров.СоставнойТип = Ложь Тогда
			ОбщиеПеременные.ОбщиеРеквизиты.Свойство(СтруктураПараметров.ТипРеквизита, мТаблицаРеквизитов);
		КонецЕсли;
		Если мТаблицаРеквизитов <> Неопределено Тогда
			СтруктураПараметров.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ГруппаОбщихСвойств;
			СтруктураПараметров.ОбъектХранительСвойств = СтруктураПараметров.ТипРеквизита;
			СтруктураПараметров.ВложенныеСвойства = мТаблицаРеквизитов;
			СтруктураПараметров.ЭтоГруппа = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьСвойствоФормата(СтруктураПараметров, ОбщиеПеременные);
КонецПроцедуры

Функция ОбработатьТип(ТипЗначенияХДТО, ОбщиеПеременные)
	СтруктураРезультат = Новый Структура("ТипСтрокой, СоставнойТип, МассивТипов", "", Ложь, Новый Массив);
	Если ТипЗнч(ТипЗначенияХДТО) = Тип("ТипЗначенияXDTO") Тогда
		// Может быть объединение типов
		Если ЗначениеЗаполнено(ТипЗначенияХДТО.ТипыЧленовОбъединения)
			И ТипЗначенияХДТО.ТипыЧленовОбъединения.Количество() > 0 Тогда
			СтруктураРезультат.СоставнойТип = Истина;
			Для Каждого ЕдТип Из ТипЗначенияХДТО.ТипыЧленовОбъединения Цикл
				ИмяЕдТипа = ОбработатьТип(ЕдТип, ОбщиеПеременные).ТипСтрокой;
				Если СокрЛП(ИмяЕдТипа) <> "" Тогда
					СтруктураРезультат.МассивТипов.Добавить(ИмяЕдТипа);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ИмяТипа = ТипЗначенияХДТО.Имя;
			Если СокрЛП(ИмяТипа) = "" Тогда
				ИмяТипа = ТипЗначенияХДТО.БазовыйТип.Имя;
			КонецЕсли;
			ДополнениеКТипу = ПолучитьДополнениеКТипу(ТипЗначенияХДТО, ИмяТипа);
			СтруктураРезультат.ТипСтрокой = ИмяТипа + ДополнениеКТипу;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТипЗначенияХДТО) = Тип("ТипОбъектаXDTO") И СокрЛП(ТипЗначенияХДТО) = "" Тогда
		// Составной тип из нескольких свойств
		СтруктураРезультат.СоставнойТип = Истина;
		Для Каждого СвойствоОбъекта Из ТипЗначенияХДТО.Свойства Цикл
			ТипСвойстваСтрокой = ОбработатьТип(СвойствоОбъекта.Тип, ОбщиеПеременные).ТипСтрокой;
			Если ТипСвойстваСтрокой = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураРезультат.МассивТипов.Добавить(ТипСвойстваСтрокой);
		КонецЦикла;
	Иначе
		ПростойТип = СокрЛП(ТипЗначенияХДТО);
		ПозицияРазделителя = Найти(ПростойТип, "}");
		Если ПозицияРазделителя = 0 Тогда
			СтруктураРезультат.ТипСтрокой = ПростойТип;
		Иначе
			СтруктураРезультат.ТипСтрокой = Прав(ПростойТип, СтрДлина(ПростойТип)-ПозицияРазделителя);
		КонецЕсли;
	КонецЕсли;
	МассивТиповСоставногоТипа = Неопределено;
	Если ЗначениеЗаполнено(СтруктураРезультат.ТипСтрокой) Тогда
		Если Найти(СтруктураРезультат.ТипСтрокой, ".") = 0 
			И Найти(СтруктураРезультат.ТипСтрокой, " ") = 0
			И Найти(СтруктураРезультат.ТипСтрокой, "(") = 0
			И ОбщиеПеременные.СоставныеТипы.Свойство(СтруктураРезультат.ТипСтрокой, МассивТиповСоставногоТипа) Тогда
			// Если тип ссылается на составной тип, заполним состав составного типа.
			СтруктураРезультат.СоставнойТип = Истина;
			Для Каждого СостТип Из МассивТиповСоставногоТипа Цикл
				СтруктураРезультат.МассивТипов.Добавить(СостТип);
			КонецЦикла;
		Иначе
			СтруктураРезультат.МассивТипов.Добавить(СтруктураРезультат.ТипСтрокой);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

Функция ПолучитьДополнениеКТипу(ТипЗначенияХДТО, ИмяТипа)
	Результат = "";
	СтрокаПростыеТипы = "#string#int#dec#decimal#";
	Если Найти(СтрокаПростыеТипы, "#"+ИмяТипа+"#") = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Если ТипЗначенияХДТО.Фасеты = Неопределено
		ИЛИ ТипЗначенияХДТО.Фасеты.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Для каждого Фасет Из ТипЗначенияХДТО.Фасеты Цикл
		ТипФасета = СокрЛП(Фасет.Вид);
		Если Найти(ТипФасета, "разряд") > 0 ИЛИ Найти(ТипФасета, "длина") Тогда
			Результат = Результат + СокрЛП(Фасет.Значение) + ",";
		КонецЕсли;
	КонецЦикла;
	Если Результат <> "" Тогда
		Результат = " (" + Лев(Результат, СтрДлина(Результат)-1) + ")";
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция НайтиСоздатьОбъектФормата(НаименованиеОбъекта, ОбщиеПеременные, ТипОбщегоРеквизита = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка,
			|	ПометкаУдаления
			|ИЗ Справочник.ОбъектыФормата
			|ГДЕ Владелец = &Формат И Наименование = &ИмяОбъекта
			|	И (ТипОбщегоРеквизита = &ТипОбщегоРеквизита 
			|		ИЛИ &ТипОбщегоРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ПустаяСсылка))
			|";
	Запрос.УстановитьПараметр("Формат", ОбщиеПеременные.ВерсияФормата);
	Запрос.УстановитьПараметр("ИмяОбъекта", НаименованиеОбъекта);
	Запрос.УстановитьПараметр("ТипОбщегоРеквизита", ?(ТипОбщегоРеквизита = Неопределено, Перечисления.ТипыОбщихРеквизитов.ПустаяСсылка(), ТипОбщегоРеквизита));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекОбъектФормата = Выборка.Ссылка;
		Если Выборка.ПометкаУдаления Тогда
			СпрОбъект = ТекОбъектФормата.ПолучитьОбъект();
			СпрОбъект.ПометкаУдаления = Ложь;
			СпрОбъект.Записать();
		КонецЕсли;
		УдалитьИзОбъектовФормата(ТекОбъектФормата, ОбщиеПеременные);
	Иначе
		ОбъектФормата = Справочники.ОбъектыФормата.СоздатьЭлемент();
		ОбъектФормата.Владелец = ОбщиеПеременные.ВерсияФормата;
		ОбъектФормата.Наименование = НаименованиеОбъекта;
		ОбъектФормата.ТипОбщегоРеквизита = ТипОбщегоРеквизита;
		ОбъектФормата.Записать();
		ТекОбъектФормата = ОбъектФормата.Ссылка;
	КонецЕсли;
	Возврат ТекОбъектФормата;
КонецФункции

Процедура ПолучитьОбъектыФормата(ОбщиеПеременные)
	
	Если ОбщиеПеременные.ЗагрузитьНовыйФормат
		ИЛИ ОбщиеПеременные.ДобавлятьТолькоНовые Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Объекты.Ссылка
	                      |ИЗ
	                      |	Справочник.ОбъектыФормата КАК Объекты
	                      |ГДЕ
	                      |	Объекты.Владелец = &ВерсияФормата
	                      |	И Объекты.ЭтоГруппа = ЛОЖЬ
	                      |	И Объекты.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Свойства.Ссылка
	                      |ИЗ
	                      |	Справочник.СвойстваФормата КАК Свойства
	                      |ГДЕ
	                      |	Свойства.Владелец.Владелец = &ВерсияФормата
	                      |	И Свойства.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Значения.Ссылка
	                      |ИЗ
	                      |	Справочник.ЗначенияФормата КАК Значения
	                      |ГДЕ
	                      |	Значения.Владелец.Владелец = &ВерсияФормата
	                      |	И Значения.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Типы.Ссылка
	                      |ИЗ
	                      |	Справочник.ТипыФормата КАК Типы
	                      |ГДЕ
	                      |	Типы.Владелец = &ВерсияФормата
	                      |	И Типы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ВерсияФормата", ОбщиеПеременные.ВерсияФормата);
	
	мОбъектыФормата = Запрос.Выполнить().Выгрузить();
	
	мОбъектыФормата.Индексы.Добавить("Ссылка");
	ОбщиеПеременные.Вставить("ОбъектыФормата", мОбъектыФормата);
КонецПроцедуры 

Процедура УдалитьИзОбъектовФормата(Объект, ОбщиеПеременные)
	
	Если ОбщиеПеременные.ЗагрузитьНовыйФормат
		ИЛИ ОбщиеПеременные.ДобавлятьТолькоНовые Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НайденнаяСтрока = ОбщиеПеременные.ОбъектыФормата.Найти(Объект, "Ссылка");
	
	Если НайденнаяСтрока <> Неопределено Тогда
		
		ОбщиеПеременные.ОбъектыФормата.Удалить(НайденнаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры 

Функция ВыделитьНомерВерсииФормата(ОбщиеПеременные)
	НомерВерсии = "";
	ДлинаСтрокиПакета = СтрДлина(СокрЛП(ОбщиеПеременные.ИмяОсновногоПакетаXDTO));
	Для НомерПозиции = 1 По ДлинаСтрокиПакета Цикл
		ТекСимвол = Сред(СокрЛП(ОбщиеПеременные.ИмяОсновногоПакетаXDTO), ДлинаСтрокиПакета - НомерПозиции + 1, 1);
		Если ТекСимвол = "/" Тогда
			НомерВерсии = Прав(СокрЛП(ОбщиеПеременные.ИмяОсновногоПакетаXDTO), НомерПозиции-1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НомерВерсии;
КонецФункции

Функция ТекстЗапросаСвойстваФормата()
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваФормата.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(СвойстваФормата.Тип КАК Строка(1000)) КАК Тип,
	|	СвойстваФормата.ПометкаУдаления КАК ПометкаУдаления,
	|	СвойстваФормата.ОбъектХранительСвойств КАК ОбъектХранительСвойств,
	|	СвойстваФормата.Родитель КАК Родитель,
	|	СвойстваФормата.ТипОбщегоСвойства КАК ТипОбщегоСвойства,
	|	СвойстваФормата.Порядок КАК Порядок,
	|	СвойстваФормата.Обязательное КАК Обязательное,
	|	ВЫБОР КОГДА СвойстваФормата.ЭтоГруппа ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ СвойстваФормата.СоставнойТип
	|	КОНЕЦ 							КАК СоставнойТип,
	|	Количество(СоставСвойств.ТипФормата) КАК КоличествоСтрок
	|ИЗ Справочник.СвойстваФормата КАК СвойстваФормата
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвойстваФормата.Состав КАК СоставСвойств
	|ПО СоставСвойств.Ссылка = СвойстваФормата.Ссылка
	|ГДЕ СвойстваФормата.Владелец = &ОбъектФормата И СвойстваФормата.Наименование = &ИмяСвойства
	|	И СвойстваФормата.ЭтоГруппа = &ЭтоГруппа 
	|	И СвойстваФормата.Родитель = &Родитель
	|СГРУППИРОВАТЬ ПО СвойстваФормата.Ссылка";
КонецФункции

Функция ТекстЗапросаЗначенияФормата()
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка КАК Ссылка
	|ИЗ Справочник.ЗначенияФормата
	|ГДЕ Владелец = &ОбъектФормата И Наименование = &ИмяЗначения";
КонецФункции

#КонецОбласти
#КонецЕсли
