#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

// Подготовка модуля менеджера обмена через универсальный формат.
// Возвращаемое значение: 
//  ТекстовыйДокумент - содержит текст модуля.
Функция ВыполнитьВыгрузкуМодулей() Экспорт
	МакетТекстовМодулей = ПолучитьМакет("ШаблоныТекстовМодулей");
	
	ОбщийТекстМодуля = Новый ТекстовыйДокумент;
	// Первая строка - имя конвертации.
	СтрокаЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '// Конвертация %1 от %2'"),
		Конвертация.Наименование,
		ТекущаяДатаСеанса());
	
	ОбщийТекстМодуля.ДобавитьСтроку(СтрокаЗаголовка);
	ТекстПроцедурыВызоваОбработчика = "";
	ТекстФункцииВызоваОбработчика = "";

	ОбщийТекстМодуля.ДобавитьСтроку("#Область ПроцедурыКонвертации");
	ТекстПроцедуры_Конвертация = ЗаполнитьТекстПроцедурыКонвертации(МакетТекстовМодулей);
	ОбщийТекстМодуля.ДобавитьСтроку(ТекстПроцедуры_Конвертация);
	ОбщийТекстМодуля.ДобавитьСтроку("#КонецОбласти");

	ОбщийТекстМодуля.ДобавитьСтроку("#Область ПОД");
	ТекстПроцедуры_ПОД = ЗаполнитьТекстПроцедурыПОД(МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика, ТекстФункцииВызоваОбработчика);
	ОбщийТекстМодуля.ДобавитьСтроку(ТекстПроцедуры_ПОД);
	ОбщийТекстМодуля.ДобавитьСтроку("#КонецОбласти");

	ОбщийТекстМодуля.ДобавитьСтроку("#Область ПКО");
	ТекстПроцедуры_ПКО = ЗаполнитьТекстПроцедурыПКО(МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика);
	ОбщийТекстМодуля.ДобавитьСтроку(ТекстПроцедуры_ПКО);
	ОбщийТекстМодуля.ДобавитьСтроку("#КонецОбласти");

	ОбщийТекстМодуля.ДобавитьСтроку("#Область ПКПД");
	ТекстПроцедуры_ПКПД = ЗаполнитьТекстПроцедурыПКПД(МакетТекстовМодулей);
	ОбщийТекстМодуля.ДобавитьСтроку(ТекстПроцедуры_ПКПД);
	ОбщийТекстМодуля.ДобавитьСтроку("#КонецОбласти");

	ОбщийТекстМодуля.ДобавитьСтроку("#Область Алгоритмы");
	ТекстПроцедуры_Алгоритмы = ЗаполнитьТекстПроцедурыАлгоритмы(МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика);
	ОбщийТекстМодуля.ДобавитьСтроку(ТекстПроцедуры_Алгоритмы);
	ОбщийТекстМодуля.ДобавитьСтроку("#КонецОбласти");

	ОбщийТекстМодуля.ДобавитьСтроку("#Область Параметры");
	ТекстПроцедуры_Параметры = ЗаполнитьТекстПроцедурыПараметры(МакетТекстовМодулей);
	ОбщийТекстМодуля.ДобавитьСтроку(ТекстПроцедуры_Параметры);
	ОбщийТекстМодуля.ДобавитьСтроку("#КонецОбласти");
	
	ОбщийТекстМодуля.ДобавитьСтроку("#Область ОбщегоНазначения");
	ТекстПроцедуры_Общие = ЗаполнитьТекстПроцедурыОбщие(МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика, ТекстФункцииВызоваОбработчика);
	ОбщийТекстМодуля.ДобавитьСтроку(ТекстПроцедуры_Общие);
	ОбщийТекстМодуля.ДобавитьСтроку("#КонецОбласти");
	
	КоличествоСтрок = ОбщийТекстМодуля.КоличествоСтрок();
	Для ОбратныйСчетчик = 0 По КоличествоСтрок - 1 Цикл
		
		НомерСтроки = КоличествоСтрок - ОбратныйСчетчик;
		
		Строка = ОбщийТекстМодуля.ПолучитьСтроку(НомерСтроки);
		Если Найти(Строка, "---") > 0 Тогда
			ОбщийТекстМодуля.УдалитьСтроку(НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Стр = ОбщийТекстМодуля.ПолучитьТекст();
	ОбщийТекстМодуля.УстановитьТекст(Стр);
	
	Возврат ОбщийТекстМодуля;
	

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьТекстПроцедурыКонвертации(МакетТекстовМодулей)
	
	ТекстПроцедуры = Новый ТекстовыйДокумент;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Конвертации.АлгоритмПередКонвертацией КАК АлгоритмПередКонвертацией,
	|	Конвертации.АлгоритмПослеКонвертации КАК АлгоритмПослеКонвертации,
	|	Конвертации.АлгоритмПередОтложеннымЗаполнением КАК АлгоритмПередОтложеннымЗаполнением
	|ИЗ
	|	Справочник.Конвертации КАК Конвертации
	|ГДЕ
	|	Конвертации.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Конвертация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТекстПроцедуры.ДобавитьСтроку("Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт");
	ТекстПроцедуры.ДобавитьСтроку(ДобавитьОтступыВСтроку(Выборка.АлгоритмПередКонвертацией));
	ТекстПроцедуры.ДобавитьСтроку("КонецПроцедуры");
	ТекстПроцедуры.ДобавитьСтроку("");
	
	ТекстПроцедуры.ДобавитьСтроку("Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт");
	ТекстПроцедуры.ДобавитьСтроку(ДобавитьОтступыВСтроку(Выборка.АлгоритмПослеКонвертации));
	ТекстПроцедуры.ДобавитьСтроку("КонецПроцедуры");
	ТекстПроцедуры.ДобавитьСтроку("");

	
	ТекстПроцедуры.ДобавитьСтроку("Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт");
	ТекстПроцедуры.ДобавитьСтроку(ДобавитьОтступыВСтроку(Выборка.АлгоритмПередОтложеннымЗаполнением));
	ТекстПроцедуры.ДобавитьСтроку("КонецПроцедуры");

	
	Возврат ТекстПроцедуры.ПолучитьТекст();
	
КонецФункции

Функция ЗаполнитьТекстПроцедурыПОД(МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика, ТекстФункцииВызоваОбработчика)
	
	ВсяПроцедура = Новый ТекстовыйДокумент;
	
	ЗапросПОД = Новый Запрос;
	ЗапросПОД.Текст = 
	"ВЫБРАТЬ
	|	ПОД.Ссылка,
	|	0 КАК Направление
	|ПОМЕСТИТЬ ТабПравил
	|ИЗ
	|	Справочник.ПравилаОбработкиДанных КАК ПОД
	|ГДЕ
	|	ПОД.ИспользоватьДляОтправки = ИСТИНА
	|	И ПОД.ИспользоватьДляПолучения = ЛОЖЬ
	|	И НЕ ПОД.Отключить
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПОД.Ссылка,
	|	1
	|ИЗ
	|	Справочник.ПравилаОбработкиДанных КАК ПОД
	|ГДЕ
	|	ПОД.ИспользоватьДляОтправки = ЛОЖЬ
	|	И ПОД.ИспользоватьДляПолучения = ИСТИНА
	|	И НЕ ПОД.Отключить
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПОД.Ссылка,
	|	2
	|ИЗ
	|	Справочник.ПравилаОбработкиДанных КАК ПОД
	|ГДЕ
	|	ПОД.ИспользоватьДляОтправки = ИСТИНА
	|	И ПОД.ИспользоватьДляПолучения = ИСТИНА
	|	И НЕ ПОД.Отключить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПравил.Ссылка КАК Ссылка,
	|	ТабПравил.Ссылка.ПравилоКонвертацииОбъекта КАК ПравилоКонвертацииОбъекта,
	|	ТабПравил.Ссылка.Наименование КАК Наименование,
	|	ТабПравил.Ссылка.Наименование КАК Код,
	|	ТабПравил.Ссылка.ОбъектВыборки КАК ОбъектВыборки,
	|	ВЫБОР
	|		КОГДА ТабПравил.Ссылка.ИспользоватьДляОтправки
	|			ТОГДА ТабПравил.Ссылка.ОбъектВыборки
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОбъектКонфигурации,
	|	ТабПравил.Ссылка.ИспользоватьДляОтправки КАК ИспользоватьДляОтправки,
	|	ТабПравил.Ссылка.ИспользоватьДляПолучения КАК ИспользоватьДляПолучения,
	|	ТабПравил.Ссылка.АлгоритмПриОбработке КАК ПриОбработке,
	|	ВЫБОР
	|		КОГДА ТабПравил.Ссылка.ИспользоватьДляОтправки
	|			ТОГДА ТабПравил.Ссылка.АлгоритмВыборкаДанных
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВыборкаДанных,
	|	ВЫБОР
	|		КОГДА ТабПравил.Ссылка.ИспользоватьДляОтправки
	|			ТОГДА ОбъектыКонф.Тип
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипОбъектаВыборки,
	|	ТабПравил.Направление КАК Направление,
	|	ТабПравил.Ссылка.ОчисткаДанных КАК ОчисткаДанных
	|ИЗ
	|	ТабПравил КАК ТабПравил
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Объекты КАК ОбъектыКонф
	|		ПО (ОбъектыКонф.Владелец = &Конфигурация)
	|			И ТабПравил.Ссылка.ОбъектВыборки = ОбъектыКонф.Наименование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставыКонвертаций КАК СоставыКонвертаций
	|		ПО (СоставыКонвертаций.ЭлементКонвертации = ТабПравил.Ссылка)
	|			И (СоставыКонвертаций.Владелец = &Конвертация)
	|			И (СоставыКонвертаций.Отключить = ЛОЖЬ)
	|ГДЕ
	|	ТабПравил.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Направление,
	|	ТабПравил.Ссылка.Наименование
	|ИТОГИ ПО
	|	Направление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПКО.ПравилоКонвертацииОбъекта КАК ПКО,
	|	ТабПКО.Ссылка КАК ПОД
	|ИЗ
	|	Справочник.ПравилаОбработкиДанных.ПравилаКонвертацииОбъектов КАК ТабПКО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПравил КАК ТабПравил
	|		ПО ТабПКО.Ссылка = ТабПравил.Ссылка";
	ЗапросПОД.УстановитьПараметр("Конвертация", Конвертация);
	ЗапросПОД.УстановитьПараметр("Конфигурация", Конвертация.Конфигурация);
	
	ТелоПроцедуры = Новый ТекстовыйДокумент;
	
	РезультатЗапроса = ЗапросПОД.ВыполнитьПакет();
	ВыборкаПоНаправлению = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЕслиОткрыто = Ложь;
	Пока ВыборкаПоНаправлению.Следующий() Цикл
		
		Если ВыборкаПоНаправлению.Направление = 0 Тогда
			ТелоПроцедуры.ДобавитьСтроку("Если НаправлениеОбмена = ""Отправка"" Тогда");
			ТелоПроцедуры.ДобавитьСтроку(Символы.Таб + "Если ПравилаОбработкиДанных.Колонки.Найти(""ОчисткаДанных"") = Неопределено Тогда");
			ТелоПроцедуры.ДобавитьСтроку(Символы.Таб + Символы.Таб + "ПравилаОбработкиДанных.Колонки.Добавить(""ОчисткаДанных"");");
			ТелоПроцедуры.ДобавитьСтроку(Символы.Таб + "КонецЕсли;");
			ЕслиОткрыто = Истина;
		ИначеЕсли ВыборкаПоНаправлению.Направление = 1 Тогда
			Если Не ЕслиОткрыто Тогда
				Строка = "Если";
			Иначе
				Строка = "ИначеЕсли";
			КонецЕсли;
			ТелоПроцедуры.ДобавитьСтроку(Строка + " НаправлениеОбмена = ""Получение"" Тогда");
			ЕслиОткрыто = Истина;
		Иначе
			Если ЕслиОткрыто Тогда
				ТелоПроцедуры.ДобавитьСтроку("КонецЕсли;");
				ЕслиОткрыто = Ложь;
			КонецЕсли;
		КонецЕсли;
	
		ВыборкаДетальная = ВыборкаПоНаправлению.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			Строка = "ДобавитьПОД_" + ВыборкаДетальная.Наименование + "(ПравилаОбработкиДанных);";
			Если ЕслиОткрыто Тогда
				Строка = Символы.Таб + Строка;
			КонецЕсли;
			ТелоПроцедуры.ДобавитьСтроку(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕслиОткрыто Тогда
		ТелоПроцедуры.ДобавитьСтроку("КонецЕсли;");
	КонецЕсли;
	
	ТекстТелаПроцедуры = ДобавитьОтступыВСтроку(ТелоПроцедуры.ПолучитьТекст());
	
	ЗаполнитьПравилаОбработкиДанныхТекст = МакетТекстовМодулей.ПолучитьОбласть("ЗаполнитьПравилаОбработкиДанных").ПолучитьТекст();
	ЗаполнитьПравилаОбработкиДанныхТекст = СтрЗаменить(ЗаполнитьПравилаОбработкиДанныхТекст,
		"#Область ЗаполнитьПравилаОбработкиДанных" + Символы.ПС, "");
	ЗаполнитьПравилаОбработкиДанныхТекст = СтрЗаменить(ЗаполнитьПравилаОбработкиДанныхТекст, "&ТелоПроцедуры", ТекстТелаПроцедуры);
	ВсяПроцедура.ДобавитьСтроку(ЗаполнитьПравилаОбработкиДанныхТекст);
	
	ТабПКО = РезультатЗапроса[2].Выгрузить();
	ТабПКО.Индексы.Добавить("ПОД");
	
	РазделПравил = Новый ТекстовыйДокумент;
	ВыборкаПоНаправлению.Сбросить();
	Пока ВыборкаПоНаправлению.Следующий() Цикл
		
		// Разбивка по направлениям.
		Если ВыборкаПоНаправлению.Направление = 0 Тогда
			РазделПравил.ДобавитьСтроку("#Область Отправка");
		ИначеЕсли ВыборкаПоНаправлению.Направление = 1 Тогда
			РазделПравил.ДобавитьСтроку("#Область Получение");
		Иначе
			РазделПравил.ДобавитьСтроку("#Область ОтправкаИПолучение");
		КонецЕсли;
		
		ВыборкаДетальная = ВыборкаПоНаправлению.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			ОбластьПОДТекст = МакетТекстовМодулей.ПолучитьОбласть("ПОД").ПолучитьТекст();
			ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "#Область ПОД" + Символы.ПС, "");
			ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&КонецОбласти" + Символы.ПС, "#КонецОбласти");
			
			ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОбъявлениеОбласти", "#Область " + СокрЛП(ВыборкаДетальная.Наименование));
			ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ИмяПОДДляТаблицы", СокрЛП(ВыборкаДетальная.Наименование));
			ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ИмяПОД", "ДобавитьПОД_" + СокрЛП(ВыборкаДетальная.Наименование));
			
			Если ВыборкаДетальная.ИспользоватьДляОтправки Тогда
				ОбъектВыборкиМетаданные = ПолучитьТипМетаданные(ВыборкаДетальная.ТипОбъектаВыборки, ВыборкаДетальная.ОбъектВыборки);
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОбъектВыборкиМетаданные", ОбъектВыборкиМетаданные);
			Иначе
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОбъектВыборкиМетаданные", "---");
			КонецЕсли;
			
			Если ВыборкаДетальная.ИспользоватьДляПолучения Тогда
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОбъектВыборкиФормат", СокрЛП(ВыборкаДетальная.ОбъектВыборки));
			Иначе
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОбъектВыборкиФормат", "---");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетальная.ПриОбработке) Тогда
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ПриОбработке",
					"ПОД_" + СокрЛП(ВыборкаДетальная.Наименование) + "_ПриОбработке");
			Иначе
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ПриОбработке", "---");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетальная.ВыборкаДанных)
				И ВыборкаДетальная.ИспользоватьДляОтправки Тогда
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ВыборкаДанных",
					"ПОД_" + СокрЛП(ВыборкаДетальная.Наименование) + "_ВыборкаДанных");
			Иначе
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ВыборкаДанных", "---");
			КонецЕсли;
			Если ВыборкаДетальная.ИспользоватьДляОтправки Тогда
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОчисткаДанных", ?(ВыборкаДетальная.ОчисткаДанных, "Истина", "Ложь"));
			Иначе
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОчисткаДанных", "---");
			КонецЕсли;
			ЗаполнениеМассиваПравил = Новый ТекстовыйДокумент;
			КоллекцияПКО = ТабПКО.НайтиСтроки(Новый Структура("ПОД", ВыборкаДетальная.Ссылка));
			Если КоллекцияПКО.Количество() > 0
				Или ЗначениеЗаполнено(ВыборкаДетальная.ПравилоКонвертацииОбъекта) Тогда
				Для Каждого Строка Из КоллекцияПКО Цикл
					ЗаполнениеМассиваПравил.ДобавитьСтроку("ПравилоОбработки.ИспользуемыеПКО.Добавить(""" + Строка.ПКО + """);");
				КонецЦикла;
				Если ЗначениеЗаполнено(ВыборкаДетальная.ПравилоКонвертацииОбъекта) Тогда
					ЗаполнениеМассиваПравил.ДобавитьСтроку("ПравилоОбработки.ИспользуемыеПКО.Добавить(""" + ВыборкаДетальная.ПравилоКонвертацииОбъекта + """);");
				КонецЕсли;
				ЗаполнениеМассиваПравилТекст = ДобавитьОтступыВСтроку(ЗаполнениеМассиваПравил.ПолучитьТекст());
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ЗаполнениеМассиваПравил", ЗаполнениеМассиваПравилТекст);
			Иначе
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ЗаполнениеМассиваПравил", "---");
			КонецЕсли;
			
			ТекстОбработчики = "";
			ДобавитьОбработчикиВТекстМодуля("ПОД", "ПриОбработке", 
				ВыборкаДетальная, ТекстОбработчики,МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика, ТекстФункцииВызоваОбработчика);
			Если ВыборкаДетальная.ИспользоватьДляОтправки Тогда
				ДобавитьОбработчикиВТекстМодуля("ПОД", "ВыборкаДанных", 
					ВыборкаДетальная, ТекстОбработчики,МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика, ТекстФункцииВызоваОбработчика);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ТекстОбработчики) Тогда
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОбработчикиПОД", ТекстОбработчики);
			Иначе
				ОбластьПОДТекст = СтрЗаменить(ОбластьПОДТекст, "&ОбработчикиПОД", "---");
			КонецЕсли;
			
			РазделПравил.ДобавитьСтроку(ОбластьПОДТекст);

		КонецЦикла;
		РазделПравил.УстановитьТекст(РазделПравил.ПолучитьТекст() + "#КонецОбласти"); // Разбивка по направлениям.
		
	КонецЦикла;
	
	ВсяПроцедура.ДобавитьСтроку(РазделПравил.ПолучитьТекст());
	
	Возврат ВсяПроцедура.ПолучитьТекст();
	
КонецФункции

Функция ЗаполнитьТекстПроцедурыПКО(МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика)
	
	ВсяПроцедура = Новый ТекстовыйДокумент;
	
	ЗапросПКО = Новый Запрос;
	ЗапросПКО.Текст = 
	"ВЫБРАТЬ
	|	ПКО.Ссылка,
	|	0 КАК Направление
	|ПОМЕСТИТЬ ТабПравил
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПКО
	|ГДЕ
	|	ПКО.ИспользоватьДляОтправки = ИСТИНА
	|	И ПКО.ИспользоватьДляПолучения = ЛОЖЬ
	|	И НЕ ПКО.Отключить
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПКО.Ссылка,
	|	1
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПКО
	|ГДЕ
	|	ПКО.ИспользоватьДляОтправки = ЛОЖЬ
	|	И ПКО.ИспользоватьДляПолучения = ИСТИНА
	|	И НЕ ПКО.Отключить
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПКО.Ссылка,
	|	2
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПКО
	|ГДЕ
	|	ПКО.ИспользоватьДляОтправки = ИСТИНА
	|	И ПКО.ИспользоватьДляПолучения = ИСТИНА
	|	И НЕ ПКО.Отключить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПравил.Ссылка,
	|	ТабПравил.Ссылка.Код КАК Код,
	|	ТабПравил.Ссылка.ВариантИдентификации КАК ВариантИдентификации,
	|	ТабПравил.Ссылка.ОбъектКонфигурации КАК ОбъектКонфигурации,
	|	ТабПравил.Ссылка.ОбъектФормата КАК ОбъектФормата,
	|	ТабПравил.Ссылка.ПравилоДляГруппыСправочника КАК ПравилоДляГруппыСправочника,
	|	ТабПравил.Ссылка.АлгоритмПриОтправкеДанных КАК ПриОтправкеДанных,
	|	ТабПравил.Ссылка.АлгоритмПередПолучениемДанных КАК ПриКонвертацииДанныхXDTO,
	|	ТабПравил.Ссылка.АлгоритмПриПолученииДанных КАК ПередЗаписьюПолученныхДанных,
	|	ТабПравил.Ссылка.АлгоритмПослеЗагрузкиВсехДанных КАК ПослеЗагрузкиВсехДанных_Код,
	|	ТабПравил.Ссылка.ИспользоватьДляОтправки КАК ИспользоватьДляОтправки,
	|	ТабПравил.Ссылка.ИспользоватьДляПолучения КАК ИспользоватьДляПолучения,
	|	ОК.Тип КАК ТипДанных,
	|	ТабПравил.Направление КАК Направление
	|ИЗ
	|	ТабПравил КАК ТабПравил
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Объекты КАК ОК
	|		ПО ТабПравил.Ссылка.ОбъектКонфигурации = ОК.Наименование
	|			И ОК.Владелец = &Конфигурация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставыКонвертаций КАК СоставыКонвертаций
	|		ПО СоставыКонвертаций.ЭлементКонвертации = ТабПравил.Ссылка
	|			И СоставыКонвертаций.Владелец = &Конвертация	
	|			И СоставыКонвертаций.Отключить = ЛОЖЬ
	|ГДЕ
	|	ТабПравил.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Направление,
	|	ТабПравил.Ссылка.Код
	|ИТОГИ ПО
	|	Направление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаКонвертацииСвойств.СвойствоКонфигурации КАК СвойствоКонфигурации,
	|	ПравилаКонвертацииСвойств.СвойствоФормата КАК СвойствоФормата,
	|	ПравилаКонвертацииСвойств.ИспользуетсяАлгоритмКонвертации КАК ИспользуетсяАлгоритмКонвертации,
	|	ПравилаКонвертацииСвойств.ПравилоКонвертацииСвойства,
	|	ПравилаКонвертацииСвойств.Ссылка КАК ПравилоКонвертацииОбъекта,
	|	ТабПравил.Ссылка
	|ИЗ
	|	ТабПравил КАК ТабПравил
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаКонвертацииОбъектов.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	|		ПО ТабПравил.Ссылка = ПравилаКонвертацииСвойств.Ссылка
	|ГДЕ
	|	ПравилаКонвертацииСвойств.Отключить = ЛОЖЬ 
	|	И (ПравилаКонвертацииСвойств.ГруппаСвойствФормата = """" И ПравилаКонвертацииСвойств.ГруппаСвойствКонфигурации = """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИспользуетсяАлгоритмКонвертации,
	|	СвойствоКонфигурации,
	|	СвойствоФормата,
	|	ПравилаКонвертацииСвойств.НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПравилаКонвертацииСвойств.ГруппаСвойствФормата КАК ГруппаСвойствФормата,
	|	ПравилаКонвертацииСвойств.ГруппаСвойствКонфигурации КАК ГруппаСвойствКонфигурации,
	|	ПравилаКонвертацииСвойств.СвойствоКонфигурации КАК СвойствоКонфигурации,
	|	ПравилаКонвертацииСвойств.СвойствоФормата КАК СвойствоФормата,
	|	ПравилаКонвертацииСвойств.ИспользуетсяАлгоритмКонвертации КАК ИспользуетсяАлгоритмКонвертации,
	|	ПравилаКонвертацииСвойств.ПравилоКонвертацииСвойства,
	|	ПравилаКонвертацииСвойств.Ссылка КАК ПравилоКонвертацииОбъекта,
	|	ТабПравил.Ссылка
	|ИЗ
	|	ТабПравил КАК ТабПравил
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаКонвертацииОбъектов.ПравилаКонвертацииСвойств КАК ПравилаКонвертацииСвойств
	|		ПО ТабПравил.Ссылка = ПравилаКонвертацииСвойств.Ссылка
	|ГДЕ 
	|	ПравилаКонвертацииСвойств.Отключить = ЛОЖЬ 
	|	И (ПравилаКонвертацииСвойств.ГруппаСвойствФормата <> """" ИЛИ ПравилаКонвертацииСвойств.ГруппаСвойствКонфигурации <> """")
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаСвойствФормата,
	|	ГруппаСвойствКонфигурации,
	|	СвойствоКонфигурации,
	|	СвойствоФормата,
	|	ПравилаКонвертацииСвойств.НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоляПоиска.РеквизитыПоиска,
	|	ПоляПоиска.Ссылка КАК ПравилоКонвертацииОбъекта
	|ИЗ
	|	ТабПравил КАК ТабПравил
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаКонвертацииОбъектов.ИдентификацияПоПолямПоиска КАК ПоляПоиска
	|		ПО ТабПравил.Ссылка = ПоляПоиска.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоляПоиска.НомерСтроки";
	ЗапросПКО.УстановитьПараметр("Конвертация", Конвертация);
	ЗапросПКО.УстановитьПараметр("Конфигурация", Конвертация.Конфигурация);

	
	ТелоПроцедуры = Новый ТекстовыйДокумент;
	
	ЕслиОткрыто = Ложь;
	РезультатЗапроса = ЗапросПКО.ВыполнитьПакет();
	ВыборкаПоНаправлению = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНаправлению.Следующий() Цикл
		
		Если ВыборкаПоНаправлению.Направление = 0 Тогда
			ТелоПроцедуры.ДобавитьСтроку("Если НаправлениеОбмена = ""Отправка"" Тогда");
			ЕслиОткрыто = Истина;
		ИначеЕсли ВыборкаПоНаправлению.Направление = 1 Тогда
			Если Не ЕслиОткрыто Тогда
				Строка = "Если";
			Иначе
				Строка = "ИначеЕсли";
			КонецЕсли;
			ТелоПроцедуры.ДобавитьСтроку(Строка + " НаправлениеОбмена = ""Получение"" Тогда");
			ЕслиОткрыто = Истина;
		Иначе
			Если ЕслиОткрыто Тогда
				ТелоПроцедуры.ДобавитьСтроку("КонецЕсли;");
				ЕслиОткрыто = Ложь;
			КонецЕсли;
		КонецЕсли;
	
		ВыборкаДетальная = ВыборкаПоНаправлению.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			Строка = "ДобавитьПКО_" + ВыборкаДетальная.Код + "(ПравилаКонвертации);";
			Если ЕслиОткрыто Тогда
				Строка = Символы.Таб + Строка;
			КонецЕсли;
			ТелоПроцедуры.ДобавитьСтроку(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕслиОткрыто Тогда
		ТелоПроцедуры.ДобавитьСтроку("КонецЕсли;");
	КонецЕсли;
	
	ТекстТелаПроцедуры = ДобавитьОтступыВСтроку(ТелоПроцедуры.ПолучитьТекст());
	
	ЗаполнитьПравилаКонвертацииОбъектовТекст = МакетТекстовМодулей.ПолучитьОбласть("ЗаполнитьПравилаКонвертацииОбъектов").ПолучитьТекст();
	ЗаполнитьПравилаКонвертацииОбъектовТекст = СтрЗаменить(ЗаполнитьПравилаКонвертацииОбъектовТекст,
		"#Область ЗаполнитьПравилаКонвертацииОбъектов" + Символы.ПС, "");
	ЗаполнитьПравилаКонвертацииОбъектовТекст = СтрЗаменить(ЗаполнитьПравилаКонвертацииОбъектовТекст, "&ТелоПроцедуры", ТекстТелаПроцедуры);
	ВсяПроцедура.ДобавитьСтроку(ЗаполнитьПравилаКонвертацииОбъектовТекст);
	
	ТабПКС = РезультатЗапроса[2].Выгрузить();
	ТабПКС.Индексы.Добавить("ПравилоКонвертацииОбъекта");
	
	ТабПКС_ТЧ = РезультатЗапроса[3].Выгрузить();
	ТабПКС_ТЧ.Индексы.Добавить("ПравилоКонвертацииОбъекта");
	
	ТабПолейПоиска = РезультатЗапроса[4].Выгрузить();
	ТабПолейПоиска.Индексы.Добавить("ПравилоКонвертацииОбъекта");
	
	РазделПравил = Новый ТекстовыйДокумент;
	ВыборкаПоНаправлению.Сбросить();
	Пока ВыборкаПоНаправлению.Следующий() Цикл
		
		// Разбивка по направлениям.
		Если ВыборкаПоНаправлению.Направление = 0 Тогда
			РазделПравил.ДобавитьСтроку("#Область Отправка");
		ИначеЕсли ВыборкаПоНаправлению.Направление = 1 Тогда
			РазделПравил.ДобавитьСтроку("#Область Получение");
		Иначе
			РазделПравил.ДобавитьСтроку("#Область ОтправкаИПолучение");
		КонецЕсли;
		
		ВыборкаДетальная = ВыборкаПоНаправлению.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			ОбластьПКОТекст = МакетТекстовМодулей.ПолучитьОбласть("ПКО").ПолучитьТекст();
			ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "#Область ПКО" + Символы.ПС, "");
			ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&КонецОбласти" + Символы.ПС, "#КонецОбласти");
			
			ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ОбъявлениеОбласти", "#Область " + СокрЛП(ВыборкаДетальная.Код));
			ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ИмяПКО", СокрЛП(ВыборкаДетальная.Код));
			
			ОбъектДанных = ПолучитьТипМетаданные(ВыборкаДетальная.ТипДанных, ВыборкаДетальная.ОбъектКонфигурации);
			ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ОбъектДанных", ОбъектДанных);
			
			ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ОбъектФормата", СокрЛП(ВыборкаДетальная.ОбъектФормата));
			ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПравилоДляГруппыСправочника",
				Формат(ВыборкаДетальная.ПравилоДляГруппыСправочника, "БЛ=Ложь; БИ=Истина"));
			
			Если ЗначениеЗаполнено(ВыборкаДетальная.ПриОтправкеДанных)
				И ВыборкаДетальная.ИспользоватьДляОтправки	Тогда
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПриОтправкеДанных",
					"ПКО_" + СокрЛП(ВыборкаДетальная.Код) + "_ПриОтправкеДанных");
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПриОтправкеДанных", "---");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетальная.ПриКонвертацииДанныхXDTO)
				И ВыборкаДетальная.ИспользоватьДляПолучения Тогда
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПриКонвертацииДанныхXDTO",
					"ПКО_" + СокрЛП(ВыборкаДетальная.Код) + "_ПриКонвертацииДанныхXDTO");
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПриКонвертацииДанныхXDTO", "---");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетальная.ПередЗаписьюПолученныхДанных)
				И ВыборкаДетальная.ИспользоватьДляПолучения Тогда
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПередЗаписьюПолученныхДанных",
					"ПКО_" + СокрЛП(ВыборкаДетальная.Код) + "_ПередЗаписьюПолученныхДанных");
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПередЗаписьюПолученныхДанных", "---");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетальная.ПослеЗагрузкиВсехДанных_Код)
				И ВыборкаДетальная.ИспользоватьДляПолучения Тогда
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПослеЗагрузкиВсехДанных", СокрЛП(ВыборкаДетальная.ПослеЗагрузкиВсехДанных_Код));
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ПослеЗагрузкиВсехДанных", "---");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетальная.ВариантИдентификации) Тогда
				ВариантИдентификацииСтрокой = Метаданные.Перечисления.ВариантыИдентификацииОбъектов.ЗначенияПеречисления.Получить(
					Перечисления.ВариантыИдентификацииОбъектов.Индекс(ВыборкаДетальная.ВариантИдентификации)).Имя;
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ВариантИдентификации", ВариантИдентификацииСтрокой);
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ВариантИдентификации", "---");
			КонецЕсли;
			
			ЗаполнениеПКС = Новый ТекстовыйДокумент;
			КоллекцияПКС = ТабПКС.НайтиСтроки(Новый Структура("ПравилоКонвертацииОбъекта", ВыборкаДетальная.Ссылка));
			Если КоллекцияПКС.Количество() > 0 Тогда
				Для Каждого Строка Из КоллекцияПКС Цикл
					
					ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();");
					Если ЗначениеЗаполнено(Строка.СвойствоКонфигурации) Тогда
						ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока.СвойствоКонфигурации = """ + Строка.СвойствоКонфигурации + """;");
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.СвойствоФормата) Тогда
						ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока.СвойствоФормата = """ + Строка.СвойствоФормата + """;");
					КонецЕсли;
					Если Строка.ИспользуетсяАлгоритмКонвертации Тогда
						ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;");
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.ПравилоКонвертацииСвойства) Тогда
						ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока.ПравилоКонвертацииСвойства = """ + Строка.ПравилоКонвертацииСвойства + """;");
					КонецЕсли;
					ЗаполнениеПКС.ДобавитьСтроку("");
				КонецЦикла;
				ЗаполнениеПКСТекст = ДобавитьОтступыВСтроку(ЗаполнениеПКС.ПолучитьТекст());
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ЗаполнениеПКС", ЗаполнениеПКСТекст);
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ЗаполнениеПКС", "---");
			КонецЕсли;
			
			ЗаполнениеПКС = Новый ТекстовыйДокумент;
			КоллекцияПКС = ТабПКС_ТЧ.НайтиСтроки(Новый Структура("ПравилоКонвертацииОбъекта", ВыборкаДетальная.Ссылка));
			Если КоллекцияПКС.Количество() > 0 Тогда
				ЗаполнениеПКС.ДобавитьСтроку("");
				ТекТЧ = "";
				Для Каждого Строка Из КоллекцияПКС Цикл
					Если ВыборкаПоНаправлению.Направление = 0 Тогда
						// Отправка.
						ГруппаСвойств = Строка.ГруппаСвойствФормата;
					ИначеЕсли ВыборкаПоНаправлению.Направление = 1 Тогда
						// Получение.
						ГруппаСвойств = Строка.ГруппаСвойствКонфигурации;
					Иначе
						// Отправка и получение.
						ГруппаСвойств = ?(ЗначениеЗаполнено(Строка.ГруппаСвойствФормата), Строка.ГруппаСвойствФормата, Строка.ГруппаСвойствКонфигурации);
					КонецЕсли;
					Если ГруппаСвойств <> ТекТЧ Тогда
						ТекТЧ = ГруппаСвойств;
						ЗаполнениеПКС.ДобавитьСтроку("ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить(""" + ТекТЧ + """, ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());");
						ЗаполнениеПКС.ДобавитьСтроку("СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей." + ТекТЧ + ";");
						ЗаполнениеПКС.ДобавитьСтроку("");
					КонецЕсли;
					ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока = СвойстваТЧ.Добавить();");
					Если ЗначениеЗаполнено(Строка.СвойствоКонфигурации) Тогда
						ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока.СвойствоКонфигурации = """ + Строка.СвойствоКонфигурации + """;");
					КонецЕсли;

					Если ЗначениеЗаполнено(Строка.СвойствоФормата) Тогда
						ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока.СвойствоФормата = """ + Строка.СвойствоФормата + """;");
					КонецЕсли;
					Если Строка.ИспользуетсяАлгоритмКонвертации Тогда
						ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;");
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.ПравилоКонвертацииСвойства) Тогда
						ЗаполнениеПКС.ДобавитьСтроку("НоваяСтрока.ПравилоКонвертацииСвойства = """ + Строка.ПравилоКонвертацииСвойства + """;");
					КонецЕсли;
					ЗаполнениеПКС.ДобавитьСтроку("");
				КонецЦикла;
				ЗаполнениеПКСТекст = ДобавитьОтступыВСтроку(ЗаполнениеПКС.ПолучитьТекст());
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ЗаполнениеТЧПКС", ЗаполнениеПКСТекст);
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ЗаполнениеТЧПКС", "---");
			КонецЕсли;
			ЗаполнениеПолейПоиска = Новый ТекстовыйДокумент;
			КоллекцияПолейПоиска = ТабПолейПоиска.НайтиСтроки(Новый Структура("ПравилоКонвертацииОбъекта", ВыборкаДетальная.Ссылка));
			Если КоллекцияПолейПоиска.Количество() > 0 Тогда
				Для Каждого Строка Из КоллекцияПолейПоиска Цикл
					СтрокаПолейПоиска = """" + СокрЛП(Строка.РеквизитыПоиска) + """";
					ЗаполнениеПолейПоиска.ДобавитьСтроку("ПравилоКонвертации.ПоляПоиска.Добавить(""" + Строка.РеквизитыПоиска+""");");
				КонецЦикла;
				ЗаполнениеПолейПоискаТекст = ДобавитьОтступыВСтроку(ЗаполнениеПолейПоиска.ПолучитьТекст());
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ЗаполнениеПолейПоиска", ЗаполнениеПолейПоискаТекст);
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ЗаполнениеПолейПоиска", "---");
			КонецЕсли;
			
			ТекстОбработчики = "";
			Если ВыборкаДетальная.ИспользоватьДляОтправки Тогда
				ДобавитьОбработчикиВТекстМодуля("ПКО", "ПриОтправкеДанных", 
					ВыборкаДетальная, ТекстОбработчики, МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика);
			КонецЕсли;
			Если ВыборкаДетальная.ИспользоватьДляПолучения Тогда
				ДобавитьОбработчикиВТекстМодуля("ПКО", "ПриКонвертацииДанныхXDTO", 
					ВыборкаДетальная, ТекстОбработчики, МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика);
				ДобавитьОбработчикиВТекстМодуля("ПКО", "ПередЗаписьюПолученныхДанных", 
					ВыборкаДетальная, ТекстОбработчики, МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстОбработчики) Тогда
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ОбработчикиПКО", ТекстОбработчики);
			Иначе
				ОбластьПКОТекст = СтрЗаменить(ОбластьПКОТекст, "&ОбработчикиПКО", "---");
			КонецЕсли;
			
			РазделПравил.ДобавитьСтроку(ОбластьПКОТекст);
			
		КонецЦикла;
		РазделПравил.УстановитьТекст(РазделПравил.ПолучитьТекст() + "#КонецОбласти"); // Разбивка по направлениям.
		
	КонецЦикла;
	
	ВсяПроцедура.ДобавитьСтроку(РазделПравил.ПолучитьТекст());
	
	Возврат ВсяПроцедура.ПолучитьТекст();
	
КонецФункции

Функция ЗаполнитьТекстПроцедурыПКПД(МакетТекстовМодулей)
	ТекстПроцедуры = Новый ТекстовыйДокумент;
	
	ОбластьКомментарий = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_ПроцедурыПКПД_Комментарий");
	ТекстПроцедуры.Вывести(ОбластьКомментарий);
	
	ОбластьШапки = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_ЗаполнитьПравилаКонвертацииПредопределенныхДанных_Заголовок");
	ТекстПроцедуры.Вывести(ОбластьШапки);
	
	ЗапросПКО = Новый Запрос;
	ЗапросПКО.Текст = 
	"ВЫБРАТЬ
	|	ПКПД.Ссылка КАК Ссылка,
	|	ПКПД.Код КАК Наименование,
	|	ПКПД.ОбъектКонфигурации КАК ОбъектКонфигурации,
	|	ПКПД.ОбъектФормата КАК ОбъектФормата,
	|	ПКПД.ИспользоватьДляОтправки КАК ИспользоватьДляОтправки,
	|	ПКПД.ИспользоватьДляПолучения КАК ИспользоватьДляПолучения,
	|	ОК.Тип КАК ТипДанных
	|ПОМЕСТИТЬ ВсеПравила
	|ИЗ
	|	Справочник.ПравилаКонвертацииПредопределенныхДанных КАК ПКПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Объекты КАК ОК
	|		ПО ПКПД.ОбъектКонфигурации = ОК.Наименование
	|			И ОК.Владелец = &Конфигурация
	|ГДЕ
	|	ПКПД.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПравила.Ссылка,
	|	ВсеПравила.Наименование,
	|	ВсеПравила.ОбъектКонфигурации,
	|	ВсеПравила.ОбъектФормата,
	|	ВсеПравила.ИспользоватьДляОтправки,
	|	ВсеПравила.ИспользоватьДляПолучения,
	|	ВсеПравила.ТипДанных
	|ИЗ
	|	ВсеПравила КАК ВсеПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставыКонвертаций КАК СоставыКонвертаций
	|		ПО (СоставыКонвертаций.ЭлементКонвертации = ВсеПравила.Ссылка)
	|			И (СоставыКонвертаций.Владелец = &Конвертация)
	|			И (СоставыКонвертаций.Отключить = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеПравила.Наименование";

	ЗапросПКО.УстановитьПараметр("Конфигурация", Конвертация.Конфигурация);
	ЗапросПКО.УстановитьПараметр("Конвертация", Конвертация);
	
	ТекстДляОтправки = Новый ТекстовыйДокумент;
	ТекстДляПолучения = Новый ТекстовыйДокумент;
	ТекстОбщий = Новый ТекстовыйДокумент;

	
	Выборка = ЗапросПКО.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбластьСтрока = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_ЗаполнитьПравилаКонвертацииПредопределенныхДанных_СтрокаПравила");
		ОбластьСтрокаТекст = ОбластьСтрока.ПолучитьТекст();
		ОбластьСтрокаТекст = СтрЗаменить(ОбластьСтрокаТекст, "#Область Конвертация_ЗаполнитьПравилаКонвертацииПредопределенныхДанных_СтрокаПравила", "");
		ОбластьСтрокаТекст = СтрЗаменить(ОбластьСтрокаТекст, "[Наименование]", СокрЛП(Выборка.Наименование));
		ОбластьСтрокаТекст = СтрЗаменить(ОбластьСтрокаТекст, "[ОбъектФормата]", СокрЛП(Выборка.ОбъектФормата));
		
		ОбъектДанных = ПолучитьТипМетаданные(Выборка.ТипДанных, Выборка.ОбъектКонфигурации);
		ОбластьСтрокаТекст = СтрЗаменить(ОбластьСтрокаТекст, "[ОбъектДанных]", ОбъектДанных);
		// Правила конвертации значений.
		ТекстЗначенияДляОтправки = Символы.Таб + "ЗначенияДляОтправки = Новый Соответствие;";
		ТекстЗначенияДляПолучения = Символы.Таб + "ЗначенияДляПолучения = Новый Соответствие;";
		ТаблицаСопоставления = Выборка.Ссылка.СопоставлениеЗначений.Выгрузить();
		ТаблицаСопоставления.Сортировать("ЗначениеКонфигурации, ЗначениеФормата");
		Для Каждого ПКЗ Из ТаблицаСопоставления Цикл
			СтрокаЗначениеМетаданных = ПолучитьТипМетаданные(Выборка.ТипДанных, Выборка.ОбъектКонфигурации, Истина)
							+ "." + СокрЛП(ПКЗ.ЗначениеКонфигурации);
			СтрокаЗначениеФормата = """"+СокрЛП(ПКЗ.ЗначениеФормата)+"""";
			Если Выборка.ИспользоватьДляОтправки Тогда
				ТекстЗначенияДляОтправки = ТекстЗначенияДляОтправки + Символы.ПС + Символы.Таб
					+ "ЗначенияДляОтправки.Вставить(" + СтрокаЗначениеМетаданных + ", " 
					+ СтрокаЗначениеФормата + ");";
			КонецЕсли;
			Если Выборка.ИспользоватьДляПолучения Тогда
				ТекстЗначенияДляПолучения = ТекстЗначенияДляПолучения + Символы.ПС + Символы.Таб
					+ "ЗначенияДляПолучения.Вставить(" + СтрокаЗначениеФормата + ", "
					+  СтрокаЗначениеМетаданных + ");";
			КонецЕсли;
		КонецЦикла;
		ТекстЗначенияДляОтправки = ТекстЗначенияДляОтправки + Символы.ПС + Символы.Таб 
			+ "ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;";
		ТекстЗначенияДляПолучения = ТекстЗначенияДляПолучения + Символы.ПС + Символы.Таб 
			+ "ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;";
		Если Выборка.ИспользоватьДляОтправки И Выборка.ИспользоватьДляПолучения Тогда
			ТекстОбщий.ДобавитьСтроку(ОбластьСтрокаТекст);
			ТекстОбщий.ДобавитьСтроку(ТекстЗначенияДляОтправки);
			ТекстОбщий.ДобавитьСтроку(ТекстЗначенияДляПолучения);
		ИначеЕсли Выборка.ИспользоватьДляОтправки Тогда
			ТекстДляОтправки.ДобавитьСтроку(ОбластьСтрокаТекст);
			ТекстДляОтправки.ДобавитьСтроку(ТекстЗначенияДляОтправки);
		Иначе
			ТекстДляПолучения.ДобавитьСтроку(ОбластьСтрокаТекст);
			ТекстДляПолучения.ДобавитьСтроку(ТекстЗначенияДляПолучения);
		КонецЕсли;
	КонецЦикла;
	ДополнитьТекстПроцедурыСУсловиями(ТекстПроцедуры, ТекстДляОтправки, ТекстДляПолучения, ТекстОбщий);

	ТекстПроцедуры.ДобавитьСтроку("КонецПроцедуры");

	Возврат ТекстПроцедуры.ПолучитьТекст();

КонецФункции

Функция ЗаполнитьТекстПроцедурыАлгоритмы(МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика)
	ТекстПроцедуры = Новый ТекстовыйДокумент;
	ОбластьКомментарий = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_Алгоритмы_Комментарий");
	ТекстКомментария = СтрЗаменить(ОбластьКомментарий.ПолучитьТекст(), "#Область Конвертация_Алгоритмы_Комментарий","");
	ТекстПроцедуры.ДобавитьСтроку(ТекстКомментария);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаКонвертацииОбъектов.АлгоритмПослеЗагрузкиВсехДанных КАК Код
	|ПОМЕСТИТЬ АлгоритмыОтложеннойОбработки
	|ИЗ
	|	Справочник.ПравилаКонвертацииОбъектов КАК ПравилаКонвертацииОбъектов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Алгоритмы.Код КАК Код,
	|	Алгоритмы.Параметры КАК Параметры,
	|	Алгоритмы.Алгоритм КАК Алгоритм,
	|	Алгоритмы.ЭтоФункция КАК ЭтоФункция,
	|	ВЫБОР
	|		КОГДА АлгоритмыОтложеннойОбработки.Код ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоАлгоритмПослеЗагрузкиВсехДанных
	|ИЗ
	|	Справочник.Алгоритмы КАК Алгоритмы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоставыКонвертаций КАК СоставыКонвертаций
	|		ПО Алгоритмы.Ссылка = СоставыКонвертаций.ЭлементКонвертации
	|			И (СоставыКонвертаций.Владелец = &Конвертация)
	|			И (СоставыКонвертаций.Отключить = ЛОЖЬ)
	|			И (Алгоритмы.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлгоритмыОтложеннойОбработки КАК АлгоритмыОтложеннойОбработки
	|		ПО Алгоритмы.Код = АлгоритмыОтложеннойОбработки.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстПроцедуры.ДобавитьСтроку(?(Выборка.ЭтоФункция, "Функция ", "Процедура ") + СокрЛП(Выборка.Код) + "("
			+ СокрЛП(Выборка.Параметры)+")");
		ТекстПроцедуры.ДобавитьСтроку(ДобавитьОтступыВСтроку(Выборка.Алгоритм));
		ТекстПроцедуры.ДобавитьСтроку(?(Выборка.ЭтоФункция, "КонецФункции", "КонецПроцедуры"));
		
		Если Выборка.ЭтоАлгоритмПослеЗагрузкиВсехДанных Тогда
			
			ТекстПараметрыВызова = Выборка.Параметры;
			НовыйМассивПараметров = Новый Массив;
			МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПараметрыВызова, ",");
			Для Каждого ПараметрСтрокой Из МассивПараметров Цикл
				Если НРЕГ(СокрЛП(ПараметрСтрокой)) = "параметрыконвертации" Тогда
					ПараметрСтрокойПолный = "Параметры.КомпонентыОбмена." + СокрЛП(ПараметрСтрокой);
				Иначе
					ПараметрСтрокойПолный = "Параметры." + СокрЛП(ПараметрСтрокой);
				КонецЕсли;
				НовыйМассивПараметров.Добавить(ПараметрСтрокойПолный);
			КонецЦикла;
			ТекстПараметрыВызова = СтрСоединить(НовыйМассивПараметров, ", ");
			
			ТекстПроцедурыВызоваОбработчика = ТекстПроцедурыВызоваОбработчика 
				+ ?(ТекстПроцедурыВызоваОбработчика = "", "Если ", Символы.ПС + "ИначеЕсли ")
				+ "ИмяПроцедуры = """ + СокрЛП(Выборка.Код) + """ Тогда " + Символы.ПС + Символы.Таб
				+ СокрЛП(Выборка.Код) + "(" + Символы.ПС + Символы.Таб + Символы.Таб + ТекстПараметрыВызова + ");";
		КонецЕсли;
			
	КонецЦикла;
	Возврат ТекстПроцедуры.ПолучитьТекст();

КонецФункции

Функция ЗаполнитьТекстПроцедурыПараметры(МакетТекстовМодулей)
	ТекстПроцедуры = Новый ТекстовыйДокумент;
	ОбластьКомментарий = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_Параметры_Комментарий");
	ТекстПроцедуры.Вывести(ОбластьКомментарий);
	
	ОбластьШапки = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_ЗаполнитьПараметрыКонвертации_Заголовок");
	ТекстПроцедуры.Вывести(ОбластьШапки);

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|Параметр КАК Параметр
	|ИЗ Справочник.Конвертации.Параметры
	|ГДЕ Ссылка = &Конвертация
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	Запрос.УстановитьПараметр("Конвертация", Конвертация);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстПроцедуры.ДобавитьСтроку(Символы.Таб
		+ "ПараметрыКонвертации.Вставить(" + """" + СокрЛП(Выборка.Параметр) + """" + ");");
	КонецЦикла;
	ТекстПроцедуры.ДобавитьСтроку("КонецПроцедуры");
	Возврат ТекстПроцедуры.ПолучитьТекст();

КонецФункции

Функция ЗаполнитьТекстПроцедурыОбщие(МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика, ТекстФункцииВызоваОбработчика = "")
	ТекстПроцедуры = Новый ТекстовыйДокумент;
	ОбластьКомментарий = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_Общие_Комментарий");
	ТекстПроцедуры.Вывести(ОбластьКомментарий);
	
	ЗаголовокПроцедуры = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_ПроцедураВызоваОбработчика_Заголовок");
	ТекстПроцедуры.Вывести(ЗаголовокПроцедуры);
	Если ЗначениеЗаполнено(ТекстПроцедурыВызоваОбработчика) Тогда
		ТекстПроцедуры.ДобавитьСтроку(ДобавитьОтступыВСтроку(ТекстПроцедурыВызоваОбработчика));
		ТекстПроцедуры.ДобавитьСтроку(Символы.Таб + "КонецЕсли;");
	КонецЕсли;
	ТекстПроцедуры.ДобавитьСтроку("КонецПроцедуры");

	Если ТекстФункцииВызоваОбработчика <> "" Тогда
		ЗаголовокПроцедуры = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_ФункцияВызоваОбработчика_Заголовок");
		ТекстПроцедуры.Вывести(ЗаголовокПроцедуры);
		ТекстПроцедуры.ДобавитьСтроку(ДобавитьОтступыВСтроку(ТекстФункцииВызоваОбработчика));
		ТекстПроцедуры.ДобавитьСтроку(Символы.Таб + "КонецЕсли;"+ Символы.ПС+"КонецФункции");
	КонецЕсли;
	
	Возврат ТекстПроцедуры.ПолучитьТекст();

КонецФункции

Процедура ДобавитьОбработчикиВТекстМодуля(ВидПравил, ИмяОбработчика, Выборка, ТекстОбработчики, МакетТекстовМодулей, ТекстПроцедурыВызоваОбработчика, ТекстФункцииВызоваОбработчика = "")
	ИмяПроцедуры = "";
	Если СокрЛП(Выборка[ИмяОбработчика]) <> "" Тогда
		ИмяПроцедуры = ВидПравил+"_"+СокрЛП(Выборка.Код)+"_"+ИмяОбработчика;
		
		ОбластьПараметры = МакетТекстовМодулей.ПолучитьОбласть("Конвертация_Параметры_"+ВидПравил+"_"+ИмяОбработчика);
		ТекстПараметры = СтрПолучитьСтроку(ОбластьПараметры.ПолучитьТекст(),2);
		// Параметры в месте объявления процедуры (общие).
		ТекстПараметрыПроцедуры = СтрЗаменить(ТекстПараметры, "_", "");
		
		Если ВидПравил = "ПОД" Тогда
			ИмяПараметра = ?(Выборка.ИспользоватьДляОтправки, "ДанныеИБ", "ДанныеXDTO");
			ТекстПараметрыПроцедуры = СтрЗаменить(ТекстПараметрыПроцедуры, "ОбъектОбработки", ИмяПараметра);
		КонецЕсли;
		
		// Параметры в месте вызова процедуры.
		ТекстПараметрыВызова = СтрЗаменить(ТекстПараметры, "_", "Параметры.");
		ТекстПараметрыВызова = СтрЗаменить(ТекстПараметрыВызова, "(", "(" + Символы.ПС + Символы.Таб + Символы.Таб);
		
		Если ИмяОбработчика = "ВыборкаДанных" Тогда
			
			ТекстОбработчики = ТекстОбработчики + Символы.ПС + ?(ТекстОбработчики <> "", Символы.ПС,"") 
				+ "Функция " + ИмяПроцедуры + ТекстПараметрыПроцедуры 
				+ Символы.ПС + ДобавитьОтступыВСтроку(Выборка[ИмяОбработчика])
				+ Символы.ПС + "КонецФункции";
			ТекстФункцииВызоваОбработчика = ТекстФункцииВызоваОбработчика 
				+ ?(ТекстФункцииВызоваОбработчика = "", "Если ", Символы.ПС + "ИначеЕсли ")
				+ "ИмяФункции = """ + ИмяПроцедуры + """ Тогда " + Символы.ПС + Символы.Таб
				+ "Возврат " + ИмяПроцедуры + ТекстПараметрыВызова + ";";

		Иначе
			
			ТекстОбработчика = Выборка[ИмяОбработчика];
			ПриВыгрузкеОбработчика(ИмяОбработчика, ТекстОбработчика, Выборка.ОбъектКонфигурации);
			
			ТекстОбработчики = ТекстОбработчики + Символы.ПС + ?(ТекстОбработчики <> "", Символы.ПС,"") 
				+ "Процедура " + ИмяПроцедуры + ТекстПараметрыПроцедуры 
				+ Символы.ПС + ДобавитьОтступыВСтроку(ТекстОбработчика)
				+ Символы.ПС + "КонецПроцедуры";
			ТекстПроцедурыВызоваОбработчика = ТекстПроцедурыВызоваОбработчика 
				+ ?(ТекстПроцедурыВызоваОбработчика = "", "Если ", Символы.ПС + "ИначеЕсли ")
				+ "ИмяПроцедуры = """ + ИмяПроцедуры + """ Тогда " + Символы.ПС + Символы.Таб
				+ ИмяПроцедуры + ТекстПараметрыВызова + ";";
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыгрузкеОбработчика(ИмяОбработчика, ТекстОбработчика, ОбъектКонфигурацииСтрокой)
	Если Не ВыгрузкаДляРасширенногоСинтаксическогоКонтроля Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектКонфигурацииСтрокой) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяОбработчика = "ПриОтправкеДанных"
		Или ИмяОбработчика = "ПередЗаписьюПолученныхДанных"
		Или ИмяОбработчика = "ПриОбработке" Тогда
		
			Если Найти(ОбъектКонфигурацииСтрокой, "ДокументСсылка.") > 0 Тогда
				ТекстОбработчика = "ДанныеИБ = Документы." 
					+ СтрЗаменить(ОбъектКонфигурацииСтрокой, "ДокументСсылка.", "")
					+ ".СоздатьДокумент();"
					+ Символы.ПС
					+ ТекстОбработчика;
			ИначеЕсли Найти(ОбъектКонфигурацииСтрокой, "СправочникСсылка.") > 0 Тогда
				ТекстОбработчика = "ДанныеИБ = Справочники." 
					+ СтрЗаменить(ОбъектКонфигурацииСтрокой, "СправочникСсылка.", "")
					+ ".СоздатьЭлемент();"
					+ Символы.ПС
					+ ТекстОбработчика;
			КонецЕсли;
	КонецЕсли;
		
	Если ИмяОбработчика = "ПриКонвертацииДанныхXDTO"
		Или ИмяОбработчика = "ПередЗаписьюПолученныхДанных" Тогда
		
		Если Найти(ОбъектКонфигурацииСтрокой, "ДокументСсылка.") > 0 Тогда
				ТекстОбработчика = "ПолученныеДанные = Документы." 
					+ СтрЗаменить(ОбъектКонфигурацииСтрокой, "ДокументСсылка.", "")
					+ ".СоздатьДокумент();"
					+ Символы.ПС
					+ ТекстОбработчика;
			ИначеЕсли Найти(ОбъектКонфигурацииСтрокой, "СправочникСсылка.") > 0 Тогда
				ТекстОбработчика = "ПолученныеДанные = Справочники." 
					+ СтрЗаменить(ОбъектКонфигурацииСтрокой, "СправочникСсылка.", "")
					+ ".СоздатьЭлемент();"
					+ Символы.ПС
					+ ТекстОбработчика;
			КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипМетаданные(ТипОбъектаВыборки, ОбъектВыборки, БезМетаданных = Ложь)
	Если СокрЛП(ОбъектВыборки) = "" Тогда
		Возврат "Неопределено";
	КонецЕсли;
	
	Если БезМетаданных Тогда
		ТипМетаданные = "";
	Иначе
		ТипМетаданные = "Метаданные.";
	КонецЕсли;
	
	ИмяОбъекта = СокрЛП(ОбъектВыборки);
	ИмяОбъекта = Прав(ИмяОбъекта, СтрДлина(ИмяОбъекта) - Найти(ИмяОбъекта,"."));
	Если ТипОбъектаВыборки = Перечисления.ТипыОбъектов.Справочник
		Или Найти(НРег(ОбъектВыборки), "справочникссылка.") > 0 Тогда
		ТипОбъекта = "Справочники";
	ИначеЕсли ТипОбъектаВыборки = Перечисления.ТипыОбъектов.Документ
		Или Найти(НРег(ОбъектВыборки), "документссылка.") > 0 Тогда
		ТипОбъекта = "Документы";
	ИначеЕсли ТипОбъектаВыборки = Перечисления.ТипыОбъектов.БизнесПроцесс
		Или Найти(НРег(ОбъектВыборки), "бизнеспроцессссылка.") > 0 Тогда
		ТипОбъекта = "БизнесПроцессы";
	ИначеЕсли ТипОбъектаВыборки = Перечисления.ТипыОбъектов.Задача
		Или Найти(НРег(ОбъектВыборки), "задачассылка.") > 0 Тогда
		ТипОбъекта = "Задачи";
	ИначеЕсли ТипОбъектаВыборки = Перечисления.ТипыОбъектов.НаборКонстант
		Или Найти(НРег(ОбъектВыборки), "константынабор") > 0 Тогда
		ТипОбъекта = "Константы";
	ИначеЕсли ТипОбъектаВыборки = Перечисления.ТипыОбъектов.ПланВидовХарактеристик
		Или Найти(НРег(ОбъектВыборки), "планвидовхарактеристикссылка.") > 0 Тогда
		ТипОбъекта = "ПланыВидовХарактеристик";
	ИначеЕсли ТипОбъектаВыборки = Перечисления.ТипыОбъектов.Перечисление
		Или Найти(НРег(ОбъектВыборки), "перечислениессылка.") > 0 Тогда
		ТипОбъекта = "Перечисления";
	ИначеЕсли ТипОбъектаВыборки = Перечисления.ТипыОбъектов.РегистрСведений
		Или Найти(НРег(ОбъектВыборки), "регистрсведенийзапись.") > 0 Тогда
		ТипОбъекта = "РегистрыСведений";
	Иначе
		ТипОбъекта = "";
	КонецЕсли;
	Возврат ТипМетаданные+ТипОбъекта+"."+ИмяОбъекта;
КонецФункции

Функция ДобавитьОтступыВСтроку(СтрокаАлгоритма)
	ТекСтрокаАлгоритма = СокрЛП(СтрокаАлгоритма);
	Возврат Символы.Таб + СтрЗаменить(ТекСтрокаАлгоритма, Символы.ПС, Символы.ПС+Символы.Таб);
КонецФункции

Процедура ДополнитьТекстПроцедурыСУсловиями(ТекстПроцедуры, ТекстДляОтправки, ТекстДляПолучения, ТекстОбщий)
	СтрокаТекстДляОтправки = ТекстДляОтправки.ПолучитьТекст();
	Если СокрЛП(СтрокаТекстДляОтправки) <> "" Тогда
		ТекстПроцедуры.ДобавитьСтроку(""+Символы.Таб+"Если НаправлениеОбмена = ""Отправка"" Тогда");
		ТекстПроцедуры.ДобавитьСтроку(""+Символы.Таб+ДобавитьОтступыВСтроку(СтрокаТекстДляОтправки));
		ТекстПроцедуры.ДобавитьСтроку(""+Символы.Таб+"КонецЕсли;");
	КонецЕсли;
	СтрокаТекстДляПолучения = ТекстДляПолучения.ПолучитьТекст();
	Если СокрЛП(СтрокаТекстДляПолучения) <> "" Тогда
		ТекстПроцедуры.ДобавитьСтроку(""+Символы.Таб+"Если НаправлениеОбмена = ""Получение"" Тогда");
		ТекстПроцедуры.ДобавитьСтроку(""+Символы.Таб+ДобавитьОтступыВСтроку(СтрокаТекстДляПолучения));
		ТекстПроцедуры.ДобавитьСтроку(""+Символы.Таб+"КонецЕсли;");
	КонецЕсли;
	СтрокаТекстОбщий = ТекстОбщий.ПолучитьТекст();
	Если СокрЛП(СтрокаТекстОбщий) <> "" Тогда
		ТекстПроцедуры.ДобавитьСтроку(СтрокаТекстОбщий);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#КонецЕсли