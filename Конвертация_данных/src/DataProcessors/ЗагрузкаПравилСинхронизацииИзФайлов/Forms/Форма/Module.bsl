#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.Обработчики = Истина;
	Объект.ПараметрыКонвертации = Истина;
	Объект.ПКО = Истина;
	Объект.ПКПД = Истина;
	Объект.ПОД = Истина;
	МестоЗагрузки = "НоваяКонвертация";
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗагрузкаАлгоритмов" Тогда
		Если Параметр.Отказ = Ложь 
			И Параметр.ИдентификаторФормы = ЭтаФорма.УникальныйИдентификатор Тогда
			ЗагрузитьНаСервере(СтрТекстДок, ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ОбработчикиПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СоставЗагружаемыхДанныхПриИзменении(Элемент)
	Если СоставЗагружаемыхДанных = 0 Тогда
		// Все
		Объект.Обработчики = Истина;
		Объект.ПараметрыКонвертации = Истина;
		Объект.ПКО = Истина;
		Объект.ПКПД = Истина;
		Объект.ПОД = Истина;
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияПриИзменении(Элемент)
	КонвертацияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Загрузить(Команда)
	#Если НЕ ВебКлиент Тогда
	// Предварительные проверки.
	Если МестоЗагрузки = "СуществующаяКонвертация" И НЕ ЗначениеЗаполнено(Объект.Конвертация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана конвертация для загрузки'"));
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.КаталогОбмена) И НЕ ЗначениеЗаполнено(Объект.ИмяФайлаМодульМенеджера) Тогда
		Возврат;
	КонецЕсли;
	СтрТекстДок = "";
	ИмяВременногоФайла = "";
	Если Объект.Обработчики Или МестоЗагрузки = "НоваяКонвертация" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ИмяФайлаМодульМенеджера) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан файл с модулем менеджера обмена'"));
			Возврат;
		КонецЕсли;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаЗагрузки);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(СокрЛП(ИмяВременногоФайла));
		СтрТекстДок = ТекстДок.ПолучитьТекст();
		Если МестоЗагрузки = "НоваяКонвертация" Тогда
			// Считаем наименование конвертации из файла.
			НаименованиеКонвертации = "";
			СтрокаКомментарий = СокрЛП(СтрПолучитьСтроку(СтрТекстДок, 1));
			Если Лев(СтрокаКомментарий,15) = "// Конвертация " Тогда
				ПозицияКонецИмени = Найти(СтрокаКомментарий, " от ");
				Если ПозицияКонецИмени > 0 Тогда
					НаименованиеКонвертации = Сред(СтрокаКомментарий,16, ПозицияКонецИмени - 16);
				Иначе
					НаименованиеКонвертации = Прав(СтрокаКомментарий,СтрДлина(СтрокаКомментарий) - 15);
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НаименованиеКонвертации) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось определить наименование загружаемой конвертации'"));
				Возврат;
			КонецЕсли;
			// Больше ничего проверять не надо, можно загружать.
			ЗагрузитьНаСервере(СтрТекстДок, ИмяВременногоФайла);
			Возврат;
		КонецЕсли;
		// Результат проверки будет в обработке оповещения.
		КонвертацияДанныхXDTOКлиент.ПроверитьКонвертациюПриЗагрузкеАлгоритмов(СтрТекстДок, Объект.Конвертация, 
										НаименованиеКонвертации, ЭтаФорма.УникальныйИдентификатор);
	Иначе
		 ЗагрузитьНаСервере(СтрТекстДок, ИмяВременногоФайла);
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок= НСтр("ru = 'Выберите каталог обмена'");
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораКаталогаЗагрузки", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМодульМенеджераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("Текстовый документ(*.txt)|*.txt"));
	НастройкиДиалога.Вставить("Заголовок", НСтр("ru='Выберите файл с модулем менеджера'"));

	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайлаЗагрузки", ЭтотОбъект);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершениеВыбораКаталогаЗагрузки(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТаблицаФайлыПравил.Очистить();
	Объект.КаталогОбмена = СокрЛП(ВыбранныеФайлы[0]);
	// Файлы правил надо поместить в хранилище
	МассивИменФайлов = Новый Массив;
	МассивИменФайлов.Добавить("info.xml");
	МассивИменФайлов.Добавить("POD.xml");
	МассивИменФайлов.Добавить("PKO.xml");
	МассивИменФайлов.Добавить("PKPD.xml");
	МассивИменФайлов.Добавить("Param.xml");
	Для Каждого ИмяФайла Из МассивИменФайлов Цикл
		ПолноеИмя = Объект.КаталогОбмена + "/" + ИмяФайла;
		ТекФайл = Новый Файл(ПолноеИмя);
		Если НЕ ТекФайл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмя), ЭтаФорма.УникальныйИдентификатор);
		СтрокаТаб = ТаблицаФайлыПравил.Добавить();
		СтрокаТаб.ИмяФайла = ИмяФайла;
		СтрокаТаб.АдресФайла = АдресФайла;
	КонецЦикла;
	// Заполняем адрес файла с модулем менеджера.
	МодулиТекстовые = НайтиФайлы(Объект.КаталогОбмена, "*.txt", Ложь);
	Если МодулиТекстовые.Количество() = 1 Тогда
		Объект.ИмяФайлаМодульМенеджера = МодулиТекстовые[0].ПолноеИмя;
		// Сразу передаем файл на сервер.
		Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайлаЗагрузки", ЭтотОбъект);
		СписокДляПередачи = Новый Массив;
		СписокДляПередачи.Добавить(Новый ОписаниеПередаваемогоФайла(МодулиТекстовые[0].ПолноеИмя));
		
		НачатьПомещениеФайлов(
			Оповещение,
			СписокДляПередачи,,
			Ложь,
			ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайлаЗагрузки(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	ТекстОшибки = "";
	Если ТипЗнч(РезультатПомещенияФайлов) = Тип("Массив") Тогда
		РезультатВыполнения = РезультатПомещенияФайлов[0];
	Иначе
		РезультатВыполнения = РезультатПомещенияФайлов;
		ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	АдресФайлаЗагрузки = РезультатВыполнения.Хранение;
	
	Объект.ИмяФайлаМодульМенеджера = РезультатВыполнения.Имя;
	Если ПустаяСтрока(ТекстОшибки) И ПустаяСтрока(АдресФайлаЗагрузки) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка передачи файла с модулем менеджера на сервер'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ИмяФайлаМодульМенеджера");
	КонецЕсли;
	ОбновитьОтображениеДанных();
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ИмяФайлаМодульМенеджера.Доступность = Объект.Обработчики;
	Элементы.ИмяФайлаМодульМенеджера.АвтоОтметкаНезаполненного = Объект.Обработчики;
	Элементы.ГруппаСоставВыборочно.Видимость = (СоставЗагружаемыхДанных <> 0);
	Элементы.ГруппаЗагрузкаВСуществующуюКонвертацию.Видимость = (МестоЗагрузки = "СуществующаяКонвертация");
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОбработчики(СтрТекстДок, ИмяВременногоФайла)
	
	ОбработкаОбъект = Обработки.ЗагрузкаОбработчиков.Создать();
	ОбработкаОбъект.Конвертация = Объект.Конвертация;
	ОбработкаОбъект.СоздаватьОтсутствующиеАлгоритмы = Истина;
	ОбработкаОбъект.РазобратьТекстМодуля(СтрТекстДок);
	ТекстДок = Неопределено;
	Попытка
		УдалитьФайлы(ИмяВременногоФайла)
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере(СтрТекстДок, ИмяВременногоФайла)

	Отказ = Ложь;
	// Заполнение либо проверка номера версии формата
	ПроверитьЗагрузитьВерсиюФормата(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ПОД Или МестоЗагрузки = "НоваяКонвертация" Тогда
		ЗагрузитьПОД();
	КонецЕсли;
	Если Объект.ПКО Или МестоЗагрузки = "НоваяКонвертация" Тогда
		ЗагрузитьПКО();
	КонецЕсли;
	Если Объект.ПКПД Или МестоЗагрузки = "НоваяКонвертация" Тогда
		ЗагрузитьПКПД();
	КонецЕсли;
	Если Объект.ПараметрыКонвертации Или МестоЗагрузки = "НоваяКонвертация" Тогда
		ЗагрузитьПараметрыКонвертации();
	КонецЕсли;
	Если Объект.Обработчики Или МестоЗагрузки = "НоваяКонвертация" Тогда
		ЗагрузитьОбработчики(СтрТекстДок, ИмяВременногоФайла);
	КонецЕсли;
	
	// Удаление временных файлов
	Для Каждого Строка Из ТаблицаФайлыПравил Цикл
		Если ЗначениеЗаполнено(Строка.ИмяВременногоФайла) Тогда
			Попытка
				УдалитьФайлы(Строка.ИмяВременногоФайла);
				Строка.ИмяВременногоФайла = "";
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
КонецПроцедуры

// Процедура проверяет для какой версии формата созданы файлы,
//	и соответствует ли эта версия указанным в форме параметрам
&НаСервере
Процедура ПроверитьЗагрузитьВерсиюФормата(Отказ)
	ЧтениеXML = ПолучитьЧтениеXML("info.xml", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Конвертация) И МестоЗагрузки = "СуществующаяКонвертация" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана конвертация'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();  //body
	ВерсияФорматаФайла = Неопределено;
	ВерсияФорматаФайлаСтрокой = "";
	ВерсияФорматаМенеджераОбменаСтрокой = "1";
	Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
		Если ЧтениеXML.Имя = "НомерВерсииФормата" Тогда
			ВерсияФорматаФайла = Справочники.ВерсииФормата.НайтиПоНаименованию(ЧтениеXML.Значение);
			ВерсияФорматаФайлаСтрокой = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "ВерсияФорматаМенеджераОбмена" Тогда
			ВерсияФорматаМенеджераОбменаСтрокой = ЧтениеXML.Значение;
		КонецЕсли;
	КонецЦикла;
	Если ВерсияФорматаФайлаСтрокой = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер версии формата для правил обмена'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если МестоЗагрузки = "НоваяКонвертация" Тогда
		// Создание новой конвертации и при необходимости новой версии формата.
		Если НЕ ЗначениеЗаполнено(ВерсияФорматаФайла) Тогда
			ВерсияФорматаОбъект = Справочники.ВерсииФормата.СоздатьЭлемент();
			ВерсияФорматаОбъект.Наименование = ВерсияФорматаФайлаСтрокой;
			ВерсияФорматаОбъект.Записать();
			ВерсияФорматаФайла = ВерсияФорматаОбъект.Ссылка;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Создана новая версия формата'") + ": " + ВерсияФорматаФайлаСтрокой);
		КонецЕсли;
		КонвертацияСсылка = Справочники.Конвертации.НайтиПоНаименованию(НаименованиеКонвертации);
		КонвертацияОбъект = Неопределено;
		Если ЗначениеЗаполнено(КонвертацияСсылка) Тогда
			ТекстСообщения = НСтр("ru='Конвертация с наименованием %ИмяКонвертации% уже существует. Используйте режим загрузки в существующую конвертацию.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяКонвертации%", НаименованиеКонвертации);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		Иначе
			КонвертацияОбъект = Справочники.Конвертации.СоздатьЭлемент();
			КонвертацияОбъект.ВерсияФорматаМенеджера = ВерсияФорматаМенеджераОбменаСтрокой;
			КонвертацияОбъект.Наименование = НаименованиеКонвертации;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Создана новая конвертация'") + ": " + НаименованиеКонвертации);
		КонецЕсли;
		Если КонвертацияОбъект <> Неопределено Тогда
			ВерсияСтрока = КонвертацияОбъект.ВерсииФормата.Добавить();
			ВерсияСтрока.ВерсияФормата = ВерсияФорматаФайла;
			КонвертацияОбъект.Записать();
			Объект.Конвертация = КонвертацияОбъект.Ссылка;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ВерсияФорматаФайла) Тогда
			ТекстСообщения = НСтр("ru='Не найдена версия формата, указанная для правил обмена'") + ": " + ВерсияФорматаФайлаСтрокой;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ТекущаяВерсияФорматаМенеджера = СокрЛП(КонвертацияДанныхXDTOСервер.ВерсияФорматаМенеджераОбмена(Объект.Конвертация));
		Если ВерсияФорматаМенеджераОбменаСтрокой <> ТекущаяВерсияФорматаМенеджера Тогда
			ТекстСообщения = НСтр("ru='Версия формата менеджера обмена в правилах не соответствует версии, указанной для конвертации. Версия конвертации [ТекущаяВерсия], версия правил [ВерсияПравил]'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСообщения, 
							Новый Структура("ТекущаяВерсия, ВерсияПравил", ТекущаяВерсияФорматаМенеджера, ВерсияФорматаМенеджераОбменаСтрокой));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Объект.Конвертация.ВерсииФормата.Найти(ВерсияФорматаФайла) = Неопределено Тогда
			КонвертацияОбъект = Объект.Конвертация.ПолучитьОбъект();
			ВерсияСтрока = КонвертацияОбъект.ВерсииФормата.Добавить();
			ВерсияСтрока.ВерсияФормата = ВерсияФорматаФайла;
			КонвертацияОбъект.Записать();

			ТекстСообщения = НСтр("ru='В конвертацию добавлена версия формата из правил обмена'") + ": " + Объект.ВерсияФормата;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	Объект.ВерсияФормата = ВерсияФорматаФайла;
КонецПроцедуры

// Процедура загружает правила обработки данных
&НаСервере
Процедура ЗагрузитьПОД()
	Отказ = Ложь;
	ЧтениеXML = ПолучитьЧтениеXML("POD.xml", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапросаПОД = "ВЫБРАТЬ
	|	ПОД.Ссылка КАК СсылкаПравило,
	|	Состав.Ссылка КАК СсылкаСостав
	|ИЗ Справочник.ПравилаОбработкиДанных КАК ПОД
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК Состав
	|ПО Состав.ЭлементКонвертации = ПОД.Ссылка
	|	И Состав.Владелец = &Конвертация
	|	И Состав.Отключить = ЛОЖЬ
	|ГДЕ ПОД.Ссылка.Наименование = &Имя
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПОД.Ссылка
	|ИЗ Справочник.ПравилаОбработкиДанных КАК ПОД
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК СоставЧужой
	|ПО СоставЧужой.ЭлементКонвертации = ПОД.Ссылка
	|	И СоставЧужой.Владелец <> &Конвертация
	|	И СоставЧужой.Отключить = ЛОЖЬ
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК СоставСвой
	|ПО СоставСвой.ЭлементКонвертации = ПОД.Ссылка
	|	И СоставСвой.Владелец = &Конвертация
	|	И СоставСвой.Отключить = ЛОЖЬ
	|ГДЕ ПОД.Ссылка.Наименование = &Имя";
	ЧтениеXML.Прочитать(); //body
	ТекПОД = Неопределено;
	ЧислоОбработано = 0;
	ЧислоСоздано = 0;
	ПравилоСоздано = Ложь;
	Пока ЧтениеXML.Прочитать() Цикл 
		Если ЧтениеXML.Имя = "ПравилоОбработкиДанных" Тогда
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда //Загрузка ПОД
				СтруктураАтрибутов = СтруктураАтрибутовУзла(ЧтениеXML);
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапросаПОД;
				Запрос.УстановитьПараметр("Имя", СтруктураАтрибутов.Наименование);
				Запрос.УстановитьПараметр("Конвертация", Объект.Конвертация);
				ТекСоставКонвертации = Неопределено;
				ПравилоСоздано = Ложь;
				ПолучитьПравилоИСоставКонвертации(Запрос, "ПравилаОбработкиДанных", ТекПОД, ТекСоставКонвертации, ПравилоСоздано);
				ТекПОД.ПравилаКонвертацииОбъектов.Очистить();
				ТекПОД.ОчисткаДанных = Ложь;
				ЗаполнитьЗначенияСвойств(ТекПОД, СтруктураАтрибутов);
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда //Запись загруженного ПОД
				Если ТекПОД.ПравилаКонвертацииОбъектов.Количество() = 1 Тогда
					ТекПОД.ПравилоКонвертацииОбъекта = ТекПОД.ПравилаКонвертацииОбъектов[0].ПравилоКонвертацииОбъекта;
					ТекПОД.ПравилаКонвертацииОбъектов.Очистить();
				КонецЕсли;
				ЧислоОбработано = ЧислоОбработано + 1;
				Если ПравилоСоздано Тогда
					ЧислоСоздано = ЧислоСоздано + 1;
				КонецЕсли;
				ТекПОД.Записать();
				СоздатьИзменитьСоставКонвертации(ТекСоставКонвертации, ТекПОД.Ссылка);
				ТекПОД = Неопределено;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "Строка"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ДобавитьСтрокуВТабличнуюЧасть(ТекПОД, "ПравилаКонвертацииОбъектов", ЧтениеXML);
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML = Неопределено;
	ТекстСообщения = НСтр("ru='Правила обработки данных загружены. Обработано'") + ": "+ЧислоОбработано+", " + НСтр("ru='создано новых'") + " " + + ЧислоСоздано;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

// Процедура загружает правила конвертации объектов
&НаСервере
Процедура ЗагрузитьПКО()
	Отказ = Ложь;
	ЧтениеXML = ПолучитьЧтениеXML("PKO.xml", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапросаПКО = "ВЫБРАТЬ
	|	ПКО.Ссылка КАК СсылкаПравило,
	|	Состав.Ссылка КАК СсылкаСостав
	|ИЗ Справочник.ПравилаКонвертацииОбъектов КАК ПКО
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК Состав
	|ПО Состав.ЭлементКонвертации = ПКО.Ссылка
	|	И Состав.Владелец = &Конвертация
	|	И Состав.Отключить = ЛОЖЬ
	|ГДЕ ПКО.Ссылка.Код = &Имя
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПКО.Ссылка
	|ИЗ Справочник.ПравилаКонвертацииОбъектов КАК ПКО
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК СоставЧужой
	|ПО СоставЧужой.ЭлементКонвертации = ПКО.Ссылка
	|	И СоставЧужой.Владелец <> &Конвертация
	|	И СоставЧужой.Отключить = ЛОЖЬ
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК СоставСвой
	|ПО СоставСвой.ЭлементКонвертации = ПКО.Ссылка
	|	И СоставСвой.Владелец = &Конвертация
	|	И СоставСвой.Отключить = ЛОЖЬ
	|ГДЕ ПКО.Ссылка.Код = &Имя";
	ЧтениеXML.Прочитать(); //body
	ТекПКО = Неопределено;
	ЧислоОбработано = 0;
	ЧислоСоздано = 0;
	ПравилоСоздано = Ложь;
	Пока ЧтениеXML.Прочитать() Цикл 
		Если ЧтениеXML.Имя = "ПравилоКонвертацииОбъекта" Тогда
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // Загрузка ПКО.
				СтруктураАтрибутов = СтруктураАтрибутовУзла(ЧтениеXML);
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапросаПКО;
				Запрос.УстановитьПараметр("Имя", СтруктураАтрибутов.Код);
				Запрос.УстановитьПараметр("Конвертация", Объект.Конвертация);
				ТекСоставКонвертации = Неопределено;
				ПолучитьПравилоИСоставКонвертации(Запрос, "ПравилаКонвертацииОбъектов", ТекПКО, ТекСоставКонвертации, ПравилоСоздано);
				ТекПКО.ИдентификацияПоПолямПоиска.Очистить();
				ТекПКО.ПравилаКонвертацииСвойств.Очистить();

				ЗаполнитьЗначенияСвойств(ТекПКО, СтруктураАтрибутов);
				// Вариант идентификации - особая логика.
				ТекПКО.ВариантИдентификации = Перечисления.ВариантыИдентификацииОбъектов[СтруктураАтрибутов.ВариантИдентификации];
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда // Запись загруженного ПКО.
				ЧислоОбработано = ЧислоОбработано + 1;
				Если ПравилоСоздано Тогда
					ЧислоСоздано = ЧислоСоздано + 1;
				КонецЕсли;
				ТекПКО.Записать();
				СоздатьИзменитьСоставКонвертации(ТекСоставКонвертации, ТекПКО.Ссылка);
				ТекПКО = Неопределено;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "Строка"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ДобавитьСтрокуВТабличнуюЧасть(ТекПКО, "ПравилаКонвертацииСвойств", ЧтениеXML);
		ИначеЕсли ЧтениеXML.Имя = "СтрокаПоиска"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ДобавитьСтрокуВТабличнуюЧасть(ТекПКО, "ИдентификацияПоПолямПоиска", ЧтениеXML);
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML = Неопределено;
	ТекстСообщения = НСтр("ru='Правила конвертации объектов загружены. Обработано'") + ": "+ЧислоОбработано+", " + НСтр("ru='создано новых'") + " " + + ЧислоСоздано;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

// Процедура загружает правила конвертации предопределенных данных
&НаСервере
Процедура ЗагрузитьПКПД()
	Отказ = Ложь;
	ЧтениеXML = ПолучитьЧтениеXML("PKPD.xml", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапросаПКПД = "ВЫБРАТЬ
	|	ПКПД.Ссылка КАК СсылкаПравило,
	|	Состав.Ссылка КАК СсылкаСостав
	|ИЗ Справочник.ПравилаКонвертацииПредопределенныхДанных КАК ПКПД
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК Состав
	|ПО Состав.ЭлементКонвертации = ПКПД.Ссылка
	|	И Состав.Владелец = &Конвертация
	|	И Состав.Отключить = ЛОЖЬ
	|ГДЕ ПКПД.Ссылка.Код = &Код
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПКПД.Ссылка
	|ИЗ Справочник.ПравилаКонвертацииПредопределенныхДанных КАК ПКПД
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК СоставЧужой
	|ПО СоставЧужой.ЭлементКонвертации = ПКПД.Ссылка
	|	И СоставЧужой.Владелец <> &Конвертация
	|	И СоставЧужой.Отключить = ЛОЖЬ
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК СоставСвой
	|ПО СоставСвой.ЭлементКонвертации = ПКПД.Ссылка
	|	И СоставСвой.Владелец = &Конвертация
	|	И СоставСвой.Отключить = ЛОЖЬ
	|ГДЕ ПКПД.Ссылка.Код = &Код";
	ЧтениеXML.Прочитать(); //body
	ЧислоОбработано = 0;
	ЧислоСоздано = 0;
	ТекПКПД = Неопределено;
	ПравилоСоздано = Ложь;
	Пока ЧтениеXML.Прочитать() Цикл 
		Если ЧтениеXML.Имя = "ПравилоОбработкиПредопределенныхДанных" Тогда
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда //Загрузка ПКПД
				СтруктураАтрибутов = СтруктураАтрибутовУзла(ЧтениеXML);
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапросаПКПД;
				Запрос.УстановитьПараметр("Код", СтруктураАтрибутов.Имя);
				Запрос.УстановитьПараметр("Конвертация", Объект.Конвертация);
				ТекСоставКонвертации = Неопределено;
				ПолучитьПравилоИСоставКонвертации(Запрос, "ПравилаКонвертацииПредопределенныхДанных", ТекПКПД, ТекСоставКонвертации, ПравилоСоздано);
				ТекПКПД.Код = СтруктураАтрибутов.Имя;
				ТекПКПД.СопоставлениеЗначений.Очистить();
				ЗаполнитьЗначенияСвойств(ТекПКПД, СтруктураАтрибутов);
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда //Запись загруженного ПКПД
				ЧислоОбработано = ЧислоОбработано + 1;
				Если ПравилоСоздано Тогда
					ЧислоСоздано = ЧислоСоздано + 1;
				КонецЕсли;
				ТекПКПД.Записать();
				СоздатьИзменитьСоставКонвертации(ТекСоставКонвертации, ТекПКПД.Ссылка);
				ТекПКПД = Неопределено;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "Строка"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ДобавитьСтрокуВТабличнуюЧасть(ТекПКПД, "СопоставлениеЗначений", ЧтениеXML);
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML = Неопределено;
	ТекстСообщения = НСтр("ru='Правила конвертации предопределенных данных загружены. Обработано'") + ": "+ЧислоОбработано+", " + НСтр("ru='создано новых'") + " " + + ЧислоСоздано;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

// Процедура загружает параметры конвертации
&НаСервере
Процедура ЗагрузитьПараметрыКонвертации()
	Отказ = Ложь;
	ЧтениеXML = ПолучитьЧтениеXML("Param.xml", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	КонвертацияОбъект = Объект.Конвертация.ПолучитьОбъект();
	ПараметрыКонвертации = КонвертацияОбъект.Параметры;
	ЕстьИзменения = Ложь;
	ЧислоСоздано = 0;
	ЧислоОбработано = 0;
	ЧтениеXML.Прочитать(); //body
	Пока ЧтениеXML.Прочитать() Цикл 
		Если ЧтениеXML.Имя = "ПараметрКонвертации"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			СтруктураАтрибутов = СтруктураАтрибутовУзла(ЧтениеXML);
			Если ПараметрыКонвертации.Найти(СтруктураАтрибутов.Код,"Параметр") = Неопределено Тогда
				СтрокаПараметр = ПараметрыКонвертации.Добавить();
				СтрокаПараметр.Параметр = СтруктураАтрибутов.Код;
				ЧислоСоздано = ЧислоСоздано + 1;
			КонецЕсли;
			ЧислоОбработано = ЧислоОбработано + 1;
		КонецЕсли;
	КонецЦикла;
	Если ЧислоСоздано > 0 Тогда
		КонвертацияОбъект.Записать();
	КонецЕсли;
	ЧтениеXML = Неопределено;
	ТекстСообщения = НСтр("ru='Параметры конвертации загружены. Обработано'") + ": "+ЧислоОбработано+", " + НСтр("ru='создано новых'") + " " + + ЧислоСоздано;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

// Процедура создает или инициализирует правило для загрузки данных
&НаСервере
Процедура ПолучитьПравилоИСоставКонвертации(Запрос, ИмяСправочника, ПравилоОбъект, СоставКонвертацииОбъект, ПравилоСоздано)
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаПравило = Результаты[0].Выбрать();
	Если ВыборкаПравило.Следующий() Тогда
		ВыборкаПравилоДругиеКонвертации = Результаты[1].Выбрать();
		Если ВыборкаПравилоДругиеКонвертации.Следующий() Тогда
			ПравилоОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
			ПравилоСоздано = Истина;
		Иначе
			ПравилоОбъект = ВыборкаПравило.СсылкаПравило.ПолучитьОбъект();
		КонецЕсли;
		СоставКонвертацииОбъект = ВыборкаПравило.СсылкаСостав.ПолучитьОбъект();
	Иначе
		ПравилоОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
		ПравилоСоздано = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура добавляет и заполняет строку табличной части правила
&НаСервере
Процедура ДобавитьСтрокуВТабличнуюЧасть(ПравилоОбъект, ИмяТЧ, ЧтениеXML)
	СтруктураАтрибутовУзла = СтруктураАтрибутовУзла(ЧтениеXML);
	НовСтрока = ПравилоОбъект[ИмяТЧ].Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, СтруктураАтрибутовУзла);
КонецПроцедуры

// Процедура изменяет состав конвертации в связи с загрузкой правила
&НаСервере
Процедура СоздатьИзменитьСоставКонвертации(ТекСоставКонвертации, ПравилоСсылка)
	Если ТекСоставКонвертации = Неопределено Тогда
		ТекСоставКонвертации = Справочники.СоставыКонвертаций.СоздатьЭлемент();
		ТекСоставКонвертации.Владелец = Объект.Конвертация;
		ТекСоставКонвертации.ЭлементКонвертации = ПравилоСсылка;
		ТекСоставКонвертации.Наименование = СокрЛП(""+ПравилоСсылка + " " + Объект.Конвертация);
		ТекСоставКонвертации.Записать();
	ИначеЕсли ТекСоставКонвертации.ЭлементКонвертации <> ПравилоСсылка Тогда
		ТекСоставКонвертации.ЭлементКонвертации = ПравилоСсылка;
		ТекСоставКонвертации.Записать();
	КонецЕсли;
КонецПроцедуры

// Функция считывает атрибуты текущего узла и записывает их в структуру
&НаСервере
Функция СтруктураАтрибутовУзла(ЧтениеXML)
	СтруктураАтрибутов = Новый Структура;
	Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
		СтруктураАтрибутов.Вставить(ЧтениеXML.Имя, ЧтениеXML.Значение);
	КонецЦикла;
	Возврат СтруктураАтрибутов;
КонецФункции

// Функция читает указанный файл и возвращает соответствующий объект ЧтениеXML
&НаСервере
Функция ПолучитьЧтениеXML(ИмяФайла, Отказ)
	СтрокаДанныеФайла = ТаблицаФайлыПравил.НайтиСтроки(Новый Структура("ИмяФайла", ИмяФайла));
	Если СтрокаДанныеФайла.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка загрузки файла на сервер:'")+ " " +ИмяФайла + НСтр("ru='. Убедитесь, что файл существует и повторите выбор каталога загрузки.'"));
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанныеФайла[0].ИмяВременногоФайла) Тогда
		ВремФайл = Новый Файл(СтрокаДанныеФайла[0].ИмяВременногоФайла);
		Если НЕ ВремФайл.Существует() Тогда
			СтрокаДанныеФайла[0].ИмяВременногоФайла = "";
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаДанныеФайла[0].ИмяВременногоФайла) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаДанныеФайла[0].АдресФайла);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		СтрокаДанныеФайла[0].ИмяВременногоФайла = ИмяВременногоФайла;
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
	КонецЕсли;
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(СтрокаДанныеФайла[0].ИмяВременногоФайла);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось открыть файл'")+ " " +ИмяФайла);
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки;
	Возврат ЧтениеXML
КонецФункции

&НаСервере
Процедура КонвертацияПриИзмененииНаСервере()
	НаименованиеКонвертации = Объект.Конвертация.Наименование;
КонецПроцедуры

&НаКлиенте
Процедура МестоЗагрузкиПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти