#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ПравилоКонвертацииОбъекта") Тогда
		Объект.ПравилоКонвертацииОбъекта = Параметры.ПравилоКонвертацииОбъекта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилоКонвертацииОбъекта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Самостоятельное открытие обработки не предусмотрено'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	ОбновитьТаблицуСопоставления();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьСпискиВыбораСвойств();
	УстановитьДоступность();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СопоставлениеСвойствСвойствоКонфигурацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСвойства("СвойствоКонфигурации", "ТипСвойстваКонфигурации", ВыбранноеЗначение, "СвойствоФормата");
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеСвойствСвойствоФорматаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьВыборСвойства("СвойствоФормата", "ТипСвойстваФормата", ВыбранноеЗначение, "СвойствоКонфигурации");
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияПриИзменении(Элемент)
	ОбновитьТаблицуСопоставления();
	НастроитьСпискиВыбораСвойств();
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеСвойствПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.СопоставлениеСвойств.ТекущиеДанные.Сопоставлено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Автосопоставление(Команда)
	Если Объект.СопоставлениеСвойств.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отсутствуют свойства для автоматического сопоставления'"));
		Возврат;
	КонецЕсли;
	АвтосопоставлениеСвойств();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПКС(Команда)
	ПравилаКонвертацииСвойств = ПолучитьПравилаКонвертацииСвойств();
	Если ПравилаКонвертацииСвойств.Количество() > 0 Тогда
		ПараметрыЗакрытияФормы = Новый Структура();
		ПараметрыЗакрытияФормы.Вставить("ПравилаКонвертацииСвойств", ПравилаКонвертацииСвойств);
		ОповеститьОВыборе(ПараметрыЗакрытияФормы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТаблицуСопоставления()
	Объект.СопоставлениеСвойств.Очистить();
	
	Если ВариантОтображения > 0 Тогда
		ЗаполнитьТаблицуСопоставленныхСвойств();
	КонецЕсли;
	Если ВариантОтображения = 0 ИЛИ ВариантОтображения = 2 Тогда
		ЗаполнитьТаблицуНеСопоставленныхСвойств();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНеСопоставленныхСвойств()
	МассивКонвертаций = Новый Массив;
	КонвертацияДанныхXDTOВызовСервера.ПолучитьСписокКонвертацийДляЭлементаКонвертации(Объект.ПравилоКонвертацииОбъекта, МассивКонвертаций);
	МассивКонфигураций = КонвертацияДанныхXDTOВызовСервера.ПолучитьМассивКонфигурацийИзМассиваКонвертаций(МассивКонвертаций);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЧВерсииФормата.ВерсияФормата КАК ВерсияФормата
	|ПОМЕСТИТЬ ТабВерсииФормата
	|ИЗ
	|	Справочник.Конвертации.ВерсииФормата КАК ТЧВерсииФормата
	|ГДЕ
	|	ТЧВерсииФормата.Ссылка В (&МассивКонвертаций)
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Ссылка.Тип КАК Строка(1000)) КАК ИмяОбъекта
	|ПОМЕСТИТЬ ТабКлючевоеСвойство
	|ИЗ Справочник.СвойстваФормата КАК СвойстваФормата
	|ГДЕ 
	|	СвойстваФормата.Владелец.Наименование = &ОбъектФорматаИмя
	|	И СвойстваФормата.Наименование = ""КлючевыеСвойства""
	|	И СвойстваФормата.ПометкаУдаления = ЛОЖЬ
	|	И СвойстваФормата.ЭтоГруппа = ИСТИНА
	|	И СвойстваФормата.Владелец.Владелец В
	|			(ВЫБРАТЬ ВерсияФормата ИЗ ТабВерсииФормата)
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрСвойства.Наименование,
	|	ВЫРАЗИТЬ(СпрСвойства.ТипыСтрокой КАК Строка(1000)) КАК ТипыСтрокой,
	|	ВЫБОР КОГДА СпрСвойства.ЭтоГруппа ИЛИ СпрСвойства.Родитель <> ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка) ТОГДА
	|		ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоТЧ,
	|	Владелец.Владелец КАК Конфигурация
	|ПОМЕСТИТЬ ТаблицаСвойств
	|ИЗ Справочник.Свойства КАК СпрСвойства
	|ГДЕ Владелец.Наименование = &ОбъектКонфигурацииИмя
	|	И Владелец.Владелец В (&МассивКонфигураций)
	|	И ПометкаУдаления = ЛОЖЬ
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	// Свойства конфигурации - реквизиты шапки
	|ВЫБРАТЬ
	|	СпрСвойства.Наименование КАК СвойствоКонфигурации,
	|	СпрСвойства.ТипыСтрокой КАК ТипСвойстваКонфигурации,
	|	NULL КАК СвойствоФормата,
	|	NULL КАК ТипСвойстваФормата,
	|	СпрСвойства.ЭтоТЧ КАК ЭтоТЧ
	|ИЗ ТаблицаСвойств КАК СпрСвойства
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	Справочник.ПравилаКонвертацииОбъектов.ПравилаКонвертацииСвойств КАК ПКС
	|ПО ПКС.СвойствоКонфигурации = СпрСвойства.Наименование
	|	И ПКС.Ссылка = &ПравилоКонвертацииОбъекта
	|ГДЕ ПКС.СвойствоФормата ЕСТЬ NULL
	|	И СпрСвойства.ЭтоТЧ = ЛОЖЬ
	|ОБЪЕДИНИТЬ ВСЕ
	// Свойства формата - реквизиты шапки
	|ВЫБРАТЬ
	|	NULL КАК СвойствоКонфигурации,
	|	NULL КАК ТипСвойстваКонфигурации,
	|	СпрСвойства.Наименование КАК СвойствоФормата,
	|	Максимум(ВЫРАЗИТЬ(СпрСвойства.Тип КАК Строка(1000))) КАК ТипСвойстваФормата,
	|	ВЫБОР КОГДА СпрСвойства.ЭтоГруппа ИЛИ СпрСвойства.Родитель <> ЗНАЧЕНИЕ(Справочник.СвойстваФормата.ПустаяСсылка) ТОГДА
	|	ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоТЧ
	|ИЗ Справочник.СвойстваФормата КАК СпрСвойства
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	Справочник.ПравилаКонвертацииОбъектов.ПравилаКонвертацииСвойств КАК ПКС
	|ПО ПКС.СвойствоФормата = СпрСвойства.Наименование
	|	И ПКС.Ссылка = &ПравилоКонвертацииОбъекта
	|ГДЕ СпрСвойства.Владелец.Наименование = &ОбъектФорматаИмя
	|	И СпрСвойства.ПометкаУдаления = ЛОЖЬ
	|	И СпрСвойства.Владелец.Владелец В (ВЫБРАТЬ ВерсияФормата ИЗ ТабВерсииФормата)
	|	И ПКС.СвойствоКонфигурации ЕСТЬ NULL
	|	И НЕ (СпрСвойства.ЭтоГруппа ИЛИ СпрСвойства.Родитель <> ЗНАЧЕНИЕ(Справочник.СвойстваФормата.ПустаяСсылка))
	|СГРУППИРОВАТЬ ПО
	|	СпрСвойства.Наименование,
	|	ВЫБОР КОГДА СпрСвойства.ЭтоГруппа ИЛИ СпрСвойства.Родитель <> ЗНАЧЕНИЕ(Справочник.СвойстваФормата.ПустаяСсылка) ТОГДА
	|	ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	|ОБЪЕДИНИТЬ ВСЕ
	// Свойства формата входящие в состав ключевых свойств
	|ВЫБРАТЬ
	|	NULL КАК СвойствоКонфигурации,
	|	NULL КАК ТипСвойстваКонфигурации,
	|	СпрСвойства.Наименование КАК СвойствоФормата,
	|	Максимум(ВЫРАЗИТЬ(СпрСвойства.Тип КАК Строка(1000))) КАК ТипСвойстваФормата,
	|	ВЫБОР КОГДА СпрСвойства.ЭтоГруппа ИЛИ СпрСвойства.Родитель <> ЗНАЧЕНИЕ(Справочник.СвойстваФормата.ПустаяСсылка) ТОГДА
	|	ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоТЧ
	|ИЗ
	|	Справочник.СвойстваФормата КАК СпрСвойства
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	Справочник.ПравилаКонвертацииОбъектов.ПравилаКонвертацииСвойств КАК ПКС
	|ПО ПКС.СвойствоФормата = СпрСвойства.Наименование
	|	И ПКС.Ссылка = &ПравилоКонвертацииОбъекта
	|ГДЕ
	|	ВЫРАЗИТЬ(СпрСвойства.Родитель.Тип КАК Строка(1000)) В (ВЫБРАТЬ ИмяОбъекта ИЗ ТабКлючевоеСвойство)
	|	И СпрСвойства.ПометкаУдаления = ЛОЖЬ
	|	И СпрСвойства.Владелец.Владелец В (ВЫБРАТЬ ВерсияФормата ИЗ ТабВерсииФормата)
	|	И ПКС.СвойствоКонфигурации ЕСТЬ NULL
	|	И НЕ (СпрСвойства.ЭтоГруппа ИЛИ СпрСвойства.Родитель = ЗНАЧЕНИЕ(Справочник.СвойстваФормата.ПустаяСсылка))
	|СГРУППИРОВАТЬ ПО
	|	СпрСвойства.Наименование,
	|	ВЫБОР КОГДА СпрСвойства.ЭтоГруппа ИЛИ СпрСвойства.Родитель <> ЗНАЧЕНИЕ(Справочник.СвойстваФормата.ПустаяСсылка) ТОГДА
	|	ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	|";
	Запрос.УстановитьПараметр("ПравилоКонвертацииОбъекта", Объект.ПравилоКонвертацииОбъекта);
	Запрос.УстановитьПараметр("ОбъектКонфигурацииИмя", Объект.ПравилоКонвертацииОбъекта.ОбъектКонфигурации);
	Запрос.УстановитьПараметр("ОбъектФорматаИмя", Объект.ПравилоКонвертацииОбъекта.ОбъектФормата);
	Запрос.УстановитьПараметр("МассивКонвертаций", МассивКонвертаций);
	Запрос.УстановитьПараметр("МассивКонфигураций", МассивКонфигураций);

	ТаблицаНесопоставленныхСвойств = Запрос.Выполнить().Выгрузить();
	ТаблицаНесопоставленныхСвойств.Сортировать("СвойствоФормата ВОЗР, СвойствоКонфигурации ВОЗР");
	
	СписокСвойствКонфигурации.Очистить();
	СписокСвойствФормата.Очистить();

	Для Каждого СтрокаСвойств Из ТаблицаНесопоставленныхСвойств Цикл
		Если СокрЛП(СтрокаСвойств.СвойствоКонфигурации) <> "" Тогда
			СписокСвойствКонфигурации.Добавить(СтрокаСвойств.СвойствоКонфигурации);
		КонецЕсли;
		Если СокрЛП(СтрокаСвойств.СвойствоФормата) <> "" Тогда
			СписокСвойствФормата.Добавить(СтрокаСвойств.СвойствоФормата);
		КонецЕсли;
		СтрокаСвойствНовая = Объект.СопоставлениеСвойств.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСвойствНовая, СтрокаСвойств);
	КонецЦикла;
	СписокСвойствКонфигурации.СортироватьПоЗначению();
	СписокСвойствФормата.СортироватьПоЗначению();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСопоставленныхСвойств()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|СвойствоКонфигурации,
	|СвойствоФормата,
	|ТипСвойстваКонфигурации,
	|ТипСвойстваФормата,
	|ИСТИНА КАК Сопоставлено
	|ИЗ Справочник.ПравилаКонвертацииОбъектов.ПравилаКонвертацииСвойств
	|ГДЕ Ссылка = &ПравилоКонвертацииОбъекта
	|УПОРЯДОЧИТЬ ПО СвойствоФормата ВОЗР";
	Запрос.УстановитьПараметр("ПравилоКонвертацииОбъекта", Объект.ПравилоКонвертацииОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаСвойствНовая = Объект.СопоставлениеСвойств.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСвойствНовая, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АвтосопоставлениеСвойств()
	МассивСтрокКУдалению = Новый Массив;
	ТаблицаСопоставления = Объект.СопоставлениеСвойств.Выгрузить();
	// Шаг1. Предопределенные сопоставления
	СтрокаКонфигурации = ТаблицаСопоставления.Найти("Родитель", "СвойствоКонфигурации");
	Если СтрокаКонфигурации <> Неопределено И НЕ СтрокаКонфигурации.Сопоставлено Тогда
		СтрокаФормата = ТаблицаСопоставления.Найти("Группа", "СвойствоФормата");
		Если СтрокаФормата <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаКонфигурации, СтрокаФормата, "СвойствоФормата, ТипСвойстваФормата");
			СтрокаКонфигурации.СоздатьПКС = Истина;
			МассивСтрокКУдалению.Добавить(СтрокаФормата);
		КонецЕсли;
	КонецЕсли;
	
	// Шаг2. Сопоставление по имени
	Для Каждого СтрокаСопоставление Из ТаблицаСопоставления Цикл
		Если СтрокаСопоставление.СоздатьПКС ИЛИ СтрокаСопоставление.Сопоставлено
			ИЛИ СтрокаСопоставление.ЭтоТЧ Тогда
			Продолжить;
		КонецЕсли;
		Если СокрЛП(СтрокаСопоставление.СвойствоКонфигурации) <> ""
			И СокрЛП(СтрокаСопоставление.СвойствоФормата) = "" Тогда
			СтруктураПоиска = Новый Структура("СвойствоКонфигурации, СвойствоФормата, Сопоставлено", "", СокрЛП(СтрокаСопоставление.СвойствоКонфигурации), Ложь);
			СтрокиФормата = ТаблицаСопоставления.НайтиСтроки(СтруктураПоиска);
			Если СтрокиФормата.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ПодходящаяСтрока Из СтрокиФормата Цикл
				Если МассивСтрокКУдалению.Найти(ПодходящаяСтрока) = Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(СтрокаСопоставление, ПодходящаяСтрока, "СвойствоФормата, ТипСвойстваФормата");
					СтрокаСопоставление.СоздатьПКС = Истина;
					МассивСтрокКУдалению.Добавить(ПодходящаяСтрока);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассива Из МассивСтрокКУдалению Цикл
		ТаблицаСопоставления.Удалить(ЭлементМассива);
	КонецЦикла;
	МассивСтрокКУдалению.Очистить();
	СтруктураПоиска = Новый Структура("СвойствоКонфигурации, Сопоставлено", "", Ложь);
	СтрокиФормата = ТаблицаСопоставления.НайтиСтроки(СтруктураПоиска);
	Если СтрокиФормата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Шаг3. Сопоставление по ссылочному типу
	Для Каждого СтрокаСопоставление Из ТаблицаСопоставления Цикл
		Если СтрокаСопоставление.СоздатьПКС ИЛИ СтрокаСопоставление.Сопоставлено
			ИЛИ СтрокаСопоставление.ЭтоТЧ Тогда
			Продолжить;
		КонецЕсли;
		Если СокрЛП(СтрокаСопоставление.СвойствоКонфигурации) <> ""
			И СокрЛП(СтрокаСопоставление.СвойствоФормата) = "" Тогда
			
			ПозицияТочки = Найти(СтрокаСопоставление.ТипСвойстваКонфигурации,".");
			Если ПозицияТочки = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПодстрокаТип = Прав(СокрЛП(СтрокаСопоставление.ТипСвойстваКонфигурации), СтрДлина(СокрЛП(СтрокаСопоставление.ТипСвойстваКонфигурации))-ПозицияТочки);
			
			Для Каждого СтрокаФормата Из СтрокиФормата Цикл
				Если Найти(СтрокаФормата.ТипСвойстваФормата, ПодстрокаТип) > 0
					И МассивСтрокКУдалению.Найти(СтрокаФормата) = Неопределено 
					И НЕ СтрокаФормата.Сопоставлено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаСопоставление, СтрокаФормата, "СвойствоФормата, ТипСвойстваФормата");
					СтрокаСопоставление.СоздатьПКС = Истина;
					МассивСтрокКУдалению.Добавить(СтрокаФормата);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассива Из МассивСтрокКУдалению Цикл
		ТаблицаСопоставления.Удалить(ЭлементМассива);
	КонецЦикла;
	ТаблицаСопоставления.Сортировать("Сопоставлено убыв, СоздатьПКС убыв, СвойствоКонфигурации возр");
	Объект.СопоставлениеСвойств.Загрузить(ТаблицаСопоставления);
КонецПроцедуры

&НаСервере
Функция ПолучитьПравилаКонвертацииСвойств()
	МассивПКС = Новый Массив();
	Для Каждого СтрокаСопоставления Из Объект.СопоставлениеСвойств Цикл
		Если НЕ СтрокаСопоставления.СоздатьПКС ИЛИ СтрокаСопоставления.Сопоставлено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанныхСтроки = Новый Структура;
		СтруктураДанныхСтроки.Вставить("Отключить");
		СтруктураДанныхСтроки.Вставить("ИспользуетсяАлгоритмКонвертации");
		СтруктураДанныхСтроки.Вставить("Комментарий");
		СтруктураДанныхСтроки.Вставить("СвойствоКонфигурации");
		СтруктураДанныхСтроки.Вставить("СвойствоФормата");
		СтруктураДанныхСтроки.Вставить("ТипСвойстваКонфигурации");
		СтруктураДанныхСтроки.Вставить("ТипСвойстваФормата");
		СтруктураДанныхСтроки.Вставить("ПолноеИмяСвойстваКонфигурации");
		СтруктураДанныхСтроки.Вставить("ПолноеИмяСвойстваФормата");
		СтруктураДанныхСтроки.Вставить("ПравилоКонвертацииСвойства");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, СтрокаСопоставления);
		// Табличная Часть
		ПозицияТочки = Найти(СтрокаСопоставления.СвойствоФормата, ".");
		Если ПозицияТочки > 0 Тогда
			СтруктураДанныхСтроки.СвойствоФормата = Сред(СтрокаСопоставления.свойствоФормата, ПозицияТочки + 1);
			СтруктураДанныхСтроки.ГруппаСвойствФормата = Лев(СтрокаСопоставления.свойствоФормата, ПозицияТочки -1);
		КонецЕсли;
		ПозицияТочки = Найти(СтрокаСопоставления.СвойствоКонфигурации, ".");
		Если ПозицияТочки > 0 Тогда
			СтруктураДанныхСтроки.СвойствоКонфигурации = Сред(СтрокаСопоставления.СвойствоКонфигурации, ПозицияТочки + 1);
			СтруктураДанныхСтроки.ГруппаСвойствКонфигурации = Лев(СтрокаСопоставления.СвойствоКонфигурации, ПозицияТочки -1);
		КонецЕсли;
		СтруктураДанныхСтроки.ПолноеИмяСвойстваФормата = СтрокаСопоставления.СвойствоФормата;
		СтруктураДанныхСтроки.ПолноеИмяСвойстваКонфигурации = СтрокаСопоставления.СвойствоКонфигурации;
		МассивПКС.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	
	Возврат МассивПКС;
КонецФункции

&НаКлиенте
Процедура УстановитьДоступность()
	Если ВариантОтображения = 0 ИЛИ ВариантОтображения = 2 Тогда
		Элементы.ФормаАвтосопоставление.Доступность = Истина;
		Элементы.ФормаСоздатьПКС.Доступность = Истина;
	Иначе
		Элементы.ФормаАвтосопоставление.Доступность = Ложь;
		Элементы.ФормаСоздатьПКС.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСпискиВыбораСвойств()
	КонвертацияДанныхXDTOКлиент.ЗаполнитьСписокВыбораЭлементаФормы(
		Элементы.СопоставлениеСвойствСвойствоКонфигурации, 
		СписокСвойствКонфигурации);
	КонвертацияДанныхXDTOКлиент.ЗаполнитьСписокВыбораЭлементаФормы(
		Элементы.СопоставлениеСвойствСвойствоФормата, 
		СписокСвойствФормата);
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСвойства(ИмяСвойства, ИмяТипСвойства, ЗначениеСвойства, ИмяВторогоСвойства)
	Для Каждого СтрокаНесопоставленные Из Объект.СопоставлениеСвойств Цикл
		Если СтрокаНесопоставленные[ИмяСвойства] = ЗначениеСвойства
			И СтрокаНесопоставленные.НомерСтроки <> Элементы.СопоставлениеСвойств.ТекущиеДанные.НомерСтроки Тогда
			ТипСвойства = СтрокаНесопоставленные[ИмяТипСвойства];
			Объект.СопоставлениеСвойств.Удалить(СтрокаНесопоставленные.НомерСтроки -1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.СопоставлениеСвойств.ТекущиеДанные[ИмяТипСвойства] = ТипСвойства;
	
	Если ЗначениеЗаполнено(Элементы.СопоставлениеСвойств.ТекущиеДанные[ИмяВторогоСвойства]) Тогда
		Элементы.СопоставлениеСвойств.ТекущиеДанные.СоздатьПКС = Истина;
	ИначеЕсли Элементы.СопоставлениеСвойств.ТекущиеДанные.СоздатьПКС Тогда
		 Элементы.СопоставлениеСвойств.ТекущиеДанные.СоздатьПКС = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти



