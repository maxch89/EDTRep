#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ОписаниеПеременных
Перем НомерСтрокиНачалоАлгоритмов, НомерСтрокиКонецАлгоритмов;
#КонецОбласти
#Область ПрограммныйИнтерфейс
// Процедура обрабатывает текст модуля и загружает обработчики в соответствующие правила.
// Параметры: 
//  ТХДок - Строка - многострочная строка, содержащая модуль.
Процедура РазобратьТекстМодуля(ТХДок) Экспорт
	
	ТаблицаРезультатов = ПодготовитьСтруктуруТаблицыРезультат();
	
	ЗагрузитьПроцедурыИФункцииВТаблицу(ТХДок, ТаблицаРезультатов);
		
	ЗагрузитьПроцедурыИФункцииВОбъектыМетаданных(ТаблицаРезультатов);
КонецПроцедуры
#КонецОбласти
#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьПроцедурыИФункцииВТаблицу(ТХДок, ТаблицаРезультатов)
	Стр = "";
	СтрАнализа = ПодготовитьСтруктуруДляАнализаТекстаМодуля();
	Для НомерСтроки = 1 По СтрЧислоСтрок(ТХДок) Цикл
		Стр = СтрПолучитьСтроку(ТХДок, НомерСтроки);
		ОбработатьСтрокуВПоискеИмениФункцииИлиПроцедуры(Стр, СтрАнализа, НомерСтроки, ТаблицаРезультатов);
	КонецЦикла;
	Если СтрАнализа.Статус <> 0 Тогда
		ТекстСообщения = НСтр("ru='Ошибка : Не найдено окончание функции или процедуры'") + " " + СтрАнализа.ИмяПроцедурыФункции;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьПроцедурыИФункцииВОбъектыМетаданных(ТаблицаРезультатов)
	ЕстьИзменения = Ложь;
	Для Каждого СтрокаРезультат Из ТаблицаРезультатов Цикл
		ОпределитьИмяОбъектаМетаданных(СтрокаРезультат);
		Если НЕ ЗначениеЗаполнено(СтрокаРезультат.ИмяОбъектаМетаданных)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаРезультат.ИмяРеквизитаОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		ЗагрузитьОбработчикВОбъектМетаданных(СтрокаРезультат, ЕстьИзменения);
	КонецЦикла;
	ТекстСообщения = НСтр("ru='Обработка модуля менеджера для конвертации'") + " " + Конвертация + " " + НСтр("ru='завершена.'");
	Если ЕстьИзменения Тогда
		ТекстСообщения = ТекстСообщения + " " + НСтр("ru='Изменения загружены.'");
	Иначе
		ТекстСообщения = ТекстСообщения + " " + НСтр("ru='Изменений не обнаружено.'");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

Функция ПодготовитьСтруктуруТаблицыРезультат()
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("ИмяПроцедурыФункции");
	ТабЗнач.Колонки.Добавить("ЭтоФункция");
	ТабЗнач.Колонки.Добавить("ТекстМодуля");
	ТабЗнач.Колонки.Добавить("Параметры");
	ТабЗнач.Колонки.Добавить("ИмяРеквизитаОбъекта");
	ТабЗнач.Колонки.Добавить("НаименованиеОбъекта");
	ТабЗнач.Колонки.Добавить("ИмяОбъектаМетаданных");
	ТабЗнач.Колонки.Добавить("ЭтоАлгоритм");
	ТабЗнач.Колонки.Добавить("Экспортный");
	Возврат ТабЗнач;
КонецФункции

Процедура ОпределитьИмяОбъектаМетаданных(СтрокаРезультат)
	Если СокрЛП(СтрокаРезультат.ИмяПроцедурыФункции) = "" Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаРезультат.ЭтоАлгоритм Тогда
		СтрокаРезультат.ИмяРеквизитаОбъекта = "Алгоритм";
		СтрокаРезультат.НаименованиеОбъекта = СокрЛП(СтрокаРезультат.ИмяПроцедурыФункции);
		СтрокаРезультат.ИмяОбъектаМетаданных = "Алгоритмы";
	ИначеЕсли Найти(СтрокаРезультат.ИмяПроцедурыФункции, "ПОД_") Тогда
		СтрокаРезультат.НаименованиеОбъекта = СтрЗаменить(СокрЛП(СтрокаРезультат.ИмяПроцедурыФункции), "ПОД_", "");
		Если Найти(СтрокаРезультат.ИмяПроцедурыФункции, "_ПриОбработке") Тогда
			СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмПриОбработке";
			СтрокаРезультат.НаименованиеОбъекта = СтрЗаменить(СтрокаРезультат.НаименованиеОбъекта, "_ПриОбработке", "");

		ИначеЕсли Найти(СтрокаРезультат.ИмяПроцедурыФункции, "_ВыборкаДанных") Тогда
			СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмВыборкаДанных";
			СтрокаРезультат.НаименованиеОбъекта = СтрЗаменить(СтрокаРезультат.НаименованиеОбъекта, "_ВыборкаДанных", "");
		КонецЕсли;
		
		СтрокаРезультат.ИмяОбъектаМетаданных = "ПравилаОбработкиДанных";
	ИначеЕсли Найти(СтрокаРезультат.ИмяПроцедурыФункции, "ПКО_") Тогда
		СтрокаРезультат.НаименованиеОбъекта = СтрЗаменить(СокрЛП(СтрокаРезультат.ИмяПроцедурыФункции), "ПКО_", "");
		Если Найти(СтрокаРезультат.ИмяПроцедурыФункции, "_ПриОтправкеДанных") Тогда
			СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмПриОтправкеДанных";
			СтрокаРезультат.НаименованиеОбъекта = СтрЗаменить(СтрокаРезультат.НаименованиеОбъекта, "_ПриОтправкеДанных", "");
		ИначеЕсли Найти(СтрокаРезультат.ИмяПроцедурыФункции, "_ПриКонвертацииДанныхXDTO") Тогда
			СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмПередПолучениемДанных";
			СтрокаРезультат.НаименованиеОбъекта = СтрЗаменить(СтрокаРезультат.НаименованиеОбъекта, "_ПриКонвертацииДанныхXDTO", "");
		ИначеЕсли Найти(СтрокаРезультат.ИмяПроцедурыФункции, "_ПередЗаписьюПолученныхДанных") Тогда
			СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмПриПолученииДанных";
			СтрокаРезультат.НаименованиеОбъекта = СтрЗаменить(СтрокаРезультат.НаименованиеОбъекта, "_ПередЗаписьюПолученныхДанных", "");
		ИначеЕсли Найти(СтрокаРезультат.ИмяПроцедурыФункции, "_ВыборкаДанных") Тогда
			СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмПриПолученииДанных";
			СтрокаРезультат.НаименованиеОбъекта = СтрЗаменить(СтрокаРезультат.НаименованиеОбъекта, "_ПередЗаписьюПолученныхДанных", "");

		Иначе
			Возврат;
		КонецЕсли;
		
		СтрокаРезультат.ИмяОбъектаМетаданных = "ПравилаКонвертацииОбъектов";
	ИначеЕсли СокрЛП(СтрокаРезультат.ИмяПроцедурыФункции) = "ПередКонвертацией" Тогда
		СтрокаРезультат.ИмяОбъектаМетаданных = "Конвертации";
		СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмПередКонвертацией";
	ИначеЕсли СокрЛП(СтрокаРезультат.ИмяПроцедурыФункции) = "ПослеКонвертации" Тогда
		СтрокаРезультат.ИмяОбъектаМетаданных = "Конвертации";
		СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмПослеКонвертации";
	ИначеЕсли СокрЛП(СтрокаРезультат.ИмяПроцедурыФункции) = "ПередОтложеннымЗаполнением" Тогда
		СтрокаРезультат.ИмяОбъектаМетаданных = "Конвертации";
		СтрокаРезультат.ИмяРеквизитаОбъекта = "АлгоритмПередОтложеннымЗаполнением";
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьОбработчикВОбъектМетаданных(СтрокаРезультат, ЕстьИзменения)
	Если СтрокаРезультат.ИмяОбъектаМетаданных = "Конвертации" Тогда
		// Меняется сам элемент конвертации.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 " + СтрокаРезультат.ИмяРеквизитаОбъекта + "  КАК ТекстОбработчика
		|	ИЗ Справочник.Конвертации
		|ГДЕ Ссылка = &Конвертация ";
		Запрос.УстановитьПараметр("Конвертация", Конвертация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если СокрЛП(Выборка.ТекстОбработчика) <> СокрЛП(СтрокаРезультат.ТекстМодуля) Тогда
				ОбъектМД = Конвертация.ПолучитьОбъект();
				ОбъектМД[СтрокаРезультат.ИмяРеквизитаОбъекта] = СокрЛП(СтрокаРезультат.ТекстМодуля);
				ОбъектМД.Записать();
				Если НЕ ЕстьИзменения Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ИмяРеквизитаПоиска = "Код";
	Если СтрокаРезультат.ИмяОбъектаМетаданных = "ПравилаОбработкиДанных" Тогда
		ИмяРеквизитаПоиска = "Наименование";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	МДСправочник.Ссылка КАК Ссылка,
	|	МДСправочник." + СтрокаРезультат.ИмяРеквизитаОбъекта + " КАК ТекстОбработчика,
	|	"+?(СтрокаРезультат.ИмяОбъектаМетаданных = "Алгоритмы", "МДСправочник.Параметры", "NULL") + " КАК Параметры,
	|	"+?(СтрокаРезультат.ИмяОбъектаМетаданных = "Алгоритмы", "МДСправочник.Экспортный", "NULL") + " КАК Экспортный,
	|	"+?(СтрокаРезультат.ИмяОбъектаМетаданных = "Алгоритмы", "МДСправочник.ЭтоФункция", "NULL") + " КАК ЭтоФункция
	|ИЗ Справочник." + СтрокаРезультат.ИмяОбъектаМетаданных + " КАК МДСправочник
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СоставыКонвертаций КАК СоставМД
	|ПО СоставМД.Владелец = &Конвертация
	|	И СоставМД.ЭлементКонвертации = МДСправочник.Ссылка
	|	И СоставМД.Отключить = ЛОЖЬ
	|ГДЕ МДСправочник." + ИмяРеквизитаПоиска + " = &НаименованиеЭлементаКонвертации
	|";
	Запрос.УстановитьПараметр("Конвертация", Конвертация);
	Запрос.УстановитьПараметр("НаименованиеЭлементаКонвертации", СтрокаРезультат.НаименованиеОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Если СтрокаРезультат.ИмяОбъектаМетаданных = "Алгоритмы"
			И СоздаватьОтсутствующиеАлгоритмы Тогда
			СоздатьНовыйАлгоритм(СтрокаРезультат);
			ЕстьИзменения = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ЕстьИзмененияЛок = Ложь;
	Если СокрЛП(Выборка.ТекстОбработчика) <> СокрЛП(СтрокаРезультат.ТекстМодуля) Тогда
		ЕстьИзмененияЛок = Истина;
	КонецЕсли;
	Если ТипЗнч(Выборка.ЭтоФункция) = Тип("Булево") И Выборка.ЭтоФункция <> СтрокаРезультат.ЭтоФункция Тогда
		ЕстьИзмененияЛок = Истина;
	КонецЕсли;
	Если ТипЗнч(Выборка.Экспортный) = Тип("Булево") И Выборка.Экспортный <> СтрокаРезультат.Экспортный Тогда
		ЕстьИзмененияЛок = Истина;
	КонецЕсли;
	Если ТипЗнч(Выборка.Параметры) = Тип("Строка") И Выборка.Параметры <> СтрокаРезультат.Параметры Тогда
		ЕстьИзмененияЛок = Истина;
	КонецЕсли;

	Если НЕ ЕстьИзмененияЛок Тогда
		Возврат;
	КонецЕсли;
	ЕстьИзменения = Истина;
	ОбъектМД = Выборка.Ссылка.ПолучитьОбъект();
	ОбъектМД[СтрокаРезультат.ИмяРеквизитаОбъекта] = СокрЛП(СтрокаРезультат.ТекстМодуля);
	Если СтрокаРезультат.ИмяОбъектаМетаданных = "Алгоритмы" Тогда
		ОбъектМД.ЭтоФункция = СтрокаРезультат.ЭтоФункция;
		ОбъектМД.Параметры = СтрокаРезультат.Параметры;
		ОбъектМД.Экспортный = СтрокаРезультат.Экспортный;
	КонецЕсли;
	ОбъектМД.Записать();
КонецПроцедуры

Процедура СоздатьНовыйАлгоритм(СтрокаРезультат)
	АлгоритмОбъект = Справочники.Алгоритмы.СоздатьЭлемент();
	АлгоритмОбъект.Код = СокрЛП(СтрокаРезультат.НаименованиеОбъекта);
	АлгоритмОбъект.ЭтоФункция = СтрокаРезультат.ЭтоФункция;
	АлгоритмОбъект.Параметры = СтрокаРезультат.Параметры;
	АлгоритмОбъект.Алгоритм = СокрЛП(СтрокаРезультат.ТекстМодуля);
	АлгоритмОбъект.Экспортный = СтрокаРезультат.Экспортный;
	АлгоритмОбъект.Записать();
	СоставКонвертаций = Справочники.СоставыКонвертаций.СоздатьЭлемент();
	СоставКонвертаций.Владелец = Конвертация;
	СоставКонвертаций.Наименование = СокрЛП(АлгоритмОбъект)+" "+СокрЛП(Конвертация);
	СоставКонвертаций.ЭлементКонвертации = АлгоритмОбъект.Ссылка;
	СоставКонвертаций.Записать();
КонецПроцедуры

// Служебные  процедуры для парсинга текста.

Функция ПодготовитьСтруктуруДляАнализаТекстаМодуля()

	Стр = Новый Структура;
	Стр.Вставить("ЭтоФункция",  Ложь);
	Стр.Вставить("Статус",      0);
	Стр.Вставить("ИмяПроцедурыФункции","");
	Стр.Вставить("Параметры","");
	Стр.Вставить("ТекстМодуля", 0);
	Стр.Вставить("Экспортный", Ложь);
	// 0 - ищется Функция или Процедура.
	// 1 - ищется имя функции или процедуры.
	// 2 - ищется левая скобка.
	// 3 - ищется правая скобка.
	// 4 - ищется КонецФункции или КонецПроцедуры.
	
	Возврат Стр;

КонецФункции // ПодготовитьСтруктуруДляАнализаТекстаМодуля()

Функция ОбработатьСтрокуВПоискеИмениФункцииИлиПроцедуры(Стр, СтрАнализа, НомерСтроки, ТаблицаРезультатов)
	Если Найти(Стр, "// АЛГОРИТМЫ") > 0 
		Или Найти(Стр, "#Область Алгоритмы") > 0 Тогда
		НомерСтрокиНачалоАлгоритмов = НомерСтроки + 1;
	КонецЕсли;
	Если Найти(Стр, "// ПАРАМЕТРЫ КОНВЕРТАЦИИ") > 0 
		Или Найти(Стр, "#Область Параметры") Тогда
		НомерСтрокиКонецАлгоритмов = НомерСтроки - 1;
	КонецЕсли;			
	
	Если СтрАнализа.Статус <> 4 Тогда
		Если ПустаяСтрока(Стр) Тогда
			Возврат Истина;
		КонецЕсли;
		Если Лев(СокрЛП(Стр),1) = "#" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрАнализа.Статус = 0 Тогда
		// 0 - ищется Функция или Процедура.
		ПС = ВРЕГ(ПервоеСлово(Стр));
		Если ПС = "ФУНКЦИЯ" Тогда
			СтрАнализа.Статус = 1;
			СтрАнализа.ЭтоФункция = Истина;
			СтрАнализа.Параметры = "";
		ИначеЕсли ПС = "ПРОЦЕДУРА" Тогда
			СтрАнализа.Статус = 1;
			СтрАнализа.ЭтоФункция = Ложь;
			СтрАнализа.Параметры = "";
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если СтрАнализа.Статус = 1 Тогда
		// 1 - ищется имя функции или процедуры.
		Поз = Найти(Стр, "(");
		Если Поз = 0 Тогда
			СтрАнализа.ИмяПроцедурыФункции = Стр;
			Стр = "";
		Иначе
			СтрАнализа.ИмяПроцедурыФункции = СокрЛП(Лев(Стр, Поз-1));
			Стр = СокрЛП(Сред(Стр, Поз));
		КонецЕсли;
		СтрАнализа.Статус = 2;
		
		Если ПустаяСтрока(Стр) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрАнализа.Статус = 2 Тогда
		// 2 - ищется левая скобка.
		Если Лев(Стр, 1) <> "(" Тогда
			СтрОшибка = НСтр("ru='В строке'") + " " + НомерСтроки + " " + НСтр("ru='ожидается символ'") + " '('";
			Возврат Ложь;
		КонецЕсли;
		
		СтрАнализа.Статус = 3;
		Стр = СокрЛП(Сред(Стр,2));
		Если ПустаяСтрока(Стр) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрАнализа.Статус = 3 Тогда
		// 3 - ищется правая скобка.
		Поз = Найти(Стр, ")");
		Если Поз=0 Тогда
			Возврат Истина;
		КонецЕсли;
		// Сохраняем параметры если они есть.
		Если Поз > 1 Тогда
			СтрАнализа.Параметры = СокрЛП(Лев(Стр, Поз-1));
		КонецЕсли;
		// Анализируем наличие ключевого слова Экспорт после закрывающей скобки.
		Хвост = Сред(Стр, Поз+1);
		Если Найти(Хвост, "Экспорт") > 0 Тогда
			СтрАнализа.Экспортный = Истина;
		Иначе
			СтрАнализа.Экспортный = Ложь;
		КонецЕсли;

		СтрАнализа.Статус = 4;
		СтрАнализа.ТекстМодуля = "";
		Возврат Истина;
	КонецЕсли;
	
	Если СтрАнализа.Статус = 4 Тогда
		// 4 - ищется КонецФункции или КонецПроцедуры.
		КопияСтр = Стр;
		ПС = ВРЕГ(ПервоеСлово(КопияСтр));
		Если (ПС <> "КОНЕЦФУНКЦИИ") И (ПС <> "КОНЕЦПРОЦЕДУРЫ") Тогда
			
			Если СокрЛП(СтрАнализа.ТекстМодуля) <> "" Тогда
				СтрАнализа.ТекстМодуля = СтрАнализа.ТекстМодуля + Символы.ПС;
			КонецЕсли;
			// Убираем первый символ tab - он подставляется автоматически при выгрузке модуля.
			Если Лев(Стр, 1) = Символы.Таб Тогда
				Стр = Сред(Стр,2);
			КонецЕсли;
			СтрАнализа.ТекстМодуля = СтрАнализа.ТекстМодуля + Стр;
			Возврат Истина;
		КонецЕсли;
		
		СтрАнализа.Статус = 0;
		
		новСтр = ТаблицаРезультатов.Добавить();
		новСтр.ИмяПроцедурыФункции      = СтрАнализа.ИмяПроцедурыФункции;
		новСтр.ЭтоФункция = СтрАнализа.ЭтоФункция;
		новСтр.Параметры = СтрАнализа.Параметры;
		новСтр.ТекстМодуля = СтрАнализа.ТекстМодуля;
		Если НомерСтроки >= НомерСтрокиНачалоАлгоритмов 
			И НомерСтрокиНачалоАлгоритмов <> 0
			И НомерСтрокиКонецАлгоритмов = 0 Тогда
			НовСтр.ЭтоАлгоритм = Истина;
			// Признак экспорта имеет смысл только для алгоритмов.
			НовСтр.Экспортный = СтрАнализа.Экспортный;
		Иначе
			НовСтр.ЭтоАлгоритм = Ложь;
			НовСтр.Экспортный = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Из строки получить первое слово.
Функция ПервоеСлово(Стр)

	Стр = СокрЛП(Стр);
	масСимволов = Новый Массив;
	масСимволов.Добавить(" ");
	масСимволов.Добавить("/");
	масСимволов.Добавить(";");
	масСимволов.Добавить(Символы.Таб);
	
	Поз = 0;
	Для Каждого Симв Из масСимволов Цикл
		ПозС = Найти(Стр, Симв);
		Если ПозС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = ?(Поз=0, ПозС, Мин(Поз, ПозС));
	КонецЦикла;
	
	Если Поз=0 Тогда
		Результат = Стр;
		Стр = "";
	Иначе
		Результат = СокрЛП(Лев(Стр,Поз-1));
		Стр = СокрЛП(Сред(Стр,Поз+1));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 
#КонецОбласти
#Область Инициализация
НомерСтрокиНачалоАлгоритмов = 0;
НомерСтрокиКонецАлгоритмов = 0;
#КонецОбласти
#КонецЕсли
