#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// Перенос данных из параметров в переменные формы
	ПравилоКонвертацииОбъекта		= ЭтаФорма.Параметры.ПравилоКонвертацииОбъекта;
	Отключить 						= ЭтаФорма.Параметры.Отключить;
	ИспользуетсяАлгоритмКонвертации = ЭтаФорма.Параметры.ИспользуетсяАлгоритмКонвертации;
	Комментарий 					= ЭтаФорма.Параметры.Комментарий;
	СвойствоКонфигурации 			= ЭтаФорма.Параметры.СвойствоКонфигурации;
	СвойствоФормата 				= ЭтаФорма.Параметры.СвойствоФормата;
	ГруппаСвойствКонфигурации 		= ЭтаФорма.Параметры.ГруппаСвойствКонфигурации;
	ГруппаСвойствФормата 			= ЭтаФорма.Параметры.ГруппаСвойствФормата;
	ТипСвойстваКонфигурации 		= ЭтаФорма.Параметры.ТипСвойстваКонфигурации;
	ТипСвойстваФормата 				= ЭтаФорма.Параметры.ТипСвойстваФормата;
	ПолноеИмяСвойстваКонфигурации 	= ЭтаФорма.Параметры.ПолноеИмяСвойстваКонфигурации;
	ПолноеИмяСвойстваФормата 		= ЭтаФорма.Параметры.ПолноеИмяСвойстваФормата;
	ПравилоКонвертацииСвойства 		= ЭтаФорма.Параметры.ПравилоКонвертацииСвойства;
	
	ЗаполнитьТаблицыСвойств();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьСпискиВыбораСвойств();
	КонвертацияДанныхXDTOКлиент.ДобавитьТекущееЗначениеВСписокВыбораЭлементаФормы(Элементы.ПравилоКонвертацииСвойства, ПравилоКонвертацииСвойства);
	УказыватьПравилоКонвертацииСвойстваСтрокойПриИзменении(Элементы.УказыватьПравилоКонвертацииСвойстваСтрокой);
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ПравилоКонвертацииСвойстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПравилоКонвертацииСвойстваНачалоВыбораСервер(СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПравилоКонвертацииСвойстваНачалоВыбораСервер(СтандартнаяОбработка)
	Элементы.ПравилоКонвертацииСвойства.СписокВыбора.Очистить();
	
	ТипСвойстваКонфигурации =  СокрЛП(ТипСвойстваКонфигурации);
	ТипСвойстваФормата =  СокрЛП(ТипСвойстваФормата);
	
	СписокКонвертаций = Новый Массив;
	КонвертацияДанныхXDTOВызовСервера.ПолучитьСписокКонвертацийДляЭлементаКонвертации(ПравилоКонвертацииОбъекта, СписокКонвертаций);
	
	ПКПД = Ложь;
	ПКО = Ложь;
	УчитыватьОбъектКонфигурации = Ложь;
	УчитыватьОбъектФормата = Ложь;
	ТипСвойстваФорматаДляЗапроса = ТипСвойстваФормата;
	Если ЗначениеЗаполнено(ТипСвойстваКонфигурации) Тогда
		Если Найти(НРег(ТипСвойстваКонфигурации), "перечислениессылка") > 0 Тогда
			ПКПД = Истина;
		Иначе
			ПКО = Истина;
		КонецЕсли;
		УчитыватьОбъектКонфигурации = Истина;
		УчитыватьОбъектФормата = ЗначениеЗаполнено(ТипСвойстваФормата);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипСвойстваФормата) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
		|ИЗ Справочник.ЗначенияФормата
		|ГДЕ Владелец.Наименование = &ТипСвойстваФормата";
		Запрос.УстановитьПараметр("ТипСвойстваФормата", ТипСвойстваФормата);
		Результат = Запрос.Выполнить();
		УчитыватьОбъектФормата = Истина;
		Если Результат.Пустой() Тогда
			ПКО = Истина;
			Если Найти(ТипСвойстваФормата, "КлючевыеСвойства") > 0 Тогда
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|Владелец.Наименование КАК ТипСвойстваФормата
				|ИЗ Справочник.СвойстваФормата
				|ГДЕ ВЫРАЗИТЬ(Тип КАК Строка(1000)) = &ТипСвойстваФормата И Наименование = ""КлючевыеСвойства""";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ТипСвойстваФорматаДляЗапроса = СокрЛП(Выборка.ТипСвойстваФормата);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПКПД = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ УчитыватьОбъектКонфигурации И НЕ УчитыватьОбъектФормата Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ПустоеПКС = "";
	Если ПКПД Тогда
		// Ищем ПКПД
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПКПД.Код КАК Имя
		|ИЗ Справочник.ПравилаКонвертацииПредопределенныхДанных КАК ПКПД
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.СоставыКонвертаций КАК СоставКонвертации
		|	ПО ПКПД.Ссылка = СоставКонвертации.ЭлементКонвертации
		|		И СоставКонвертации.Владелец В (&МассивКонвертаций)
		|		И СоставКонвертации.Отключить = ЛОЖЬ
		|ГДЕ 
		|	(ПКПД.ОбъектКонфигурации = &ОбъектКонфигурации ИЛИ НЕ &УчитыватьОбъектКонфигурации)
		|	И (ПКПД.ОбъектФормата = &ОбъектФормата ИЛИ НЕ &УчитыватьОбъектФормата)
		|	И (ПКПД.ИспользоватьДляОтправки = &ИспользоватьДляОтправки ИЛИ ПКПД.ИспользоватьДляПолучения = &ИспользоватьДляПолучения)
		|	И НЕ ПКПД.ПометкаУдаления";
	Иначе
		// Ищем ПКО
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|ПКО.Код КАК Имя
		|ИЗ Справочник.ПравилаКонвертацииОбъектов КАК ПКО
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.СоставыКонвертаций КАК СоставКонвертации
		|	ПО ПКО.Ссылка = СоставКонвертации.ЭлементКонвертации
		|		И СоставКонвертации.Владелец В (&МассивКонвертаций)
		|		И СоставКонвертации.Отключить = ЛОЖЬ
		|ГДЕ  
		|	(ПКО.ОбъектКонфигурации = &ОбъектКонфигурации ИЛИ НЕ &УчитыватьОбъектКонфигурации)
		|	И (ПКО.ОбъектФормата = &ОбъектФормата ИЛИ НЕ &УчитыватьОбъектФормата)
		|	И (ПКО.ИспользоватьДляОтправки = &ИспользоватьДляОтправки ИЛИ ПКО.ИспользоватьДляПолучения = &ИспользоватьДляПолучения)";
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивКонвертаций", СписокКонвертаций);
	Запрос.УстановитьПараметр("ИспользоватьДляОтправки", ПравилоКонвертацииОбъекта.ИспользоватьДляОтправки);
	Запрос.УстановитьПараметр("ИспользоватьДляПолучения", ПравилоКонвертацииОбъекта.ИспользоватьДляПолучения);
	Запрос.УстановитьПараметр("ОбъектКонфигурации", ТипСвойстваКонфигурации);
	Запрос.УстановитьПараметр("ОбъектФормата", ТипСвойстваФорматаДляЗапроса);
	Запрос.УстановитьПараметр("УчитыватьОбъектКонфигурации", УчитыватьОбъектКонфигурации);
	Запрос.УстановитьПараметр("УчитыватьОбъектФормата", УчитыватьОбъектФормата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Элементы.ПравилоКонвертацииСвойства.СписокВыбора.Добавить(Выборка.Имя);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоФорматаОчистка(Элемент, СтандартнаяОбработка)
	ГруппаСвойствФормата = "";
	СвойствоФормата = "";
	ТипСвойстваФормата = "";
КонецПроцедуры

&НаКлиенте
Процедура СвойствоКонфигурацииОчистка(Элемент, СтандартнаяОбработка)
	ГруппаСвойствКонфигурации = "";
	СвойствоКонфигурации = "";
	ТипСвойстваКонфигурации = "";
КонецПроцедуры

&НаКлиенте
Процедура СвойствоКонфигурацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если Текст = "" Тогда
		ГруппаСвойствКонфигурации = "";
		СвойствоКонфигурации = "";
		ТипСвойстваКонфигурации = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоФорматаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если Текст = "" Тогда
		ГруппаСвойствФормата = "";
		СвойствоФормата = "";
		ТипСвойстваФормата = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвойствоКонфигурацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПозТочки = Найти(ВыбранноеЗначение, ".");
	Если ПозТочки = 0 Тогда
		ГруппаСвойствКонфигурации = "";
		СвойствоКонфигурации = ВыбранноеЗначение;
	Иначе
		ГруппаСвойствКонфигурации = Лев(ВыбранноеЗначение, ПозТочки - 1);
		СвойствоКонфигурации = Сред(ВыбранноеЗначение, ПозТочки + 1);
	КонецЕсли;

	ТипСвойстваКонфигурации = ОпределитьТипСвойства(ТаблицаСвойствКонфигурации, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СвойствоФорматаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ГруппаСвойствФормата = "";
	СвойствоФормата = ВыбранноеЗначение;
	СтрокиСвойствФормата = Неопределено;
	
	ПозТочки = Найти(ВыбранноеЗначение, ".");
	Если ПозТочки > 0 Тогда
		СтрокиСвойствФормата = ТаблицаСвойствФормата.НайтиСтроки(Новый Структура("Имя", ВыбранноеЗначение));
		Если СтрокиСвойствФормата.Количество() > 0 И ЗначениеЗаполнено(СтрокиСвойствФормата[0].ИмяТЧ) Тогда
			ГруппаСвойствФормата = СтрокиСвойствФормата[0].ИмяТЧ;
			СвойствоФормата = СтрЗаменить(ВыбранноеЗначение, СтрокиСвойствФормата[0].ИмяТЧ + ".", "");
		КонецЕсли;
	КонецЕсли;
	
	ТипСвойстваФормата = ОпределитьТипСвойства(ТаблицаСвойствФормата, ВыбранноеЗначение, СтрокиСвойствФормата);
КонецПроцедуры

&НаКлиенте
Процедура УказыватьПравилоКонвертацииСвойстваСтрокойПриИзменении(Элемент)
	Если УказыватьПравилоКонвертацииСвойстваСтрокой Тогда
		ТекСтраница = Элементы.СтраницаПКССтрокой;
	Иначе
		ТекСтраница = Элементы.СтраницаПКСВыбор;
	КонецЕсли;
	
	Элементы.ГруппаПравилаКонвертацииСвойств.ТекущаяСтраница = ТекСтраница;
КонецПроцедуры

&НаКлиенте
Процедура УказыватьСвойстваСтрокойПриИзменении(Элемент)
	Если УказыватьСвойстваСтрокой Тогда
		ТекСтраница = Элементы.СтраницаСопоставлениеСвойствВручную;
	Иначе
		ТекСтраница = Элементы.СтраницаСопоставлениеСвойствВыбор;
	КонецЕсли;
	
	Элементы.СтраницыСопоставлениеСвойств.ТекущаяСтраница = ТекСтраница;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоКонфигурацииСтрокойПриИзменении(Элемент)
	ЗаполнитьПолноеИмяСвойстваКонфигурации();
КонецПроцедуры

&НаКлиенте
Процедура СвойствоФорматаСтрокойПриИзменении(Элемент)
	ЗаполнитьПолноеИмяСвойстваФормата();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСвойствКонфигурацииСтрокойПриИзменении(Элемент)
	ЗаполнитьПолноеИмяСвойстваКонфигурации();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСвойствФорматаСтрокойПриИзменении(Элемент)
	ЗаполнитьПолноеИмяСвойстваФормата();
КонецПроцедуры

&НаКлиенте
Процедура СвойствоФорматаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыВыбора = Новый Структура("ТаблицаСвойствФормата, ТекущаяСтрока, РежимРаботы", 
					ТаблицаСвойствФормата, ПолноеИмяСвойстваФормата, "СвойствоФормата");
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектаИлиСвойства",ПараметрыФормыВыбора,Элемент,,,,
			Новый ОписаниеОповещения("ВыбраноСвойствоФормата", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
		
		&НаКлиенте
Процедура СвойствоКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыВыбора = Новый Структура("ТаблицаСвойствКонфигурации, ТекущаяСтрока, РежимРаботы", 
					ТаблицаСвойствКонфигурации, ПолноеИмяСвойстваКонфигурации, "СвойствоКонфигурации");
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектаИлиСвойства",ПараметрыФормыВыбора,Элемент,,,,
			Новый ОписаниеОповещения("ВыбраноСвойствоКонфигурации", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


#КонецОбласти
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ТекущееПКС = Новый Структура();
	ТекущееПКС.Вставить("Отключить", Отключить);
	ТекущееПКС.Вставить("ИспользуетсяАлгоритмКонвертации", ИспользуетсяАлгоритмКонвертации);
	ТекущееПКС.Вставить("Комментарий", Комментарий);
	ТекущееПКС.Вставить("СвойствоКонфигурации", СвойствоКонфигурации);
	ТекущееПКС.Вставить("СвойствоФормата", СвойствоФормата);
	ТекущееПКС.Вставить("ГруппаСвойствКонфигурации", ГруппаСвойствКонфигурации);
	ТекущееПКС.Вставить("ГруппаСвойствФормата", ГруппаСвойствФормата);
	ТекущееПКС.Вставить("ТипСвойстваКонфигурации", ТипСвойстваКонфигурации);
	ТекущееПКС.Вставить("ТипСвойстваФормата", ТипСвойстваФормата);
	ТекущееПКС.Вставить("ПолноеИмяСвойстваКонфигурации", ПолноеИмяСвойстваКонфигурации);
	ТекущееПКС.Вставить("ПолноеИмяСвойстваФормата", ПолноеИмяСвойстваФормата);
	ТекущееПКС.Вставить("ПравилоКонвертацииСвойства", ПравилоКонвертацииСвойства);

	ПараметрыЗакрытияФормы = Новый Структура();
	ПараметрыЗакрытияФормы.Вставить("ПравилоКонвертацииСвойства", ТекущееПКС);
	
	ОповеститьОВыборе(ПараметрыЗакрытияФормы);
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицыСвойств()
	КонвертацияДанныхXDTOВызовСервера.ЗаполнитьСписокСвойствКонфигурации(ТаблицаСвойствКонфигурации,
			ПравилоКонвертацииОбъекта, 
			ПравилоКонвертацииОбъекта.ОбъектКонфигурации);  
	КонвертацияДанныхXDTOВызовСервера.ЗаполнитьСписокСвойствФормата(ТаблицаСвойствФормата,
			ПравилоКонвертацииОбъекта,
			ПравилоКонвертацииОбъекта.ОбъектФормата);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСпискиВыбораСвойств()
	КонвертацияДанныхXDTOКлиент.ЗаполнитьСписокВыбораЭлементаФормы(Элементы.СвойствоКонфигурации, ТаблицаСвойствКонфигурации, Истина);
	КонвертацияДанныхXDTOКлиент.ЗаполнитьСписокВыбораЭлементаФормы(Элементы.СвойствоФормата, ТаблицаСвойствФормата, Истина);
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТипСвойства(ТаблицаСвойств, ИмяСвойства, СтрокиТаблицыСвойств = Неопределено)
	Если СтрокиТаблицыСвойств = Неопределено Тогда
		СтрокиТаблицыСвойств = ТаблицаСвойств.НайтиСтроки(Новый Структура("Имя", ИмяСвойства));
	КонецЕсли;
	Если СтрокиТаблицыСвойств.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат СтрокиТаблицыСвойств[0].Тип;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПолноеИмяСвойстваФормата()
	ПолноеИмяСвойстваФормата = "";
	Если ЗначениеЗаполнено(ГруппаСвойствФормата) Тогда
		ПолноеИмяСвойстваФормата = СокрЛП(ГруппаСвойствФормата) + ".";
	КонецЕсли;
	ПолноеИмяСвойстваФормата = ПолноеИмяСвойстваФормата + СокрЛП(СвойствоФормата);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолноеИмяСвойстваКонфигурации()
	ПолноеИмяСвойстваКонфигурации = "";
	Если ЗначениеЗаполнено(ГруппаСвойствКонфигурации) Тогда
		ПолноеИмяСвойстваКонфигурации = СокрЛП(ГруппаСвойствКонфигурации) + ".";
	КонецЕсли;
	ПолноеИмяСвойстваКонфигурации = ПолноеИмяСвойстваКонфигурации + СокрЛП(СвойствоКонфигурации);
КонецПроцедуры

&НаКлиенте
Процедура ВыбраноСвойствоФормата(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	ПолноеИмяСвойстваФормата = РезультатЗакрытия;
	СвойствоФорматаОбработкаВыбора(Элементы.СвойствоФормата, РезультатЗакрытия, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыбраноСвойствоКонфигурации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	ПолноеИмяСвойстваКонфигурации = РезультатЗакрытия;
	СвойствоКонфигурацииОбработкаВыбора(Элементы.СвойствоКонфигурации, РезультатЗакрытия, Истина);
КонецПроцедуры

#КонецОбласти



