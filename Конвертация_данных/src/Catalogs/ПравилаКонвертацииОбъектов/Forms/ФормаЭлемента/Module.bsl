#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	НомерПопыткиТекущий = 1;
	Если НЕ (Объект.ИспользоватьДляОтправки ИЛИ Объект.ИспользоватьДляПолучения) Тогда
		Объект.ИспользоватьДляОтправки = Истина;
	КонецЕсли;
	// Заполнение списка конвертаций данного правила
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КонвертацияДанныхXDTOВызовСервера.ПолучитьСписокКонвертацийДляЭлементаКонвертации(Объект.Ссылка, СписокКонвертаций);
	Иначе
		Если ЗначениеЗаполнено(ЭтаФорма.Параметры.Конвертация) Тогда
			СписокКонвертаций.Добавить(ЭтаФорма.Параметры.Конвертация);
		ИначеЕсли ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования) Тогда
			// Возможно новый элемент копируется - тогда список конвертаций необходимо заполнить.
			КонвертацияДанныхXDTOВызовСервера.ПолучитьСписокКонвертацийДляЭлементаКонвертации(ЭтаФорма.Параметры.ЗначениеКопирования, СписокКонвертаций);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Группа) Тогда
			Объект.Группа = ЭтаФорма.Параметры.Группа;
		КонецЕсли;
	КонецЕсли;
	ОбновитьДанныеАлгоритмаПослеЗагрузкиВсехДанных();
	ЗаполнитьСпискиОбъектов();
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ИспользоватьДляОтправки И Объект.ИспользоватьДляПолучения Тогда
		ОбластьПрименения = 2;
	ИначеЕсли Объект.ИспользоватьДляПолучения Тогда
		ОбластьПрименения = 1;
	Иначе
		ОбластьПрименения = 0;
	КонецЕсли;
	ПеречитатьИменаОбработчиков();
	НастроитьСпискиВыбора();

	УстановитьВидимость();
	ОбновитьЭлементыУправленияНастройкиПолямиПоиска();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Закрыта форма вопроса о составе конвертаций с изменением состава
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		ОбработкаВыбораНаСервере();
		ЭтаФорма.ОбновитьОтображениеДанных();
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("МассивВыбранныхЗначений") Тогда
		// Обработка выбора полей поиска
		Если ВыбранноеЗначение.МассивВыбранныхЗначений.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ИдентификацияПоПолямПоиска.Количество() = 0 Тогда
			ВариантПоиска = Объект.ИдентификацияПоПолямПоиска.Добавить();
		ИначеЕсли Объект.ИдентификацияПоПолямПоиска.Количество() = 1 Тогда
			ВариантПоиска = Объект.ИдентификацияПоПолямПоиска[0];
		Иначе
			ВариантПоиска = Элементы.ИдентификацияПоПолямПоиска.ТекущиеДанные;
		КонецЕсли;
		
		ВариантПоиска.РеквизитыПоиска = СтрСоединить(ВыбранноеЗначение.МассивВыбранныхЗначений, ",");
		
		УстановитьВидимость();
		ОбновитьЭлементыУправленияНастройкиПолямиПоиска();
	КонецЕсли;
	Если ВыбранноеЗначение.Свойство("ПравилоКонвертацииСвойства") Тогда
		// Изменено либо добавлено одно ПКС в диалоге
		Если СозданиеНовогоПКС Тогда
			СтрокаПКС = Объект.ПравилаКонвертацииСвойств.Добавить();
		Иначе
			ИдентификаторСтроки = Элементы.ПравилаКонвертацииСвойств.ТекущаяСтрока;
			Если ИдентификаторСтроки = Неопределено Тогда
				Возврат;
			КонецЕсли;
			СтрокаПКС = Объект.ПравилаКонвертацииСвойств.НайтиПоИдентификатору(ИдентификаторСтроки);
		КонецЕсли;
		
		ТекущееПКС = ВыбранноеЗначение.ПравилоКонвертацииСвойства;
		ЗаполнитьЗначенияСвойств(СтрокаПКС, ТекущееПКС);
		Если СозданиеНовогоПКС Тогда
			Элементы.ПравилаКонвертацииСвойств.ТекущаяСтрока = СтрокаПКС.ПолучитьИдентификатор();
		КонецЕсли;
		
		ОбновитьСлужебныеПоляПКС();
		УстановитьВидимостьСлужебнойНадписи();
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
	Если ВыбранноеЗначение.Свойство("ПравилаКонвертацииСвойств") Тогда
		// Выполнено автоматическое сопоставление ПКС
		МассивПКС = ВыбранноеЗначение.ПравилаКонвертацииСвойств;
		Для Каждого СтруктураПКС Из МассивПКС Цикл
			// В массиве содержится структура со свойствами ПКС
			СтрокаПКС = Объект.ПравилаКонвертацииСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПКС, СтруктураПКС);
		КонецЦикла;
		ОбновитьСлужебныеПоляПКС();
		УстановитьВидимостьСлужебнойНадписи();
		ЭтаФорма.ОбновитьОтображениеДанных();
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере()
	// Изменился состав конвертаций
	КонвертацияДанныхXDTOВызовСервера.ПолучитьСписокКонвертацийДляЭлементаКонвертации(Объект.Ссылка, СписокКонвертаций);
	ЗаполнитьСпискиОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РеквизитыПоиска", "");
	
	ПустыеСтроки = Объект.ИдентификацияПоПолямПоиска.НайтиСтроки(СтруктураОтбора);
	Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
		Объект.ИдентификацияПоПолямПоиска.Удалить(Объект.ИдентификацияПоПолямПоиска.Индекс(ПустаяСтрока));
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	КонвертацияДанныхXDTOВызовСервера.ПроверитьВозможностьЗаписиПравила(Отказ, ТекущийОбъект, Истина);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Для нового правила создать запись в регистре
	КонвертацияДанныхXDTOВызовСервера.ЗаписатьЭлементКонвертацииВСоставКонвертации(Объект.Ссылка, СписокКонвертаций);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Алгоритмы" Тогда
		
		ОбновитьДанныеАлгоритмаПослеЗагрузкиВсехДанных();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Тумблер_ОбластьПримененияПриИзменении(Элемент)
	Если ОбластьПрименения = 0 Тогда
		Объект.ИспользоватьДляОтправки = Истина;
		Объект.ИспользоватьДляПолучения = Ложь;
	ИначеЕсли ОбластьПрименения = 1 Тогда
		Объект.ИспользоватьДляОтправки = Ложь;
		Объект.ИспользоватьДляПолучения = Истина;
	Иначе
		Объект.ИспользоватьДляОтправки = Истина;
		Объект.ИспользоватьДляПолучения = Истина;
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	ПеречитатьИменаОбработчиков();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектФорматаПриИзменении(Элемент)
	ЗаполнитьСписокКлючевыхСвойств();
	УстановитьВидимостьСлужебнойНадписи();
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьПорядокПолейПоиска(Команда)
	
	ОткрытьФормуВыбораПолейПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификацияПоПолямПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуВыбораПолейПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификацияПоПолямПоискаПослеУдаления(Элемент)
	
	Если Объект.ИдентификацияПоПолямПоиска.Количество() = 1 Тогда
		УстановитьВидимость();
		ОбновитьЭлементыУправленияНастройкиПолямиПоиска()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПослеЗагрузкиВсехДанныхОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиВсехДанных) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокНаАлгоритмы = СсылкиНаАлгоритмыПоИмени(Объект.АлгоритмПослеЗагрузкиВсехДанных, СписокКонвертаций);
	Если МассивСсылокНаАлгоритмы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если МассивСсылокНаАлгоритмы.Количество() = 1 Тогда
		ПараметрыФормы = Новый Структура("Ключ");
		ПараметрыФормы.Ключ = МассивСсылокНаАлгоритмы[0];
		ИмяФормыАлгоритм = "Справочник.Алгоритмы.ФормаОбъекта";
	Иначе
		ПараметрыФормы = Новый Структура("ТребованияКОтбору");
		ПараметрыФормы.ТребованияКОтбору = МассивСсылокНаАлгоритмы;
		ИмяФормыАлгоритм = "Справочник.Алгоритмы.ФормаСписка";
	КонецЕсли;
	ОткрытьФорму(ИмяФормыАлгоритм, ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПослеЗагрузкиВсехДанныхПриИзменении(Элемент)
	
	ОбновитьДанныеАлгоритмаПослеЗагрузкиВсехДанных();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектФорматаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыВыбора = Новый Структура("МассивКонвертаций, ТекущаяСтрока, РежимРаботы", 
					СписокКонвертаций, Объект.ОбъектФормата, "ОбъектФормата");
	ПараметрыФормыВыбора.Вставить("ДляПКО", Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектаИлиСвойства",ПараметрыФормыВыбора,Элемент,,,,
			Новый ОписаниеОповещения("ВыбранОбъектФормата", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыВыбора = Новый Структура("МассивКонвертаций, ТекущаяСтрока, РежимРаботы", 
					СписокКонвертаций, Объект.ОбъектКонфигурации, "ОбъектКонфигурации");
	ПараметрыФормыВыбора.Вставить("ДляПКО", Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектаИлиСвойства",ПараметрыФормыВыбора,Элемент,,,,
			Новый ОписаниеОповещения("ВыбранОбъектКонфигурации", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ДобавитьВторойВариантПоиска(Команда)
	
	НоваяСтрока = Объект.ИдентификацияПоПолямПоиска.Добавить();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкиПолейПоиска(Команда)
	Объект.ИдентификацияПоПолямПоиска.Очистить();
	УстановитьВидимость();
	ОбновитьЭлементыУправленияНастройкиПолямиПоиска()
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементВСоставКонвертации(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстПредупреждения = НСтр("ru = 'Сначала необходимо записать правило конвертации объекта'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбранаКонвертация", ЭтаФорма);
	ОткрытьФорму("Справочник.Конвертации.ФормаВыбора",, ЭтаФорма,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПКС(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстПредупреждения = НСтр("ru = 'Сначала необходимо записать правило конвертации объекта'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура("ПравилоКонвертацииОбъекта", Объект.Ссылка);
	ОткрытьФорму("Обработка.НастройкаПравилКонвертацииСвойств.Форма", СтруктураПараметров, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстАлгоритмаПослеЗагрузкиВсехДанных(Команда)
	
	ПоказатьТекстАлгоритмаПослеЗагрузкиВсехДанных = Не ПоказатьТекстАлгоритмаПослеЗагрузкиВсехДанных;
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ПравилаКонвертацииСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОткрытьФормуРедактированияПКС(НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаКонвертацииСвойствПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ОткрытьФормуРедактированияПКС(Истина, Копирование);
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаКонвертацииСвойствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуРедактированияПКС(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаКонвертацииСвойствПослеУдаления(Элемент)
	ОбновитьСлужебныеПоляПКС();
	УстановитьВидимостьСлужебнойНадписи();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ВыбранаКонвертация(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	ОтказДобавления = Ложь;
	ДополнитьСоставКонвертации(РезультатЗакрытия, Объект.Ссылка, ОтказДобавления);
	Если ОтказДобавления Тогда
		ТекстПредупреждения = НСтр("ru = 'Данный элемент уже входит в состав выбранной конвертации'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
	Иначе
		Элементы.СписокКонвертаций.ОбновитьТекстРедактирования();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнитьСоставКонвертации(Конвертация, ЭлементКонвертации, ОтказДобавления)
	// Проверка на дубли
	Если КонвертацияДанныхXDTOВызовСервера.ЭлементКонвертацииВходитВСоставКонвертации(Конвертация, ЭлементКонвертации) Тогда
		ОтказДобавления = Истина;
		Возврат;
	КонецЕсли;
	Справочники.СоставыКонвертаций.ДополнитьСоставКонвертации(Конвертация, ЭлементКонвертации);
	КонвертацияДанныхXDTOВызовСервера.ПолучитьСписокКонвертацийДляЭлементаКонвертации(Объект.Ссылка, СписокКонвертаций);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПолейПоиска()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",    НСтр("ru = 'Выберете поля поиска:'"));
	ПараметрыФормы.Вставить("МассивДоступныхЗначений", СформироватьМассивДоступныхРеквизитовОбъекта());
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений", СформироватьМассивВыбранныхПолейПоиска());
	
	ОткрытьФорму("ОбщаяФорма.ВыборДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьМассивВыбранныхПолейПоиска()
	
	РеквизитыПоиска = "";
	Если Объект.ИдентификацияПоПолямПоиска.Количество() = 1 Тогда
		РеквизитыПоиска = Объект.ИдентификацияПоПолямПоиска[0].РеквизитыПоиска;
	ИначеЕсли Объект.ИдентификацияПоПолямПоиска.Количество() > 1 Тогда
		РеквизитыПоиска = Элементы.ИдентификацияПоПолямПоиска.ТекущиеДанные.РеквизитыПоиска;
	КонецЕсли;
	МассивВыбранныхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РеквизитыПоиска, ",");
	
	Возврат МассивВыбранныхПолей;
	
КонецФункции

&НаСервере
Функция СформироватьМассивДоступныхРеквизитовОбъекта()
	
	ТаблицаСвойствОбъектаКонфигурации = КонвертацияДанныхXDTOВызовСервера.ТаблицаСвойствОбъектаКонфигурации(СписокКонвертаций.ВыгрузитьЗначения(), Объект.ОбъектКонфигурации);
	Возврат ТаблицаСвойствОбъектаКонфигурации.ВыгрузитьКолонку("Имя");
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	// Страницы обработчиков
	Элементы.Страница_ПриОтправке.Видимость = Объект.ИспользоватьДляОтправки;
	
	Элементы.Страница_ПриКонвертацииДанныхXDTO.Видимость = Объект.ИспользоватьДляПолучения;
	Элементы.Страница_ПередЗаписьюПолученныхДанных.Видимость = Объект.ИспользоватьДляПолучения;
	Элементы.Страница_Идентификация.Видимость = Объект.ИспользоватьДляПолучения;
	Элементы.Страница_ПослеЗагрузкиВсехДанных.Видимость = Объект.ИспользоватьДляПолучения;
	Элементы.ПравилоДляГруппыСправочника.Видимость = Объект.ИспользоватьДляПолучения;

	КоличествоВариантовПоиска = Объект.ИдентификацияПоПолямПоиска.Количество();
	
	Элементы.ИдентификацияПоПолямПоиска.Видимость = КоличествоВариантовПоиска > 1;
	Элементы.ДобавитьВторойВариантПоиска.Видимость = КоличествоВариантовПоиска = 1;
	Элементы.ОчиститьНастройкиПолейПоиска.Видимость = КоличествоВариантовПоиска = 1;
	Элементы.ЗадатьПорядокПолейПоиска.Видимость = КоличествоВариантовПоиска <= 1;
	
	Элементы.ПоказатьТекстАлгоритмаПослеЗагрузкиВсехДанных.Заголовок = ?(ПоказатьТекстАлгоритмаПослеЗагрузкиВсехДанных,
		НСтр("ru='Скрыть текст'"), НСтр("ru='Показать текст'"));
	Элементы.ПоказатьТекстАлгоритмаПослеЗагрузкиВсехДанных.Видимость = ЗначениеЗаполнено(АлгоритмПослеЗагрузкиВсехДанныхСсылка);
	Элементы.АлгоритмПослеЗагрузкиВсехДанныхТекст.Видимость = ЗначениеЗаполнено(АлгоритмПослеЗагрузкиВсехДанныхСсылка)
		И ПоказатьТекстАлгоритмаПослеЗагрузкиВсехДанных;
	
	УстановитьВидимостьСлужебнойНадписи();
КонецПроцедуры

Процедура УстановитьВидимостьСлужебнойНадписи()
	Элементы.НеСозданыПКСКлючевыеСвойства.Видимость = Объект.ИспользоватьДляОтправки И (НеСозданыПКСКлючевыеСвойства <> "");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиОбъектов()
	МассивКонвертаций = СписокКонвертаций.ВыгрузитьЗначения();
	КонвертацияДанныхXDTOВызовСервера.ЗаполнитьСписокОбъектовКонфигурации(СписокОбъектовКонфигурации, МассивКонвертаций, Истина);
	КонвертацияДанныхXDTOВызовСервера.ЗаполнитьСписокОбъектовФормата(СписокОбъектовФормата, МассивКонвертаций, Истина);
	КонвертацияДанныхXDTOВызовСервера.ЗаполнитьСписокАлгоритмов(СписокАлгоритмов, МассивКонвертаций);

	ЗаполнитьСписокКлючевыхСвойств();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКлючевыхСвойств()
	// Получим список ключевых свойств
	СписокКлючевыхСвойств.Очистить();
	Если ЗначениеЗаполнено(Объект.ОбъектФормата) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СвойстваФормата.Тип КАК Строка(1000)) КАК ТипКС
		|ПОМЕСТИТЬ ТабКС
		|ИЗ Справочник.СвойстваФормата КАК СвойстваФормата
		|ГДЕ Владелец.Наименование = &ТекОбъектФормата И Наименование = ""КлючевыеСвойства""
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Наименование
		|ИЗ Справочник.СвойстваФормата КАК СвойстваФормата
		|ГДЕ Владелец.Наименование В (ВЫБРАТЬ ТабКС.ТипКС ИЗ ТабКС)
		|";
		Запрос.УстановитьПараметр("ТекОбъектФормата", Объект.ОбъектФормата);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокКлючевыхСвойств.Добавить(Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
	ОбновитьСлужебныеПоляПКС();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСлужебныеПоляПКС()
	НеСозданыПКСКлючевыеСвойства = "";
	МассивСозданыПКС = Новый Массив;
	МассивСозданыПКС.Добавить("Ссылка");  // Это ПКС не требуется создавать - обрабатывается автоматически
	Для Каждого Строка Из Объект.ПравилаКонвертацииСвойств Цикл
		Строка.ЭтоКлючевоеСвойство = Ложь;
		Если НЕ ЗначениеЗаполнено(Строка.ПолноеИмяСвойстваФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если СписокКлючевыхСвойств.НайтиПоЗначению(Строка.ПолноеИмяСвойстваФормата) <> Неопределено Тогда
			Строка.ЭтоКлючевоеСвойство = Истина;
			МассивСозданыПКС.Добавить(Строка.ПолноеИмяСвойстваФормата);
		КонецЕсли;
	КонецЦикла;
	Если МассивСозданыПКС.Количество() < СписокКлючевыхСвойств.Количество() Тогда
		// Есть ключевые свойства для которых не созданы ПКС
		Для Каждого КлючСвойство Из СписокКлючевыхСвойств Цикл
			Если МассивСозданыПКС.Найти(КлючСвойство.Значение) = Неопределено Тогда
				НеСозданыПКСКлючевыеСвойства = НеСозданыПКСКлючевыеСвойства + КлючСвойство.Значение + ", ";
			КонецЕсли;
		КонецЦикла;
		НеСозданыПКСКлючевыеСвойства = НСтр("ru = 'Не созданы правила конвертации свойств для ключевых свойств формата'") + ": " + Лев(НеСозданыПКСКлючевыеСвойства, СтрДлина(НеСозданыПКСКлючевыеСвойства)-2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьИменаОбработчиков()
	НачалоИмени = "ПКО_"+СокрЛП(Объект.Код)+"_";
	ИмяОбработчикаПередОтправкой = НачалоИмени+"ПередОтправкой";
	ИмяОбработчикаПриОтправке = НачалоИмени+"ПриОтправкеДанных";
	ИмяОбработчикаПриПолучении = НачалоИмени+"ПередЗаписьюПолученныхДанных";
	ИмяОбработчикаПередПолучением = НачалоИмени+"ПриКонвертацииДанныхXDTO";
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСпискиВыбора()
	КонвертацияДанныхXDTOКлиент.ЗаполнитьСписокВыбораЭлементаФормы(Элементы.ОбъектКонфигурации, СписокОбъектовКонфигурации);
	КонвертацияДанныхXDTOКлиент.ЗаполнитьСписокВыбораЭлементаФормы(Элементы.ОбъектФормата, СписокОбъектовФормата);
	КонвертацияДанныхXDTOКлиент.ЗаполнитьСписокВыбораЭлементаФормы(Элементы.АлгоритмПослеЗагрузкиВсехДанных, СписокАлгоритмов);
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыУправленияНастройкиПолямиПоиска()
	
	КоличествоВариантовПоиска = Объект.ИдентификацияПоПолямПоиска.Количество();
	Если КоличествоВариантовПоиска = 0 Тогда
		Элементы.ЗадатьПорядокПолейПоиска.Заголовок = НСтр("ru = 'Задать порядок полей поиска'");
	ИначеЕсли КоличествоВариантовПоиска = 1 Тогда
		Элементы.ЗадатьПорядокПолейПоиска.Заголовок = Объект.ИдентификацияПоПолямПоиска[0].РеквизитыПоиска;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	// Оформление цвета текста для строк где используется алгоритм конвертации.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПравилаКонвертацииСвойств.ИспользуетсяАлгоритмКонвертации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	// Оформляемые поля: все где есть текст.
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПравилаКонвертацииСвойствПолноеИмяСвойстваКонфигурации");
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПравилаКонвертацииСвойствПолноеИмяСвойстваФормата");
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПравилаКонвертацииСвойствПравилоКонвертацииСвойства");
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПравилаКонвертацииСвойствТипСвойстваКонфигурации");
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПравилаКонвертацииСвойствТипСвойстваФормата");
	
	// Оформление шрифта для строк с ключевыми свойствами.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, ,, Истина, Ложь, Ложь, ));
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПравилаКонвертацииСвойств.ЭтоКлючевоеСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	// Оформляемые поля: свойство формата 
	ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПравилаКонвертацииСвойствПолноеИмяСвойстваФормата");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПКС(НоваяСтрока, Копирование)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстПредупреждения = НСтр("ru = 'Сначала необходимо записать правило конвертации объекта'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПравилоКонвертацииОбъекта", Объект.Ссылка);
	СтруктураПараметров.Вставить("Отключить", Ложь);
	СтруктураПараметров.Вставить("ИспользуетсяАлгоритмКонвертации", Ложь);
	СтруктураПараметров.Вставить("Комментарий", "");
	СтруктураПараметров.Вставить("СвойствоКонфигурации", "");
	СтруктураПараметров.Вставить("СвойствоФормата", "");
	СтруктураПараметров.Вставить("ГруппаСвойствКонфигурации", "");
	СтруктураПараметров.Вставить("ГруппаСвойствФормата", "");
	СтруктураПараметров.Вставить("ТипСвойстваКонфигурации", "");
	СтруктураПараметров.Вставить("ТипСвойстваФормата", "");
	СтруктураПараметров.Вставить("ПолноеИмяСвойстваКонфигурации", "");
	СтруктураПараметров.Вставить("ПолноеИмяСвойстваФормата", "");
	СтруктураПараметров.Вставить("ПравилоКонвертацииСвойства", "");
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		ТекПКС = Элементы.ПравилаКонвертацииСвойств.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекПКС);
	КонецЕсли;
	СозданиеНовогоПКС = НоваяСтрока ИЛИ Копирование;
	ОткрытьФорму("Справочник.ПравилаКонвертацииОбъектов.Форма.ФормаРедактированияПКС", СтруктураПараметров, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СсылкиНаАлгоритмыПоИмени(Знач ИмяАлгоритма, СписокКонвертаций)
	
	ИмяАлгоритма = СокрЛП(ИмяАлгоритма);
	
	// Поиск алгоритма по имени и по составу конвертаций
	МассивКонвертаций = СписокКонвертаций.ВыгрузитьЗначения();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Алгоритмы.Ссылка
	|ИЗ Справочник.Алгоритмы КАК Алгоритмы
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	Справочник.СоставыКонвертаций КАК СоставКонвертаций
	|ПО СоставКонвертаций.ЭлементКонвертации = Алгоритмы.Ссылка
	|	И СоставКонвертаций.Владелец В (&МассивКонвертаций)
	|	И СоставКонвертаций.Отключить = ЛОЖЬ И СоставКонвертаций.ПометкаУдаления = ЛОЖЬ
	|ГДЕ Алгоритмы.ПометкаУдаления = ЛОЖЬ И Алгоритмы.ЭтоФункция = ЛОЖЬ
	|	И Алгоритмы.Код = &Код
	|";
	Запрос.УстановитьПараметр("МассивКонвертаций", МассивКонвертаций);
	Запрос.УстановитьПараметр("Код", СокрЛП(ИмяАлгоритма));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервереБезКонтекста

&НаСервереБезКонтекста
Функция ДанныеАлгоритмаПослеЗагрузкиВсехДанных(Знач ИмяАлгоритма, СписокКонвертаций)
	
	ИмяАлгоритма = СокрЛП(ИмяАлгоритма);
	
	ДанныеАлгоритма = Новый Структура;
	ДанныеАлгоритма.Вставить("Ссылка", Справочники.Алгоритмы.ПустаяСсылка());
	ДанныеАлгоритма.Вставить("Текст");
	
	СсылкиНаАлгоритмы = СсылкиНаАлгоритмыПоИмени(ИмяАлгоритма, СписокКонвертаций);
	Если ЗначениеЗаполнено(СсылкиНаАлгоритмы) И СсылкиНаАлгоритмы.Количество() = 1 Тогда
		
		ДанныеАлгоритма.Ссылка = СсылкиНаАлгоритмы[0];
		ДанныеАлгоритма.Текст = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеАлгоритма.Ссылка, "Алгоритм");
		
	КонецЕсли;
	
	Возврат ДанныеАлгоритма;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеАлгоритмаПослеЗагрузкиВсехДанных()
	
	ДанныеАлгоритма = ДанныеАлгоритмаПослеЗагрузкиВсехДанных(Объект.АлгоритмПослеЗагрузкиВсехДанных, СписокКонвертаций);
	АлгоритмПослеЗагрузкиВсехДанныхСсылка = ДанныеАлгоритма.Ссылка;
	АлгоритмПослеЗагрузкиВсехДанныхТекст = ДанныеАлгоритма.Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранОбъектФормата(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	Объект.ОбъектФормата = РезультатЗакрытия;
	ОбъектФорматаПриИзменении(Элементы.ОбъектФормата);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранОбъектКонфигурации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	Объект.ОбъектКонфигурации = РезультатЗакрытия;
КонецПроцедуры



#КонецОбласти