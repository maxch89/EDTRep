#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс
// Функция формирует документ с описанием структуры формата в HTML-формате.
// Параметры:
//  СсылкаНаОписание - СправочникСсылка.Описания - описание для формирования документа.
// Возвращаемое значение:
//  Строка - Описание в HTML-формате.
Функция СформироватьДокументОписанияHTML(СсылкаНаОписание) Экспорт
	СсылкаНаВерсиюФормата = Справочники.ВерсииФормата.НайтиПоНаименованию(СсылкаНаОписание.НомерВерсииФормата);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлементыОписания.Ссылка 						КАК ЭлементСсылка,
	|	ЭлементыОписания.Порядок,
	|	IsNULL(ЭлементыОписания.УровеньЗаголовка, 0) 	КАК УровеньЗаголовка,
	|	ЭлементыОписания.ТипЭлемента 					КАК ТипЭлемента,
	|	ОбъектыФормата.Ссылка 							КАК ОбъектФормата,
	|	СвойстваФормата.Ссылка 							КАК СвойствоФормата,
	|	СвойстваФормата.Родитель						КАК СвойствоФорматаРодитель,
	|	СвойстваФормата.Родитель.ТипОбщегоСвойства		КАК ТипОбщегоСвойстваРодитель,
	|	СвойстваФормата.ТипОбщегоСвойства				КАК ТипОбщегоСвойства
	|ИЗ Справочник.ЭлементыОписания КАК ЭлементыОписания
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыФормата КАК ОбъектыФормата
	|	ПО ЭлементыОписания.ОбъектФормата = ОбъектыФормата.Наименование
	|	И  ЭлементыОписания.ТипЭлемента = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовОписания.ОписаниеОбъектаФормата)
	|	И  ОбъектыФормата.Владелец.Наименование = &ВерсияФормата
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвойстваФормата КАК СвойстваФормата
	|	ПО СвойстваФормата.Владелец = ОбъектыФормата.Ссылка
	|	И (
	|			СвойстваФормата.ЭтоГруппа = ЛОЖЬ
	|			И (СвойстваФормата.Родитель = ЗНАЧЕНИЕ(Справочник.СвойстваФормата.ПустаяСсылка)
	|				ИЛИ СвойстваФормата.Родитель.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ГруппаОбщихСвойств)
	|			)
	|		ИЛИ (СвойстваФормата.ЭтоГруппа = ИСТИНА
	|				ИЛИ СвойстваФормата.Родитель.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть)
	|				ИЛИ СвойстваФормата.Родитель.ТипОбщегоСвойства = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.ПустаяСсылка)
	|			)
	|		)
	|ГДЕ ЭлементыОписания.Владелец = &СсылкаНаОписание 
	|	И НЕ ЭлементыОписания.ПометкаУдаления
	|	И IsNULL(ОбъектыФормата.ПометкаУдаления, ЛОЖЬ) = ЛОЖЬ
	|	И IsNULL(СвойстваФормата.ПометкаУдаления, ЛОЖЬ) = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО
	|	ЭлементыОписания.Ссылка.Порядок ИЕРАРХИЯ,
	|	ЭлементыОписания.Порядок ВОЗР,
	|	ЭлементыОписания.Наименование ВОЗР,
	|" + ?(СсылкаНаОписание.ВыводитьСвойстваОбъектовВИсходномПорядке,
		"	СвойстваФормата.Порядок ВОЗР,
		|	СвойстваФормата.Ссылка ИЕРАРХИЯ",
		"	СвойстваФормата.Наименование ВОЗР,
		|	СвойстваФормата.Ссылка ИЕРАРХИЯ");
	Запрос.УстановитьПараметр("СсылкаНаОписание", СсылкаНаОписание);
	Запрос.УстановитьПараметр("ВерсияФормата", СокрЛП(СсылкаНаОписание.НомерВерсииФормата));
	ОбщееОписание = Новый ФорматированныйДокумент;
	ТекстХТМЛ  = "";
	ТекстСодержание = "";
	СтруктураПростыеТипы = Новый Структура;
	// Вывод заголовка
	// Заголовок идет с уровнем 1
	ДобавитьОписаниеHTML(ТекстХТМЛ, СсылкаНаОписание.ЗаголовокОписания,,1);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТекстХТМЛ;
	КонецЕсли;
	
	// Получим ключевые свойства формата
	ЗапросКлючи = Новый Запрос;
	ЗапросКлючи.Текст = "ВЫБРАТЬ
	|	Владелец.Наименование 	КАК НаименованиеОбъекта,
	|	Наименование 			КАК Свойства,
	|	Тип						КАК ТипЗначения,
	|	Обязательное 			КАК Обязательное,
	|	СоставнойТип 			КАК СоставнойТип,
	|	Состав					КАК Состав
	|ИЗ Справочник.СвойстваФормата
	|ГДЕ Владелец.Владелец.Наименование = &ВерсияФормата
	|	И Владелец.ТипОбщегоРеквизита = ЗНАЧЕНИЕ(Перечисление.ТипыОбщихРеквизитов.КлючевыеСвойства)
	|	И НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Владелец.Наименование, Наименование";
	ЗапросКлючи.УстановитьПараметр("ВерсияФормата", СокрЛП(СсылкаНаОписание.НомерВерсииФормата));
	ТаблицаКлючи = ЗапросКлючи.Выполнить().Выгрузить();
	
	// Дополнительные параметры для передачи во вспомогательные процедуры и функции.
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТаблицаКлючи", ТаблицаКлючи);
	ДополнительныеПараметры.Вставить("СтруктураПростыеТипы", СтруктураПростыеТипы);
	ДополнительныеПараметры.Вставить("СсылкаНаВерсиюФормата", СсылкаНаВерсиюФормата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредыдущийУровеньЗаголовка = 0;
	Пока Выборка.СледующийПоЗначениюПоля("ЭлементСсылка") Цикл
		Если Выборка.ТипЭлемента <> Перечисления.ТипыЭлементовОписания.ОписаниеОбъектаФормата Тогда
			ИдентификаторГиперссылки = "";
			ТекУровеньЗаголовка = 0;
			Если Выборка.ТипЭлемента = Перечисления.ТипыЭлементовОписания.Заголовок Тогда
				Если Выборка.УровеньЗаголовка = 0 Тогда
					ТекУровеньЗаголовка = 0;
				Иначе
					ТекУровеньЗаголовка = Выборка.УровеньЗаголовка + 1;
				КонецЕсли;
				// Присвоим идентификатор гиперссылке
				ИдентификаторГиперссылки = СокрЛП(Выборка.ЭлементСсылка.Код);
				ДополнитьТекстСодержания(Выборка.ЭлементСсылка.ТекстПростогоОписания, ТекстСодержание, 
							ИдентификаторГиперссылки, ТекУровеньЗаголовка, ПредыдущийУровеньЗаголовка);
			КонецЕсли;
			
			ДобавитьОписаниеHTML(ТекстХТМЛ, Выборка.ЭлементСсылка.ТекстПростогоОписания, ИдентификаторГиперссылки, ТекУровеньЗаголовка);
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.ОбъектФормата) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьОписаниеHTML(ТекстХТМЛ, Выборка.ОбъектФормата.Описание);
		// Добавим наименование объекта
		ДобавитьОписаниеHTMLИзТекстаHTML(ТекстХТМЛ, "<P><B>" + Выборка.ОбъектФормата + "</B></P>");

		// Создадим таблицы значений
		ТЗШапка = СоздатьТаблицуЗначенийДляШапки();
		ТЗСписокТЧ = СоздатьТаблицуЗначенийДляСпискаТЧ();
		СтруктураТаблицТЧ = Новый Структура;
		Пока Выборка.Следующий() Цикл
			ТекСвойствоФормата = Выборка.СвойствоФормата;
			Если СокрЛП(ТекСвойствоФормата.Наименование) = "AdditionalInfo" Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеСтрокой = ПолучитьОписаниеСвойстваФорматаСтрокой(ТекСвойствоФормата);
			
			Если ТекСвойствоФормата.ЭтоГруппа
				И (Выборка.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть
					ИЛИ Выборка.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ПустаяСсылка()) Тогда
				// Табличная часть
				НовСтрока = ТЗСписокТЧ.Добавить();
				НовСтрока.Свойства = ТекСвойствоФормата.Наименование;
				НовСтрока.ТипЗначения = ТекСвойствоФормата.Тип;
				НовСтрока.Пояснение = ОписаниеСтрокой;
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекСвойствоФормата.Родитель)
					ИЛИ Выборка.ТипОбщегоСвойстваРодитель = Перечисления.ТипыОбщихРеквизитов.ГруппаОбщихСвойств
					ИЛИ Выборка.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.КлючевыеСвойства)
					И ТекСвойствоФормата.Уровень() <= 1 Тогда
				// Шапка
				ИндексНовойСтроки = Неопределено;
				Если ТекСвойствоФормата.Наименование = "КлючевыеСвойства" Тогда
					// Ключевые свойства - ставим первыми
					НовСтрока = ТЗШапка.Вставить(0);
					ИндексНовойСтроки = 1;
				ИначеЕсли ТекСвойствоФормата.ЭтоГруппа Тогда
 					Продолжить;
				Иначе
					НовСтрока = ТЗШапка.Добавить();
				КонецЕсли;
				НовСтрока.Свойства = ТекСвойствоФормата.Наименование;
				ДобавитьСведенияОСвойстве(НовСтрока, ТекСвойствоФормата, ДополнительныеПараметры);
				НовСтрока.Пояснение = ОписаниеСтрокой;
				НовСтрока.служ_ЭтоКлючевоеСвойство = Ложь;
				НовСтрока.служ_ЭтоЭлементКлючевогоСвойства = Ложь;
				// Если свойство формата является ключевым - дополним таблицу
				УровеньКлючевогоСвойства = 1;
				ДобавитьКлючевыеСвойстваПриНеобходимости(ТЗШапка, НовСтрока, ТекСвойствоФормата.Тип, УровеньКлючевогоСвойства, ИндексНовойСтроки, ДополнительныеПараметры);
			Иначе
				Если ТекСвойствоФормата.ЭтоГруппа Тогда
					// Группа общих свойств в табличной части.
					Продолжить;
				КонецЕсли;
				
				// Реквизит табличной части
				ИмяТЧ = "";
				Если Выборка.ТипОбщегоСвойстваРодитель = Перечисления.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть
					ИЛИ Выборка.ТипОбщегоСвойстваРодитель = Перечисления.ТипыОбщихРеквизитов.ПустаяСсылка() Тогда
					ИмяТЧ = СокрЛП(ТекСвойствоФормата.Родитель.Наименование);
				ИначеЕсли ТекСвойствоФормата.Уровень() > 1 Тогда
					// Группа = ТЧ находится выше по иерархии
					УровеньВложенности = ТекСвойствоФормата.Уровень()-2;
					ТекРодитель = ТекСвойствоФормата.Родитель.Родитель;
					Пока УровеньВложенности >= 0 Цикл
						Если ТекРодитель.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ОбщаяТабличнаяЧасть
							ИЛИ ТекРодитель.ТипОбщегоСвойства = Перечисления.ТипыОбщихРеквизитов.ПустаяСсылка() Тогда
							ИмяТЧ = СокрЛП(ТекРодитель.Наименование);
							Прервать;
						КонецЕсли;
						ТекРодитель = ТекРодитель.Родитель;
						УровеньВложенности = УровеньВложенности - 1;
					КонецЦикла;
				КонецЕсли;
				Если ИмяТЧ = "" Тогда
					Продолжить;
				КонецЕсли;
				ТабТЧ = Неопределено;
				СтруктураТаблицТЧ.Свойство(ИмяТЧ, ТабТЧ);
				Если ТабТЧ = Неопределено Тогда
					ТабТЧ = СоздатьТаблицуЗначенийДляРеквизитовТЧ();
				КонецЕсли;
				НовСтрока = ТабТЧ.Добавить();
				НовСтрока.Свойства = ТекСвойствоФормата.Наименование;
				ДобавитьСведенияОСвойстве(НовСтрока, ТекСвойствоФормата, ДополнительныеПараметры);
				НовСтрока.Пояснение = ОписаниеСтрокой;
				НовСтрока.служ_ЭтоКлючевоеСвойство = Ложь;
				НовСтрока.служ_ЭтоЭлементКлючевогоСвойства = Ложь;
				// Если свойство формата является ключевым - дополним таблицу
				УровеньКлючевогоСвойства = 1;
				ДобавитьКлючевыеСвойстваПриНеобходимости(ТабТЧ, НовСтрока, ТекСвойствоФормата.Тип, УровеньКлючевогоСвойства, Неопределено, ДополнительныеПараметры);
				СтруктураТаблицТЧ.Вставить(ИмяТЧ, ТабТЧ);
			КонецЕсли;
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("СвойствоФормата") Цикл
		Если ТЗШапка.Количество() > 0 Тогда
			ТекстХТМЛТаб = ПолучитьТаблицуHTML(ТЗШапка, НСтр("ru='Шапка'"), Истина, "ТипЗначения", 4,);
			ДобавитьОписаниеHTMLИзТекстаHTML(ТекстХТМЛ, ТекстХТМЛТаб);
		КонецЕсли;
		Если ТЗСписокТЧ.Количество() > 0 Тогда
			ТекстХТМЛТаб = ПолучитьТаблицуHTML(ТЗСписокТЧ, НСтр("ru='Табличные части'"), Ложь);
			ДобавитьОписаниеHTMLИзТекстаHTML(ТекстХТМЛ, ТекстХТМЛТаб);
			Для Каждого СтрокаСпискаТЧ Из ТЗСписокТЧ Цикл
				ТабТЧ = Неопределено;
				СтруктураТаблицТЧ.Свойство(СокрЛП(СтрокаСпискаТЧ.Свойства), ТабТЧ);
				Если ТабТЧ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИмяЗаголовка = НСтр("ru='Табличная часть'") + ": " + СокрЛП(СтрокаСпискаТЧ.Свойства);
				ТекстХТМЛТаб = ПолучитьТаблицуHTML(ТабТЧ, ИмяЗаголовка, Истина, "ТипЗначения", 4,);
				ДобавитьОписаниеHTMLИзТекстаHTML(ТекстХТМЛ, ТекстХТМЛТаб);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	// Добавим содержание в текст - место найдем по специальным символам.
	Если ТекстСодержание <> "" Тогда
		ТекстСодержание = "<UL class=TOC>" + ТекстСодержание + "</UL>" ;
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "#содержание", ТекстСодержание); 
	КонецЕсли;
	ТекстТипы = ПолучитьОписаниеТиповФормата(ДополнительныеПараметры);
	Если ТекстТипы <> "" Тогда
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "#типыформата", ТекстТипы); 
	КонецЕсли;
	// Вставляем получившийся текст в обрамление стиля
	ТекстСтиля = ПолучитьМакет("МакетСтильОписания").ПолучитьТекст();
	// Формируем заголовок
	ХранилищеЗаголовокОписания = СсылкаНаОписание.ЗаголовокОписания.Получить();
	Если ХранилищеЗаголовокОписания <> Неопределено Тогда
		ТекстЗаголовокОписания = ХранилищеЗаголовокОписания.ПолучитьТекст();
		ТекстСтиля = СтрЗаменить(ТекстСтиля, "</TITLE>", ""+ТекстЗаголовокОписания + "</TITLE>");
	КонецЕсли;
	ТекстХТМЛ = СтрЗаменить(ТекстСтиля, "</BODY>", ТекстХТМЛ + "</BODY>");
	Возврат ТекстХТМЛ;
КонецФункции
#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Процедура ДобавитьКлючевыеСвойстваПриНеобходимости(ТаблицаСвойств, ТекущаяСтрокаСвойств, ТипСвойства, УровеньКлючевогоСвойства, ИндексНовойСтроки, ДополнительныеПараметры)
	Если УровеньКлючевогоСвойства > 10 Тогда
		Возврат;
	КонецЕсли;

	СтруктураОтборКлючей = Новый Структура("НаименованиеОбъекта",ТипСвойства);
	МассивСтрокКлючи = ДополнительныеПараметры.ТаблицаКлючи.НайтиСтроки(СтруктураОтборКлючей);
	Если МассивСтрокКлючи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаСвойств.служ_ЭтоКлючевоеСвойство = Истина;
	Для Каждого СтрокаКлюч Из МассивСтрокКлючи Цикл
		Если ИндексНовойСтроки = Неопределено Тогда
			НовСтрока = ТаблицаСвойств.Добавить();
		Иначе
			НовСтрока = ТаблицаСвойств.Вставить(ИндексНовойСтроки);
			ИндексНовойСтроки = ИндексНовойСтроки + 1;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаКлюч, "Свойства, ТипЗначения");
		ДобавитьСведенияОСвойстве(НовСтрока, СтрокаКлюч, ДополнительныеПараметры, Истина);
		НовСтрока.Пояснение = "";
		НовСтрока.служ_ЭтоКлючевоеСвойство = Ложь;
		НовСтрока.служ_ЭтоЭлементКлючевогоСвойства = Истина;
		НовСтрока.служ_УровеньКлючевогоСвойства = УровеньКлючевогоСвойства;
		Если ТипСвойства = СтрокаКлюч.ТипЗначения Тогда
			// Ссылка на самого себя - не разузловываем
			Продолжить;
		КонецЕсли;
		УровеньКлючевогоСвойства = УровеньКлючевогоСвойства + 1;
		ДобавитьКлючевыеСвойстваПриНеобходимости(ТаблицаСвойств, НовСтрока, НовСтрока.ТипЗначения, УровеньКлючевогоСвойства, ИндексНовойСтроки, ДополнительныеПараметры);
		УровеньКлючевогоСвойства = УровеньКлючевогоСвойства - 1;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьОписаниеHTML(ТекстОписания, ХранилищеСОписанием, ИдентификаторГиперссылки = "", УровеньЗаголовка = 0)
	КусокОписания = ХранилищеСОписанием.Получить();
	Если КусокОписания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КусокHTML = КусокОписания.ПолучитьТекст();
	
	Если ИдентификаторГиперссылки <> "" Тогда
		// Надо дополнить текст идентификатором для гиперссылки
		НачалоГиперссылки = "<A name=" + ИдентификаторГиперссылки + ">";
		КусокHTML = НачалоГиперссылки + КусокHTML + "</A>";
	КонецЕсли;
	Если УровеньЗаголовка > 0 Тогда
		КусокHTML = "<H"+УровеньЗаголовка+">" + КусокHTML + "</H"+УровеньЗаголовка+">";
	Иначе
		КусокHTML = "<P>" + КусокHTML + "</P>";
	КонецЕсли;
	
	Если ТекстОписания = "" Тогда
		ТекстОписания = КусокHTML;
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + КусокHTML;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьОписаниеHTMLИзТекстаHTML(ТекстОписания, ТекстHTML)
	ТекстОписания = ТекстОписания + Символы.ПС + ТекстHTML;
КонецПроцедуры

Процедура ДополнитьТекстСодержания(ХранилищеСОписанием, ТекстСодержания, ИдентификаторГиперссылки, УровеньЗаголовка, ПредыдущийУровеньЗаголовка)
	КусокОписания = ХранилищеСОписанием.Получить();
	Если КусокОписания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстЗаголовка = КусокОписания.ПолучитьТекст();
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		Возврат;
	КонецЕсли;
	ДополнениеКСодержанию = "";
	КоличествоИтераций = 0;
	Если ПредыдущийУровеньЗаголовка <> 0 Тогда
		Если ПредыдущийУровеньЗаголовка > УровеньЗаголовка Тогда
			ДополнениеКСодержаниюЛок = "</LI></UL>";
			КоличествоИтераций = ПредыдущийУровеньЗаголовка - УровеньЗаголовка;
		ИначеЕсли ПредыдущийУровеньЗаголовка < УровеньЗаголовка Тогда
			ДополнениеКСодержаниюЛок = "<UL class=TOC>";
			КоличествоИтераций = УровеньЗаголовка - ПредыдущийУровеньЗаголовка;
		КонецЕсли;
		Если КоличествоИтераций > 0 Тогда
			Для Итерация = 1 По КоличествоИтераций Цикл
				ДополнениеКСодержанию = ДополнениеКСодержанию + ДополнениеКСодержаниюЛок;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ПредыдущийУровеньЗаголовка = УровеньЗаголовка;
	ДополнениеКСодержанию = ДополнениеКСодержанию + "<LI><A href=""#" 
							+ ИдентификаторГиперссылки + """>" + ТекстЗаголовка + "</A>";
	ТекстСодержания = ТекстСодержания + ДополнениеКСодержанию + Символы.ПС;
КонецПроцедуры

Функция ПолучитьКодТипа(Знач ИмяТипа, ДополнительныеПараметры)
	СсылкаНаТип = Справочники.ТипыФормата.НайтиПоНаименованию(ИмяТипа,,,ДополнительныеПараметры.СсылкаНаВерсиюФормата);
	Если ЗначениеЗаполнено(СсылкаНаТип) Тогда
		Возврат "т_"+СсылкаНаТип.Код;
	Иначе
		Если Найти(ИмяТипа, ".") = 0 Тогда
			ПозицияКонца = Найти(ИмяТипа, "(");
			Если ПозицияКонца > 0 Тогда
				ИмяТипа = СокрЛП(Лев(ИмяТипа, ПозицияКонца-1));
			КонецЕсли;
			// Простой тип
			Если НЕ ДополнительныеПараметры.СтруктураПростыеТипы.Свойство(ИмяТипа) Тогда
				ДополнительныеПараметры.СтруктураПростыеТипы.Вставить(ИмяТипа, "т_"+ИмяТипа);
			КонецЕсли;
			Возврат "т_"+ИмяТипа;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ПолучитьОписаниеТиповФормата(ДополнительныеПараметры)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТипа",,НСтр("ru='Имя типа'"));
	ТЗ.Колонки.Добавить("ПространствоИмен",,НСтр("ru='Пространство имен'"));
	ТЗ.Колонки.Добавить("БазовыйТип",,НСтр("ru='Базовый тип'"));
	ТЗ.Колонки.Добавить("ПространствоИменБазовогоТипа",,НСтр("ru='Пространство имен (базовый тип)'"));
	ТЗ.Колонки.Добавить("Пояснение",,НСтр("ru='Пояснение'"));
	ТЗ.Колонки.Добавить("служ_КодТипа");
	ТЗ.Колонки.Добавить("Составной", Новый ОписаниеТипов("Булево"));
	
	ТекстЗапросаСвойстваПеречисления = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Наименование
	|ИЗ Справочник.ЗначенияФормата
	|ГДЕ Владелец.Владелец = &ВерсияФормата И Владелец.Наименование = &ИмяТипа
	|	И НЕ ПометкаУдаления И НЕ Владелец.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Наименование";
	
	ТекстЗапросаСвойстваКлючевыхСвойств = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Наименование,
	|	ВЫРАЗИТЬ(Тип КАК Строка(1000)) КАК Тип
	|ИЗ Справочник.СвойстваФормата
	|ГДЕ Владелец.Владелец = &ВерсияФормата И Владелец.Наименование = &ИмяТипа
	|	И НЕ ПометкаУдаления И НЕ Владелец.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Наименование";
	
	ТекстЗапросаСоставныеТипы = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипФормата КАК Наименование
	|ИЗ Справочник.ТипыФормата.Состав
	|ГДЕ Ссылка.Владелец = &ВерсияФормата
	|	И Ссылка.Наименование = &ИмяТипа";


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсияФормата", ДополнительныеПараметры.СсылкаНаВерсиюФормата);
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка,
	|	Наименование КАК ИмяТипа,
	|	БазовыйТип,
	|	ПространствоИмен,
	|	Код КАК служ_КодТипа,
	|	СоставнойТип КАК Составной,
	|	Описание КАК Описание,
	|	ПространствоИменБазовогоТипа
	|ИЗ Справочник.ТипыФормата
	|ГДЕ НЕ ПометкаУдаления И ВключатьВОписание И Владелец = &ВерсияФормата
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ,Выборка);
		ФД_Описание = Выборка.Описание.Получить();
		Если ТипЗнч(ФД_Описание) = Тип("ФорматированныйДокумент") Тогда
			СтрокаТЗ.Пояснение = ФД_Описание.ПолучитьТекст();
		КонецЕсли;
		СтрокаТЗ.служ_КодТипа = "т_"+СтрокаТЗ.служ_КодТипа;
	КонецЦикла;
	// Добавим в таблицу простые типы
	СамыйБазовыйПИ = Неопределено;
	Для Каждого КлючИЗначение Из ДополнительныеПараметры.СтруктураПростыеТипы Цикл
		СтрокаТЗ = ТЗ.Добавить();
		СтрокаТЗ.ИмяТипа = КлючИЗначение.Ключ;
		СтрокаТЗ.служ_КодТипа = КлючИЗначение.Значение;
		СтрокаСлуж = ТЗ.Найти(КлючИЗначение.Ключ, "БазовыйТип");
		Если СтрокаСлуж <> Неопределено Тогда
			СтрокаТЗ.ПространствоИмен = СтрокаСлуж.ПространствоИменБазовогоТипа;
		Иначе
			// Запишем в самый базовый
			Если СамыйБазовыйПИ = Неопределено Тогда
				СтрокаСлуж = ТЗ.Найти("string", "БазовыйТип");
				СамыйБазовыйПИ = СтрокаСлуж.ПространствоИменБазовогоТипа;
			КонецЕсли;
			СтрокаТЗ.ПространствоИмен = СамыйБазовыйПИ;
		КонецЕсли;
	КонецЦикла;
	ТЗ.Сортировать("ИмяТипа");

	// Таблица №1 - базовые типы.
	// Таблица №2 - типы message.
	// Таблица №3 - типы из пакета EnterpriseData.
	// Таблица №4 - КлючевыеСвойства.
	СтрокаСлуж = ТЗ.Найти("Ref", "БазовыйТип");
	ПИ_2 = СтрокаСлуж.ПространствоИменБазовогоТипа;
	ПИ_3 = "";
	
	ТЗ1 = Новый ТаблицаЗначений;
	ТЗ1.Колонки.Добавить("ИмяТипа",,НСтр("ru='Имя типа'"));
	ТЗ1.Колонки.Добавить("служ_КодТипа");
	ТЗ2 = ТЗ1.СкопироватьКолонки();
	ТЗ2.Колонки.Добавить("БазовыйТип",,НСтр("ru='Базовый тип'"));
	ТЗ2.Колонки.Добавить("Пояснение");
	ТЗ3 = ТЗ2.СкопироватьКолонки();
	
	ТЗ4 = Новый ТаблицаЗначений;
	ТЗ4.Колонки.Добавить("ИмяТипа",,НСтр("ru='Свойство'"));
	ТЗ4.Колонки.Добавить("служ_КодТипа");
	ТЗ4.Колонки.Добавить("БазовыйТип",,НСтр("ru='Тип'"));
	ТЗ4.Колонки.Добавить("служ_КодБазовогоТипа");
	ТЗ4.Колонки.Добавить("служ_ЭтоКлючевоеСвойство");
	ТЗ4.Колонки.Добавить("служ_УровеньКлючевогоСвойства");
	ТЗ4.Колонки.Добавить("служ_ЭтоЭлементКлючевогоСвойства");
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если Найти(СтрокаТЗ.ИмяТипа, "КлючевыеСвойства") > 0 Тогда
			УровеньКлючевогоСвойства = 1;
			НоваяСтрока = ТЗ4.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.служ_ЭтоКлючевоеСвойство = Истина;
			НоваяСтрока.служ_ЭтоЭлементКлючевогоСвойства = Ложь;
			// Добавление содержимого ключевого свойства
			УровеньКлючевогоСвойства = 1;
			ДополнитьТаблицуТиповКлючевымиСвойствами(ТЗ4, НоваяСтрока, СтрокаТЗ.ИмяТипа, ТекстЗапросаСвойстваКлючевыхСвойств, УровеньКлючевогоСвойства, ДополнительныеПараметры.СсылкаНаВерсиюФормата);
		ИначеЕсли СтрокаТЗ.ПространствоИмен = СамыйБазовыйПИ Тогда
			НоваяСтрока = ТЗ1.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		ИначеЕсли СтрокаТЗ.ПространствоИмен = ПИ_2 Тогда
			НоваяСтрока = ТЗ2.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		Иначе
			НоваяСтрока = ТЗ3.Добавить();
			Если ПИ_3 = "" Тогда
				ПИ_3 = СтрокаТЗ.ПространствоИмен;
			КонецЕсли;
			// Добавим сведения о значениях перечислений, если они есть
			ЗапросЗначения = Новый Запрос;
			ЗапросЗначения.Текст = ТекстЗапросаСвойстваПеречисления;
			ЗапросЗначения.УстановитьПараметр("ВерсияФормата", ДополнительныеПараметры.СсылкаНаВерсиюФормата);
			ЗапросЗначения.УстановитьПараметр("ИмяТипа", СтрокаТЗ.ИмяТипа);
			ЗначенияРезультат = ЗапросЗначения.Выполнить();
			НоваяСтрока.Пояснение = СтрокаТЗ.Пояснение;
			Если НЕ ЗначенияРезультат.Пустой() Тогда
				ТекстЗначения = НСтр("ru='Возможные значения'")+ ":<br>" +Символы.ПС;
				ВыборкаЗначения = ЗначенияРезультат.Выбрать();
				Пока ВыборкаЗначения.Следующий() Цикл
					ТекстЗначения = ТекстЗначения + СокрЛП(ВыборкаЗначения.Наименование) + "<br>" + Символы.ПС;
				КонецЦикла;
				НоваяСтрока.Пояснение = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТЗ.Пояснение)),
										"" + СокрЛП(СтрокаТЗ.Пояснение) + Символы.ПС + "<br>" + ТекстЗначения,
										ТекстЗначения);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,"Пояснение");
		КонецЕсли;
		// Добавим сведения о составном типе если они есть.
		Если СтрокаТЗ.Составной Тогда
			ЗапросСостав = Новый Запрос;
			ЗапросСостав.Текст = ТекстЗапросаСоставныеТипы;
			ЗапросСостав.УстановитьПараметр("ВерсияФормата", ДополнительныеПараметры.СсылкаНаВерсиюФормата);
			ЗапросСостав.УстановитьПараметр("ИмяТипа", СтрокаТЗ.ИмяТипа);
			СоставРезультат = ЗапросСостав.Выполнить();
			НоваяСтрока.Пояснение = СтрокаТЗ.Пояснение;
			Если НЕ СоставРезультат.Пустой() Тогда
				ТекстЗначения = НСтр("ru='Состав типа'")+ ":<br>" +Символы.ПС;
				ВыборкаСостав = СоставРезультат.Выбрать();
				Пока ВыборкаСостав.Следующий() Цикл
					ТекстЗначения = ТекстЗначения + СокрЛП(ВыборкаСостав.Наименование) + "<br>" + Символы.ПС;
				КонецЦикла;
				НоваяСтрока.Пояснение = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТЗ.Пояснение)),
										"" + СокрЛП(СтрокаТЗ.Пояснение) + Символы.ПС + "<br>" + ТекстЗначения,
										ТекстЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТЗ1.Сортировать("ИмяТипа");
	ТЗ2.Сортировать("ИмяТипа");
	ТЗ3.Сортировать("ИмяТипа");
	
	ОбщийТекст = "";
	
	ТекстХТМЛТаб = ПолучитьТаблицуHTML(ТЗ1, СамыйБазовыйПИ, Ложь, "ИмяТипа", 1, 1);
	ОбщийТекст = ОбщийТекст + ТекстХТМЛТаб;
	ТекстХТМЛТаб = ПолучитьТаблицуHTML(ТЗ2, ПИ_2, Ложь, "ИмяТипа", 1, 1);
	ОбщийТекст = ОбщийТекст + ТекстХТМЛТаб;
	ТекстХТМЛТаб = ПолучитьТаблицуHTML(ТЗ3, ПИ_3, Ложь, "ИмяТипа", 1, 1);
	ОбщийТекст = ОбщийТекст + ТекстХТМЛТаб;
	
	ИмяКолонкиСГиперссылкой = Новый Структура;
	ИмяКолонкиСГиперссылкой.Вставить("ИмяКолонкиСГиперссылкойДляЗакладки", "ИмяТипа");
	ИмяКолонкиСГиперссылкой.Вставить("ИмяКолонкиСГиперссылкойДляСсылки", "БазовыйТип");
	ИндексКолонкиЗначениеГиперссылки = Новый Структура;
	ИндексКолонкиЗначениеГиперссылки.Вставить("ИндексКолонкиЗначениеГиперссылкиДляЗакладки", 1);
	ИндексКолонкиЗначениеГиперссылки.Вставить("ИндексКолонкиЗначениеГиперссылкиДляСсылки", 3);

	ТекстХТМЛТаб = ПолучитьТаблицуHTML_ДляКлючевыхСвойств(ТЗ4, НСтр("ru='Ключевые свойства'"), ИмяКолонкиСГиперссылкой, ИндексКолонкиЗначениеГиперссылки, 2);
	ОбщийТекст = ОбщийТекст + ТекстХТМЛТаб;


	Возврат ОбщийТекст;
КонецФункции

Процедура ДополнитьТаблицуТиповКлючевымиСвойствами(ТаблицаСвойств, СтрокаТаблицыСвойств, ИмяТипа, ТекстЗапросаСвойстваКлючевыхСвойств, УровеньКлючевогоСвойства, СсылкаНаВерсиюФормата)
	Если УровеньКлючевогоСвойства > 10 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросЗначения = Новый Запрос;
	ЗапросЗначения.Текст = ТекстЗапросаСвойстваКлючевыхСвойств;
	ЗапросЗначения.УстановитьПараметр("ВерсияФормата", СсылкаНаВерсиюФормата);
	ЗапросЗначения.УстановитьПараметр("ИмяТипа", ИмяТипа);
	РезультатЗапроса = ЗапросЗначения.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыСвойств.служ_ЭтоКлючевоеСвойство = Истина;
	ВыборкаРезультат = РезультатЗапроса.Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		НоваяСтрока = ТаблицаСвойств.Добавить();
		НоваяСтрока.ИмяТипа = ВыборкаРезультат.Наименование;
		НоваяСтрока.БазовыйТип = ВыборкаРезультат.Тип;
		НоваяСтрока.служ_КодТипа = ВыборкаРезультат.Тип;
		НоваяСтрока.служ_КодБазовогоТипа = "т_" + ВыборкаРезультат.Тип;
		НоваяСтрока.служ_ЭтоКлючевоеСвойство = Ложь;
		НоваяСтрока.служ_ЭтоЭлементКлючевогоСвойства = Истина;
		НоваяСтрока.служ_УровеньКлючевогоСвойства = УровеньКлючевогоСвойства;
		Если ВыборкаРезультат.Тип = ИмяТипа Тогда
			// Ссылка на самого себя - не разузловываем
			Продолжить;
		КонецЕсли;
		
		УровеньКлючевогоСвойства = УровеньКлючевогоСвойства + 1;
		ДополнитьТаблицуТиповКлючевымиСвойствами(ТаблицаСвойств, НоваяСтрока, ВыборкаРезультат.Тип, ТекстЗапросаСвойстваКлючевыхСвойств, УровеньКлючевогоСвойства, СсылкаНаВерсиюФормата);
		УровеньКлючевогоСвойства = УровеньКлючевогоСвойства - 1;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьОписаниеСвойстваФорматаСтрокой(ТекСвойствоФормата)
	КусокОписания = ТекСвойствоФормата.Описание.Получить();
	Если КусокОписания = Неопределено Тогда
		// Возможно, описание задано для общего свойства
		СсылкаНаОбщееСвойствоОбъект = Справочники.СвойстваФормата.ОпределитьОбщийРеквизит(ТекСвойствоФормата);
		Если НЕ ЗначениеЗаполнено(СсылкаНаОбщееСвойствоОбъект) Тогда
			Возврат "";
		КонецЕсли;
		КусокОписания = СсылкаНаОбщееСвойствоОбъект.Описание.Получить();
		Если КусокОписания = Неопределено Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	ТекстОписания = "";
	Для Каждого ПараграфФД Из КусокОписания.Элементы Цикл
		Для Каждого ЭлементФД Из ПараграфФД.Элементы Цикл
			ТипЭлементаФД = ТипЗнч(ЭлементФД);
			Если ТипЭлементаФД <> Тип("ТекстФорматированногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
			ТекстОписания = ТекстОписания + СокрЛП(ЭлементФД.Текст) + Символы.ПС;
		КонецЦикла;
	КонецЦикла;
	Возврат ТекстОписания;
КонецФункции

// Возвращает текст в формате HTML
Функция ПолучитьТаблицуHTML(ТаблицаИсходная, ЗаголовокТаблицы, ПроверятьКлючевыеПоля, ИмяКолонкиСГиперссылкой = "", ИндексКолонкиЗначениеГиперссылки = 0, ТипГиперссылки = 0)
	ТекстТаблицы = "<TABLE id=table3 class=withBorder cellSpacing=0 cellPadding=3 width=800 border=0>" + Символы.ПС;
	ТекстТаблицы = ТекстТаблицы + "<thead><b> "+СокрЛП(ЗаголовокТаблицы)+" </b></thead> " + Символы.ПС;
	
	// Заголовок
	ТекстТаблицы = ТекстТаблицы + "<tr BGCOLOR=lightgrey>";
	Для Каждого КолонкаТЗ Из ТаблицаИсходная.Колонки Цикл
		ЗаголовокКолонки = СокрЛП(КолонкаТЗ.Заголовок);
		// Служебная колонка - не отображается
		Если Лев(КолонкаТЗ.Имя, 5) = "служ_" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗаголовокКолонки) Тогда
			ЗаголовокКолонки = СокрЛП(КолонкаТЗ.Имя);
		КонецЕсли;
		
		ТекстТаблицы = ТекстТаблицы + "<td> " + ЗаголовокКолонки + "</td>";
	КонецЦикла;
	ТекстТаблицы = ТекстТаблицы + "</tr>" + Символы.ПС;
	// Строки
	КоличествоКолонок = ТаблицаИсходная.Колонки.Количество();
	Для Каждого СтрокаТЗ Из ТаблицаИсходная Цикл
		ТекстТаблицы = ТекстТаблицы + "<tr >" + Символы.ПС + Символы.Таб;
		ИдентификаторГиперссылки = "";
		Если ИндексКолонкиЗначениеГиперссылки > 0 Тогда
			ИдентификаторГиперссылки = СтрокаТЗ[ИндексКолонкиЗначениеГиперссылки];
		КонецЕсли;
		ОбрамлениеНачало = "<td align=left>";
		ОбрамлениеОкончание = "</td>";

		Для Ном = 0 По КоличествоКолонок-1 Цикл
			ИмяКолонки = ТаблицаИсходная.Колонки[Ном].Имя;
			// Служебная колонка - не отображается
			Если Лев(ИмяКолонки, 5) = "служ_" Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = СокрЛП(СтрокаТЗ[Ном]); 
			Если НЕ ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ЗначениеЯчейки = "&nbsp;";
			КонецЕсли;
			Если Ном = 0 Тогда
				Отступ = "";
				Если ПроверятьКлючевыеПоля И СтрокаТЗ.служ_ЭтоЭлементКлючевогоСвойства Тогда
					Для Уровень = 1 По СтрокаТЗ.служ_УровеньКлючевогоСвойства Цикл
						Отступ = Отступ + "&nbsp;&nbsp;&nbsp;&nbsp;";
					КонецЦикла;
				КонецЕсли;
				ЗначениеЯчейки = "" + Отступ + ЗначениеЯчейки + "";
			КонецЕсли;
			
			Если ИдентификаторГиперссылки <> "" И ИмяКолонки = ИмяКолонкиСГиперссылкой Тогда
				// Особый случай - составной текст из нескольких гиперссылок
				Если ТипЗнч(ИдентификаторГиперссылки) = Тип("Структура") Тогда
					ТекстВЯчейку = "";
					Для Каждого КлючИЗначение Из ИдентификаторГиперссылки Цикл
						ТекстВЯчейку = ТекстВЯчейку + "<A href=""#" + КлючИЗначение.Ключ + """>" + КлючИЗначение.Значение + "</A><BR>" + Символы.ПС;
					КонецЦикла;
					ТекстТаблицы = ТекстТаблицы + ОбрамлениеНачало + ТекстВЯчейку + ОбрамлениеОкончание;
					Продолжить;
				КонецЕсли;
				
				Если ТипГиперссылки = 0 Тогда
					// вставляем саму гиперссылку 
					НачалоГиперссылки = "<A href=""#" + ИдентификаторГиперссылки + """>";
				Иначе
					// вставляем закладку для гиперссылки
					НачалоГиперссылки = "<A name=""" + ИдентификаторГиперссылки + """>";
				КонецЕсли;
				
				ТекстТаблицы = ТекстТаблицы + ОбрамлениеНачало + НачалоГиперссылки + ЗначениеЯчейки + "</A>" + ОбрамлениеОкончание;
			Иначе
				ТекстТаблицы = ТекстТаблицы + ОбрамлениеНачало + ЗначениеЯчейки + ОбрамлениеОкончание;
			КонецЕсли;
		КонецЦикла;
		ТекстТаблицы = ТекстТаблицы + "</tr>" + Символы.ПС;
	КонецЦикла;
	// Дописываем хвост
	ТекстТаблицы = ТекстТаблицы + "</table><BR>" + Символы.ПС;
	Возврат ТекстТаблицы;
КонецФункции

// Возвращает текст в формате HTML, учитывает особенности таблицы ключевых свойств
Функция ПолучитьТаблицуHTML_ДляКлючевыхСвойств(ТаблицаИсходная, ЗаголовокТаблицы, ИмяКолонкиСГиперссылкой, ИндексКолонкиЗначениеГиперссылки, ТипГиперссылки)
	ТекстТаблицы = "<table border=""1"" bordercolor=""black"" cellspacing=""0"" cellpadding=""1"">" + Символы.ПС;
	ТекстТаблицы = ТекстТаблицы + "<thead><FONT size=2 face=Arial> <b> "+СокрЛП(ЗаголовокТаблицы)+" </b></FONT> </thead> " + Символы.ПС;
	
	// Имена колонок для гиперссылок
	ИмяКолонкиСГиперссылкойДляСсылки = "";
	ИмяКолонкиСГиперссылкойДляЗакладки = "";
	ИмяКолонкиСГиперссылкой.Свойство("ИмяКолонкиСГиперссылкойДляСсылки", ИмяКолонкиСГиперссылкойДляСсылки);
	ИмяКолонкиСГиперссылкой.Свойство("ИмяКолонкиСГиперссылкойДляЗакладки", ИмяКолонкиСГиперссылкойДляЗакладки);
	
	// Заголовок
	ТекстТаблицы = ТекстТаблицы + "<tr BGCOLOR=lightgrey>";
	Для Каждого КолонкаТЗ Из ТаблицаИсходная.Колонки Цикл
		ЗаголовокКолонки = СокрЛП(КолонкаТЗ.Заголовок);
		// Служебная колонка - не отображается
		Если Лев(КолонкаТЗ.Имя, 5) = "служ_" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗаголовокКолонки) Тогда
			ЗаголовокКолонки = СокрЛП(КолонкаТЗ.Имя);
		КонецЕсли;
		
		ТекстТаблицы = ТекстТаблицы + "<td> " + ЗаголовокКолонки + "</td>";
	КонецЦикла;
	ТекстТаблицы = ТекстТаблицы + "</tr>" + Символы.ПС;
	// Строки
	КоличествоКолонок = ТаблицаИсходная.Колонки.Количество();
	Для Каждого СтрокаТЗ Из ТаблицаИсходная Цикл
		ТекстТаблицы = ТекстТаблицы + "<tr >" + Символы.ПС + Символы.Таб;
		ИдентификаторГиперссылкиДляЗакладки = "";
		ИдентификаторГиперссылкиДляСсылки = "";
		Если ИндексКолонкиЗначениеГиперссылки <> Неопределено Тогда
			ИдентификаторГиперссылкиДляЗакладки = "";
			ИдентификаторГиперссылкиДляСсылки = "";

			ИндексКолонкиЗначениеГиперссылкиДляСсылки = 0;
			ИндексКолонкиЗначениеГиперссылки.Свойство("ИндексКолонкиЗначениеГиперссылкиДляСсылки", ИндексКолонкиЗначениеГиперссылкиДляСсылки);
			ИндексКолонкиЗначениеГиперссылкиДляЗакладки = 0;
			ИндексКолонкиЗначениеГиперссылки.Свойство("ИндексКолонкиЗначениеГиперссылкиДляЗакладки", ИндексКолонкиЗначениеГиперссылкиДляЗакладки);
			Если ИндексКолонкиЗначениеГиперссылкиДляСсылки <> Неопределено Тогда
				ИдентификаторГиперссылкиДляСсылки = СтрокаТЗ[ИндексКолонкиЗначениеГиперссылкиДляСсылки];
			КонецЕсли;
			Если ИндексКолонкиЗначениеГиперссылкиДляЗакладки <> Неопределено Тогда
				ИдентификаторГиперссылкиДляЗакладки = СтрокаТЗ[ИндексКолонкиЗначениеГиперссылкиДляЗакладки];
			КонецЕсли;
		КонецЕсли;
		ОбрамлениеНачало = "<td align=left>";
		ОбрамлениеОкончание = "</td>";
		Если СтрокаТЗ.служ_ЭтоКлючевоеСвойство И НЕ СтрокаТЗ.служ_ЭтоЭлементКлючевогоСвойства Тогда
			ОбрамлениеНачало = "<td align=left BGCOLOR=gainsboro>";
		КонецЕсли;

		Для Ном = 0 По КоличествоКолонок-1 Цикл
			ИмяКолонки = ТаблицаИсходная.Колонки[Ном].Имя;
			// Служебная колонка - не отображается
			Если Лев(ИмяКолонки, 5) = "служ_" Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = СокрЛП(СтрокаТЗ[Ном]); 
			Если НЕ ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ЗначениеЯчейки = "&nbsp;";
			КонецЕсли;
			Если Ном = 0 Тогда
				Отступ = "";
				Если СтрокаТЗ.служ_ЭтоЭлементКлючевогоСвойства Тогда
					Для Уровень = 1 По СтрокаТЗ.служ_УровеньКлючевогоСвойства Цикл
						Отступ = Отступ + "&nbsp;&nbsp;&nbsp;&nbsp;";
					КонецЦикла;
				КонецЕсли;
				ЗначениеЯчейки = "" + Отступ + ЗначениеЯчейки + "";
			КонецЕсли;
			// Гиперссылки
			ДобавленаГиперссылка = Ложь;
			Если ЗначениеЗаполнено(ИдентификаторГиперссылкиДляЗакладки) И ЗначениеЗаполнено(ИмяКолонкиСГиперссылкойДляЗакладки) 
				И ИмяКолонки = ИмяКолонкиСГиперссылкойДляЗакладки Тогда
				ДобавитьВТекстТаблицыГиперссылку(ТекстТаблицы, ОбрамлениеНачало, ОбрамлениеОкончание, ЗначениеЯчейки, ИдентификаторГиперссылкиДляЗакладки, ИмяКолонкиСГиперссылкойДляЗакладки, 1);
				ДобавленаГиперссылка = Истина;
			ИначеЕсли ЗначениеЗаполнено(ИдентификаторГиперссылкиДляСсылки) И ЗначениеЗаполнено(ИмяКолонкиСГиперссылкойДляСсылки)
				И ИмяКолонки = ИмяКолонкиСГиперссылкойДляСсылки Тогда
				ДобавитьВТекстТаблицыГиперссылку(ТекстТаблицы, ОбрамлениеНачало, ОбрамлениеОкончание, ЗначениеЯчейки, ИдентификаторГиперссылкиДляСсылки, ИмяКолонкиСГиперссылкойДляСсылки, 0);
				ДобавленаГиперссылка = Истина;
			КонецЕсли;
			Если НЕ ДобавленаГиперссылка Тогда
				ТекстТаблицы = ТекстТаблицы + ОбрамлениеНачало + ЗначениеЯчейки + ОбрамлениеОкончание;
			КонецЕсли;
		КонецЦикла;
		ТекстТаблицы = ТекстТаблицы + "</tr>" + Символы.ПС;
	КонецЦикла;
	// Дописываем хвост
	ТекстТаблицы = ТекстТаблицы + "</table><BR>" + Символы.ПС;
	Возврат ТекстТаблицы;
КонецФункции

Процедура ДобавитьВТекстТаблицыГиперссылку(ТекстТаблицы, ОбрамлениеНачало, ОбрамлениеОкончание, ЗначениеЯчейки, ИдентификаторГиперссылки, ИмяКолонкиСГиперссылкой, ТипГиперссылки)
	// Особый случай - составной текст из нескольких гиперссылок
	Если ТипЗнч(ИдентификаторГиперссылки) = Тип("Структура") Тогда
		ТекстВЯчейку = "";
		Для Каждого КлючИЗначение Из ИдентификаторГиперссылки Цикл
			ТекстВЯчейку = ТекстВЯчейку + "<A href=""#" + КлючИЗначение.Ключ + """>" + КлючИЗначение.Значение + "</A><BR>" + Символы.ПС;
		КонецЦикла;
		ТекстТаблицы = ТекстТаблицы + ОбрамлениеНачало + ТекстВЯчейку + ОбрамлениеОкончание;
		Возврат;
	КонецЕсли;
	
	Если ТипГиперссылки = 0 Тогда
		// вставляем саму гиперссылку 
		НачалоГиперссылки = "<A href=""#" + ИдентификаторГиперссылки + """>";
	ИначеЕсли ТипГиперссылки = 1 Тогда
		// вставляем закладку для гиперссылки
		НачалоГиперссылки = "<A name=""" + ИдентификаторГиперссылки + """>";
	КонецЕсли;
	
	ТекстТаблицы = ТекстТаблицы + ОбрамлениеНачало + НачалоГиперссылки + ЗначениеЯчейки + "</A>" + ОбрамлениеОкончание;
КонецПроцедуры

Функция СоздатьТаблицуЗначенийДляШапки()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Свойства",,НСтр("ru='Свойства'"));
	ТЗ.Колонки.Добавить("ТипЗначения",,НСтр("ru='Тип значения'"));
	ТЗ.Колонки.Добавить("Обязательный",,НСтр("ru='Обязательный'"));
	ТЗ.Колонки.Добавить("Пояснение",,НСтр("ru='Пояснение'"));
	ТЗ.Колонки.Добавить("служ_КодТипа");
	ТЗ.Колонки.Добавить("служ_ЭтоКлючевоеСвойство");
	ТЗ.Колонки.Добавить("служ_ЭтоЭлементКлючевогоСвойства");
	ТЗ.Колонки.Добавить("служ_УровеньКлючевогоСвойства");
	ТЗ.Колонки.Добавить("служ_СоставнойТип", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("служ_СоставТипа");
	Возврат ТЗ;
КонецФункции

Функция СоздатьТаблицуЗначенийДляСпискаТЧ()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Свойства",,НСтр("ru='Свойства'"));
	ТЗ.Колонки.Добавить("ТипЗначения",,НСтр("ru='Тип значения'"));
	ТЗ.Колонки.Добавить("Пояснение",,НСтр("ru='Пояснение'"));
	Возврат ТЗ;
КонецФункции

Функция СоздатьТаблицуЗначенийДляРеквизитовТЧ()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Свойства",,НСтр("ru='Свойства'"));
	ТЗ.Колонки.Добавить("ТипЗначения",,НСтр("ru='Тип значения'"));
	ТЗ.Колонки.Добавить("Обязательный",,НСтр("ru='Обязательный'"));
	ТЗ.Колонки.Добавить("Пояснение",,НСтр("ru='Пояснение'"));
	ТЗ.Колонки.Добавить("служ_КодТипа");
	ТЗ.Колонки.Добавить("служ_ЭтоКлючевоеСвойство");
	ТЗ.Колонки.Добавить("служ_ЭтоЭлементКлючевогоСвойства");
	ТЗ.Колонки.Добавить("служ_УровеньКлючевогоСвойства");
	ТЗ.Колонки.Добавить("служ_СоставнойТип", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("служ_СоставТипа");
	Возврат ТЗ;
КонецФункции

Процедура ДобавитьСведенияОСвойстве(НовСтрока, ТекСвойствоФормата, ДополнительныеПараметры, ЭтоСтрокаТЗ = Ложь)
	Если ЭтоСтрокаТЗ Тогда
		СтруктураРеквизитов = ТекСвойствоФормата;
	Иначе
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСвойствоФормата,"СоставнойТип, Тип, Обязательное");
	КонецЕсли;
	НовСтрока.Обязательный = ?(СтруктураРеквизитов.Обязательное, "Да", "");
	// может быть null в случае с группой
	Если СтруктураРеквизитов.СоставнойТип = Истина Тогда
		НовСтрока.служ_СоставнойТип = Истина;
		МассивТипов = ?(ЭтоСтрокаТЗ, СтруктураРеквизитов.Состав.ВыгрузитьКолонку("ТипФормата"),
						ТекСвойствоФормата.Состав.ВыгрузитьКолонку("ТипФормата"));
		НовСтрока.служ_СоставТипа = МассивТипов;
		
		// Заполним код типа
		СтруктураКодов = Новый Структура;
		ИмяТипаЛок = "";
		Для Каждого ИмяТипаЛок Из МассивТипов Цикл
			КодТипаЛок = ПолучитьКодТипа(СокрЛП(ИмяТипаЛок), ДополнительныеПараметры);
			Если СокрЛП(КодТипаЛок) <> "" Тогда
				СтруктураКодов.Вставить(КодТипаЛок, СокрЛП(ИмяТипаЛок));
			КонецЕсли;
		КонецЦикла;

		НовСтрока.служ_КодТипа = ?(СтруктураКодов.Количество() > 0, СтруктураКодов, "");
	Иначе
		НовСтрока.ТипЗначения = ?(ЭтоСтрокаТЗ, СтруктураРеквизитов.ТипЗначения, СтруктураРеквизитов.Тип);
		НовСтрока.служ_КодТипа = ПолучитьКодТипа(НовСтрока.ТипЗначения, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#КонецЕсли